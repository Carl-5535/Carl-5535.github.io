<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>消息通知与处理机制</title>
    <link href="/2022/11/26/CarlSDK/%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/"/>
    <url>/2022/11/26/CarlSDK/%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="设计目的"><a href="#设计目的" class="headerlink" title="设计目的"></a>设计目的</h2><p>当发送消息的线程任然有任务时，就可以使用此机制，来进行消息的通知。</p><p>此消息处理机制是开启了一个线程进行接受数据并处理，所以不影响发送消息的线程。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>状态上报：客户端收到server的上报时，使用此机制开启线程处理上报，接受消息的线程继续接受不会阻塞</li><li>其他模块的上报：如电池电量变化通知到我们sdk中的回调函数，此时是由负责电池电量部分创建线程执行的，利用此机制不会阻塞第三方模块的线程</li><li>开启自定义的线程，达到条件后，可以借此机制运行自己的线程函数</li></ul><h2 id="机制设计"><a href="#机制设计" class="headerlink" title="机制设计"></a>机制设计</h2><p>主要有两个类：CHandler和CMessage</p><ul><li>CHandler：消息处理类，负责发送和接受消息，通过原子操作实现自己发给自己消息</li><li>CMessage：消息体，负责创建消息，消息中包含接受此消息的CHandler，方便其他对象向不同的CHandler发送消息</li></ul><p>工具类也有两个：CNotify和CNotifyList</p><ul><li>CNotify：包含CHandler和id，可以注册一条消息，以及通知消息。实现不同对象间的消息通知。</li><li>CNotifyList：CNotify的集合，可以通知多个CHandler对象</li></ul><p>结构如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/handler1.png" alt="handler"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>需要接收消息的对象继承CHandler，并调用线程启动函数start(),start()函数具体参考<a href="/2022/11/19/CarlSDK/%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%B1%A1/">CThread</a></li><li>必须重写handleMessage()，可以选择重写MessageToString()方法，建议重写</li><li>发送消息的对象创建CNotify或CNotifyList对象，并接收需要通知的对象注册</li><li>CHandler通过sendMessage()向自己发消息并处理，或者接收已经被注册的对象发送的消息</li></ol><h2 id="CHandler的实现"><a href="#CHandler的实现" class="headerlink" title="CHandler的实现"></a>CHandler的实现</h2><p>主要使用原子操作进行数据的同步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;chandler.h&quot;</span></span><br><br>CHandler::<span class="hljs-built_in">CHandler</span>()<br>&#123;<br><br>&#125;<br><br>CHandler::~<span class="hljs-built_in">CHandler</span>()<br>&#123;<br>    CMessage::<span class="hljs-built_in">obtain</span>(<span class="hljs-keyword">this</span>,C_MESSAGE_HANDLER_EXIT)-&gt;<span class="hljs-built_in">sendToHandler</span>();<br><br>    <span class="hljs-comment">/*Wait for 50ms to make sure thread exit*/</span><br>    mMutex.<span class="hljs-built_in">lock</span>();<br>    mCond.<span class="hljs-built_in">wait</span>(&amp;mMutex, <span class="hljs-number">50</span>);<br>    mMutex.<span class="hljs-built_in">unlock</span>();<br><br>    <span class="hljs-built_in">stop</span>();<br>    <span class="hljs-built_in">join</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CHandler::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CMessage *message = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">bool</span> exit_flag = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">while</span> (!exit_flag)<br>    &#123;<br>        mMutex.<span class="hljs-built_in">lock</span>();<br>        <span class="hljs-keyword">if</span> (mMessageQueue.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-comment">//wait new message</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wait new message\n&quot;</span>);<br>            mCond.<span class="hljs-built_in">wait</span>(&amp;mMutex);<br>        &#125;<br>        message = mMessageQueue.<span class="hljs-built_in">front</span>();<br>        mMessageQueue.<span class="hljs-built_in">pop</span>();<br>        mMutex.<span class="hljs-built_in">unlock</span>();<br><br>        <span class="hljs-keyword">if</span> (message != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-comment">//Dispatch message</span><br>            exit_flag = <span class="hljs-built_in">dispatchMessage</span>(message);<br>            <span class="hljs-keyword">delete</span> message;<br>            message = <span class="hljs-literal">nullptr</span>;<br>        &#125;    <br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s] prepare exit&quot;</span>, <span class="hljs-built_in">getThreadName</span>().<span class="hljs-built_in">c_str</span>());<br>    mMutex.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">while</span> (!mMessageQueue.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        message = mMessageQueue.<span class="hljs-built_in">front</span>();<br>        mMessageQueue.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">delete</span> message;<br>        message = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    mCond.<span class="hljs-built_in">signal</span>();<br>    mMutex.<span class="hljs-built_in">unlock</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s] exit\n&quot;</span>, <span class="hljs-built_in">getThreadName</span>().<span class="hljs-built_in">c_str</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CHandler::dispatchMessage</span><span class="hljs-params">(CMessage *message)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (message != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (message-&gt;<span class="hljs-built_in">getMessageId</span>() == C_MESSAGE_HANDLER_EXIT)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s] &lt;= [%s] message[C_MESSAGE_HANDLER_EXIT]\n&quot;</span>, (message-&gt;<span class="hljs-built_in">getHandler</span>())-&gt;<span class="hljs-built_in">getThreadName</span>().<span class="hljs-built_in">c_str</span>(), (message-&gt;<span class="hljs-built_in">getOriginName</span>()).<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s] &lt;= [%s] message[%s]\n&quot;</span>, (message-&gt;<span class="hljs-built_in">getHandler</span>())-&gt;<span class="hljs-built_in">getThreadName</span>().<span class="hljs-built_in">c_str</span>(), (message-&gt;<span class="hljs-built_in">getOriginName</span>()).<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">messageToString</span>(message).<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-comment">//Processing messages</span><br>        <span class="hljs-built_in">handleMessage</span>(message);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function">CMessage *<span class="hljs-title">CHandler::obtainMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> message_id)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> CMessage::<span class="hljs-built_in">obtain</span>(<span class="hljs-keyword">this</span>, message_id);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CHandler::sendMessage</span><span class="hljs-params">(CMessage *message)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (message == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;message is null\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    mMutex.<span class="hljs-built_in">lock</span>();<br>    mMessageQueue.<span class="hljs-built_in">push</span>(message);<br>    <span class="hljs-keyword">if</span> (mMessageQueue.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">//recv new message</span><br>        <span class="hljs-comment">//notify running thread</span><br>        mCond.<span class="hljs-built_in">signal</span>();<br>    &#125;<br>    mMutex.<span class="hljs-built_in">unlock</span>();<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">CHandler::messageToString</span><span class="hljs-params">(CMessage *message)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (message == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (message-&gt;<span class="hljs-built_in">getMessageId</span>())<br>    &#123;<br>        <span class="hljs-keyword">case</span> C_MESSAGE_HANDLER_EXIT:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;C_MESSAGE_HANDLER_EXIT&quot;</span>;<br>        <span class="hljs-keyword">default</span>: <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;UNKNOWN&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CMessage的实现"><a href="#CMessage的实现" class="headerlink" title="CMessage的实现"></a>CMessage的实现</h2><p>CMessage比较简单，使用静态方法obtain生成对象，使用getArg获取参数</p><p>主要运用了模板函数，此处贴上他们的模板函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> CMessage *<span class="hljs-title">obtain</span><span class="hljs-params">(CHandler *handler, <span class="hljs-keyword">int</span> message_id, std::shared_ptr&lt;T&gt; arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::shared_ptr&lt;<span class="hljs-keyword">void</span>&gt; p_arg = std::static_pointer_cast&lt;<span class="hljs-keyword">void</span>&gt;(arg);<br>    CMessage *message = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CMessage</span>(handler, message_id, p_arg);<br>    <span class="hljs-keyword">return</span> message;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">std::shared_ptr&lt;T&gt; <span class="hljs-title">getArg</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> std::static_pointer_cast&lt;T&gt;(mArg);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CNotify的实现"><a href="#CNotify的实现" class="headerlink" title="CNotify的实现"></a>CNotify的实现</h2><p>CNotify的实现是保存CHandler对象的指针以及messageid，在需要通知时接收参数并创建CMessage对象再进行发送，set()方法就是简单的赋值，主要看通知方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">(std::shared_ptr&lt;T&gt; arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mHandler != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        CMessage::<span class="hljs-built_in">obtain</span>(mHandler, mMessageId,std::static_pointer_cast&lt;<span class="hljs-keyword">void</span>&gt;(arg))-&gt;<span class="hljs-built_in">sendToHandler</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CNotifyList的实现"><a href="#CNotifyList的实现" class="headerlink" title="CNotifyList的实现"></a>CNotifyList的实现</h2><p>接收CHandler对象的指针以及messageid，创建CNotify并保存到队列中，通知时调用CNotify的通知方法就可以了，主要展示通知方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">(std::shared_ptr&lt;T&gt; arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::list&lt;CNotify *&gt;::iterator it;<br>    mMutex.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">for</span> (it = mNotifications.<span class="hljs-built_in">begin</span>(); it != mNotifications.<span class="hljs-built_in">end</span>(); ++it)<br>    &#123;<br>        (*it)-&gt;<span class="hljs-built_in">notify</span>(arg);<br>    &#125;<br>    mMutex.<span class="hljs-built_in">unlock</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
      <tag>造轮子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CJson</title>
    <link href="/2022/11/21/CarlSDK/CJson/"/>
    <url>/2022/11/21/CarlSDK/CJson/</url>
    
    <content type="html"><![CDATA[<h2 id="CJson"><a href="#CJson" class="headerlink" title="CJson"></a>CJson</h2><p>之前有介绍过json，这里再次引用一下json的定义：</p><blockquote><p>JSON（JavaScript Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于 ECMAScript（European Computer Manufacturers Association, 欧洲计算机协会制定的js规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote><p>json是与编程语言无关的一种数据储存格式，不同的语言都有成熟的json库去生成和解析json，我有介绍过两种json库：</p><ul><li>C语言中的<a href="/2022/10/19/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/json-c%E7%9A%84%E4%BD%BF%E7%94%A8/">json-c</a></li><li>C++中的<a href="/2022/11/21/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/jsonhpp/">Json for Modern C++</a></li></ul><p>CJson是封装了<a href="/2022/11/21/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/jsonhpp/">Json for Modern C++</a>的对象，对外提供一些简单的接口</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>关于<a href="/2022/11/21/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/jsonhpp/">Json for Modern C++</a>可以查看其介绍，这里直接放实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cjson.h&quot;</span></span><br><br>CJson::<span class="hljs-built_in">CJson</span>()<br>&#123;<br><br>&#125;<br><br>CJson::<span class="hljs-built_in">CJson</span>(std::string str)<br>&#123;<br>    mJson = nlohmann::json::<span class="hljs-built_in">parse</span>(str);<br>&#125;<br><br>CJson::<span class="hljs-built_in">CJson</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str)<br>&#123;<br>    std::string json_str = str;<br>    mJson = nlohmann::json::<span class="hljs-built_in">parse</span>(json_str);<br>&#125;<br><br>CJson::<span class="hljs-built_in">CJson</span>(nlohmann::json object)<br>&#123;<br>    mJson = object;<br>&#125;<br><br>CJson::~<span class="hljs-built_in">CJson</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-function">nlohmann::json <span class="hljs-title">CJson::getObjectByKey</span><span class="hljs-params">(string key)</span></span><br><span class="hljs-function"></span>&#123;<br>    nlohmann::json object_json;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        object_json = mJson[key];<br>    &#125;<br>    <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(<span class="hljs-keyword">const</span> std::exception&amp; e)<br>    &#123;<br>        <span class="hljs-comment">/*error*/</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> object_json;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CJson::getValueByKey</span><span class="hljs-params">(string key, string &amp;value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        value = mJson[key];<br>        ret = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(<span class="hljs-keyword">const</span> std::exception&amp; e)<br>    &#123;<br>        <span class="hljs-comment">/*error*/</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CJson::getValueByKey</span><span class="hljs-params">(string key, <span class="hljs-keyword">int</span> *value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        *value = mJson[key];<br>        ret = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(<span class="hljs-keyword">const</span> std::exception&amp; e)<br>    &#123;<br>        <span class="hljs-comment">/*error*/</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CJson::isExistKey</span><span class="hljs-params">(std::string key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mJson.<span class="hljs-built_in">contains</span>(key))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CJson::isExistKey</span><span class="hljs-params">(std::string key, nlohmann::json json)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (json.<span class="hljs-built_in">contains</span>(key))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CJson::setValueByKey</span><span class="hljs-params">(string key, string value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isExistKey</span>(key))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    mJson[key] = value;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CJson::setValueByKey</span><span class="hljs-params">(string key, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* value)</span></span><br><span class="hljs-function"></span>&#123;<br>    string set_value = value;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">setValueByKey</span>(key, set_value);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CJson::setValueByKey</span><span class="hljs-params">(string key, <span class="hljs-keyword">int</span> value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isExistKey</span>(key))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    mJson[key] = value;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CJson::insertKeyValue</span><span class="hljs-params">(string key, string value)</span></span><br><span class="hljs-function"></span>&#123;<br>    mJson[key] = value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CJson::insertKeyValue</span><span class="hljs-params">(string key, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* value)</span></span><br><span class="hljs-function"></span>&#123;<br>    string set_value = value;<br>    mJson[key] = set_value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CJson::insertKeyValue</span><span class="hljs-params">(string key, <span class="hljs-keyword">int</span> value)</span></span><br><span class="hljs-function"></span>&#123;<br>    mJson[key] = value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CJson::insertKeyObject</span><span class="hljs-params">(string key, nlohmann::json object)</span></span><br><span class="hljs-function"></span>&#123;<br>    mJson[key] = object;<br>&#125;<br><br><span class="hljs-function">nlohmann::json <span class="hljs-title">CJson::getJson</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> mJson;<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">CJson::getJsonToString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string sJson;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        sJson = mJson.<span class="hljs-built_in">dump</span>();<br>    &#125;<br>    <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (<span class="hljs-keyword">const</span> std::exception&amp; ex)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;json to string error :%s&quot;</span>, ex.<span class="hljs-built_in">what</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sJson;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CJson::getArraySize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mJson.<span class="hljs-built_in">type</span>() == nlohmann::json::<span class="hljs-keyword">value_t</span>::array)<br>    &#123;<br>        <span class="hljs-keyword">return</span> mJson.<span class="hljs-built_in">size</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CJson::getArrayValueOfIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, nlohmann::json &amp;value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mJson.<span class="hljs-built_in">type</span>() == nlohmann::json::<span class="hljs-keyword">value_t</span>::array)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (mJson.<span class="hljs-built_in">size</span>() &gt;= index)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        value = mJson.<span class="hljs-built_in">at</span>(index);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CJson::insertArrayValueByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, nlohmann::json value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mJson.<span class="hljs-built_in">type</span>() == nlohmann::json::<span class="hljs-keyword">value_t</span>::array)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (mJson.<span class="hljs-built_in">size</span>() &gt; index)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        mJson[index] = value;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Json for Modern C++</title>
    <link href="/2022/11/21/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/jsonhpp/"/>
    <url>/2022/11/21/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/jsonhpp/</url>
    
    <content type="html"><![CDATA[<h2 id="Json-for-Modern-C"><a href="#Json-for-Modern-C" class="headerlink" title="Json for Modern C++"></a>Json for Modern C++</h2><p><a href="https://github.com/nlohmann/json">nlohman::json</a>是一个高效，容易上手的Json库，只需要添加json.hpp头文件到项目中就可以使用，其支持STL的特性，了解STL就可以开始开发了</p><p>在此，介绍我用到的一些的方法，更多使用方法请参考<a href="https://github.com/nlohmann/json/tree/develop/docs/examples">官方示例</a></p><h2 id="使用-json-hpp"><a href="#使用-json-hpp" class="headerlink" title="使用 json.hpp"></a>使用 json.hpp</h2><p>将json.hpp拷贝到代码目录中，并引用，可以选择重定义命名空间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;json.hpp&gt;</span></span><br><br><span class="hljs-comment">// for convenience</span><br><span class="hljs-keyword">using</span> json = nlohmann::json;<br></code></pre></td></tr></table></figure><blockquote><p>请在C++11或更高版本使用jsonhpp</p></blockquote><h2 id="创建json对象"><a href="#创建json对象" class="headerlink" title="创建json对象"></a>创建json对象</h2><p>jsonhpp可以自动识别vlaue的类型，所以不用明确指出创建json对象类型，如需要创建如下json：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;carl&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">24</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>:[<span class="hljs-string">&quot;12345678901&quot;</span>,<span class="hljs-string">&quot;12345678902&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以直接赋值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">    json carl;<br>    carl[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;carl&quot;</span>;<br>    carl[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">24</span>;<br>    carl[<span class="hljs-string">&quot;phone&quot;</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;12345678901&quot;</span>);<br>    carl[<span class="hljs-string">&quot;phone&quot;</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;12345678902&quot;</span>);<br><br>    std::cout &lt;&lt; carl &lt;&lt; std::endl;<br><br><span class="hljs-comment">/*&#123;&quot;age&quot;:24,&quot;name&quot;:&quot;carl&quot;,&quot;phone&quot;:[&quot;12345678901&quot;,&quot;12345678902&quot;]&#125;*/</span><br></code></pre></td></tr></table></figure><blockquote><p>因为其支持STL的特性，所以可以直接使用STL的特性，如push_back方法</p></blockquote><p>如果想显示的指出json对象的类型，如数组对象，可以如下表示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//json phone = json::array(&#123;&quot;12345678901&quot;,&quot;12345678902&quot;&#125;);</span><br>json phone = json::<span class="hljs-built_in">array</span>();<br>phone[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;12345678902&quot;</span>;<br>phone[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;12345678902&quot;</span>;<br>carl[<span class="hljs-string">&quot;phone&quot;</span>] = phone;<br></code></pre></td></tr></table></figure><p>可以直接使用数据进行创建，每个对象需要用花括号包括，key与value使用逗号分隔，实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">json carl = &#123;<br>    &#123;<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">24</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;carl&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;phone&quot;</span>,<br>    &#123;<span class="hljs-string">&quot;12345678901&quot;</span>,<span class="hljs-string">&quot;12345678902&quot;</span>&#125;<br>    &#125;&#125;;<br></code></pre></td></tr></table></figure><p>jsonhpp支持流操作，所以可以通过流创建json对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::ifstream <span class="hljs-title">file</span><span class="hljs-params">(<span class="hljs-string">&quot;test.json&quot;</span>)</span></span>;<br><span class="hljs-keyword">if</span> (file.<span class="hljs-built_in">is_open</span>())<br>&#123;<br>    json carl;<br>    file &gt;&gt; carl;<br>    std::cout &lt;&lt; carl &lt;&lt; std::endl;<br>    file.<span class="hljs-built_in">close</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;file is not open&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><p>在操作时可以使用type()方法判断类型在进行相应的操作，主要用于数组对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (carl[<span class="hljs-string">&quot;phone&quot;</span>].<span class="hljs-built_in">type</span>() == json::<span class="hljs-keyword">value_t</span>::array)<br>&#123;<br>    carl[<span class="hljs-string">&quot;phone&quot;</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;12345678903&quot;</span>);<br>    std::cout &lt;&lt; carl[<span class="hljs-string">&quot;phone&quot;</span>] &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>value_t有如下类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">value_t</span> :</span> std::<span class="hljs-keyword">uint8_t</span><br>&#123;<br>    null,             <span class="hljs-comment">///&lt; null value</span><br>    object,           <span class="hljs-comment">///&lt; object (unordered set of name/value pairs)</span><br>    array,            <span class="hljs-comment">///&lt; array (ordered collection of values)</span><br>    string,           <span class="hljs-comment">///&lt; string value</span><br>    boolean,          <span class="hljs-comment">///&lt; boolean value</span><br>    number_integer,   <span class="hljs-comment">///&lt; number value (signed integer)</span><br>    number_unsigned,  <span class="hljs-comment">///&lt; number value (unsigned integer)</span><br>    number_float,     <span class="hljs-comment">///&lt; number value (floating-point)</span><br>    binary,           <span class="hljs-comment">///&lt; binary array (ordered collection of bytes)</span><br>    discarded         <span class="hljs-comment">///&lt; discarded by the parser callback function</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="获取对象大小"><a href="#获取对象大小" class="headerlink" title="获取对象大小"></a>获取对象大小</h2><p>和STL一样可以使用size()方法获取对象大小：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::cout &lt;&lt; carl[<span class="hljs-string">&quot;phone&quot;</span>].<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h2 id="判断键是否存在"><a href="#判断键是否存在" class="headerlink" title="判断键是否存在"></a>判断键是否存在</h2><p>jsonhpp提供了contains()方法来判断键是否存在，当要修改对应的值时。判断键是否存在很有必要，以免误操作添加了新的键值对</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span>(carl.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;name&quot;</span>))<br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;name is exist&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;name is not exist&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>可以使用dump()方法序列化,dump()也可以传入整数，格式化字符串：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::string str;<br>str = carl.<span class="hljs-built_in">dump</span>();<br>std::cout &lt;&lt; str &lt;&lt; std::endl;<br><span class="hljs-comment">//&#123;&quot;age&quot;:24,&quot;name&quot;:&quot;carl&quot;,&quot;phone&quot;:[&quot;12345678901&quot;,&quot;12345678902&quot;]&#125;</span><br><br>str = carl.<span class="hljs-built_in">dump</span>(<span class="hljs-number">4</span>);<br>std::cout &lt;&lt; str &lt;&lt; std::endl;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    &quot;age&quot;: 24,</span><br><span class="hljs-comment">    &quot;name&quot;: &quot;carl&quot;,</span><br><span class="hljs-comment">    &quot;phone&quot;: [</span><br><span class="hljs-comment">        &quot;12345678901&quot;,</span><br><span class="hljs-comment">        &quot;12345678902&quot;</span><br><span class="hljs-comment">    ]</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><ul><li><p>可以在json字符串后面添加_json后缀：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">json carl = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;carl\&quot;,\&quot;age\&quot;:24,\&quot;phone\&quot;:[\&quot;12345678901\&quot;,\&quot;12345678902\&quot;]&#125;&quot;</span>_json;<br></code></pre></td></tr></table></figure></li><li><p>可以通过parse()方法：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">json carl = json::<span class="hljs-built_in">parse</span>(<span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;carl\&quot;,\&quot;age\&quot;:24,\&quot;phone\&quot;:[\&quot;12345678901\&quot;,\&quot;12345678902\&quot;]&#125;&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CFrameworkLinster</title>
    <link href="/2022/11/20/CarlSDK/CFrameworkLinster/"/>
    <url>/2022/11/20/CarlSDK/CFrameworkLinster/</url>
    
    <content type="html"><![CDATA[<h2 id="CFrameworkLinster"><a href="#CFrameworkLinster" class="headerlink" title="CFrameworkLinster"></a>CFrameworkLinster</h2><p>CFrameworkLinster是CSocketListener的派生类，主要负责维护一个sever中service的列表、处理接收的数据以及发送数据</p><h2 id="CFrameworkService"><a href="#CFrameworkService" class="headerlink" title="CFrameworkService"></a>CFrameworkService</h2><p>CFrameworkService是一个抽象类，实现service对象时需要继承CFrameworkService，并实现serviceRunning方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CFrameworkService</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    string mServiceName;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CFrameworkService</span>(string name) &#123; mServiceName = name; &#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">CFrameworkService</span>() &#123; &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getServiceName</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> mServiceName; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">serviceRunning</span><span class="hljs-params">(std::shared_ptr&lt;CSocketClient&gt; client_socket, CJson *json_data)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="service的注册、获取与注销"><a href="#service的注册、获取与注销" class="headerlink" title="service的注册、获取与注销"></a>service的注册、获取与注销</h2><p>注册比较简单，添加到列表中即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CFrameworkListener::registerService</span><span class="hljs-params">(std::shared_ptr&lt;CFrameworkService&gt; service)</span></span><br><span class="hljs-function"></span>&#123;<br>    mServiceMutex.<span class="hljs-built_in">lock</span>();<br>    mFrameServiceLists.<span class="hljs-built_in">push_back</span>(service);<br>    mServiceMutex.<span class="hljs-built_in">unlock</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>获取时根据名字，在列表中查找对应的service：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::shared_ptr&lt;CFrameworkService&gt; <span class="hljs-title">CFrameworkListener::getFrameworkService</span><span class="hljs-params">(string service_name)</span></span><br><span class="hljs-function"></span>&#123;<br>    list&lt;std::shared_ptr&lt;CFrameworkService&gt;&gt;::iterator it;<br><br>    mServiceMutex.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">for</span> (it = mFrameServiceLists.<span class="hljs-built_in">begin</span>(); it != mFrameServiceLists.<span class="hljs-built_in">end</span>(); it++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((*it)-&gt;<span class="hljs-built_in">getServiceName</span>() == service_name)<br>        &#123;<br>            mServiceMutex.<span class="hljs-built_in">unlock</span>();<br>            <span class="hljs-keyword">return</span> (*it);<br>        &#125;<br>    &#125;<br>    mServiceMutex.<span class="hljs-built_in">unlock</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注销时清空列表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CFrameworkListener::releaseAllFrameworkService</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    list&lt;std::shared_ptr&lt;CFrameworkService&gt;&gt;::iterator it;<br><br>    mServiceMutex.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">for</span> (it = mFrameServiceLists.<span class="hljs-built_in">begin</span>(); it != mFrameServiceLists.<span class="hljs-built_in">end</span>(); it++)<br>    &#123;<br>        (*it) = <span class="hljs-literal">nullptr</span>;<br>        it = mFrameServiceLists.<span class="hljs-built_in">erase</span>(it);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    mServiceMutex.<span class="hljs-built_in">unlock</span>();<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="处理接收的数据"><a href="#处理接收的数据" class="headerlink" title="处理接收的数据"></a>处理接收的数据</h2><p>接收到数据后，根据数据中的service_name，选择对应service，执行它的serviceRunnin方法完成对应的操作</p><p>由于我这里传输数据使用json字符串，所以接收到数据后需要将其序列化json对象，定义client传输数据的数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-string">&quot;operate&quot;</span>:<span class="hljs-string">&quot;set&quot;</span>,<br>    <span class="hljs-string">&quot;sdk_test_set_name&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<br>    <span class="hljs-string">&quot;service_name&quot;</span>:<span class="hljs-string">&quot;test_service&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>client发送的数据意义如下：</p><ul><li>operate有get和set两种</li><li>service_name代表这个操作是发给那个service</li><li>sdk_test_set_name是用户自定义的此次操作的key，test是value。</li></ul><p>这条数据代表：发给test_service，设置test_name为test</p><blockquote><p>根据实际情况，value可以为空</p></blockquote><p>数据处理的实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CFrameworkListener::onDataAvailable</span><span class="hljs-params">(std::shared_ptr&lt;CSocketClient&gt; client_socket)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *package = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">for</span>(;;)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(client_socket-&gt;<span class="hljs-built_in">recvData</span>(&amp;package, &amp;length) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (package != <span class="hljs-literal">nullptr</span> &amp;&amp; length &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">dispatchService</span>(<span class="hljs-keyword">this</span>, client_socket, package, length);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CFrameworkListener::dispatchService</span><span class="hljs-params">(CFrameworkListener *listener, std::shared_ptr&lt;CSocketClient&gt; client_socket, string data, <span class="hljs-keyword">int</span> data_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    CJson *json = <span class="hljs-literal">nullptr</span>;<br>    string service_name, service_operate;<br>    std::shared_ptr&lt;CFrameworkService&gt; framework_service;<br><br>    <span class="hljs-keyword">if</span> (listener == <span class="hljs-literal">nullptr</span> || client_socket == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dispatchService data[%d]: %s\n&quot;</span>,data_length, data.<span class="hljs-built_in">c_str</span>());<br><br>    json = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CJson</span>(data);<br><br>    <span class="hljs-keyword">if</span> (json == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((json-&gt;<span class="hljs-built_in">getValueByKey</span>(<span class="hljs-string">&quot;service_name&quot;</span>, service_name)) != <span class="hljs-number">0</span> &amp;&amp; json-&gt;<span class="hljs-built_in">getValueByKey</span>(<span class="hljs-string">&quot;operate&quot;</span>, service_operate))<br>    &#123;<br>        <span class="hljs-keyword">delete</span> json;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    framework_service = listener-&gt;<span class="hljs-built_in">getFrameworkService</span>(service_name);<br><br>    <span class="hljs-keyword">if</span> (framework_service != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (framework_service-&gt;<span class="hljs-built_in">serviceRunning</span>(client_socket, json) != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">/*error*/</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        string response_data;<br>        CJson *response = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CJson</span>();<br>        response-&gt;<span class="hljs-built_in">insertKeyValue</span>(<span class="hljs-string">&quot;service_name&quot;</span>, service_name);<br>        response-&gt;<span class="hljs-built_in">insertKeyValue</span>(<span class="hljs-string">&quot;operate&quot;</span>, service_operate);<br><br>        response_data = response-&gt;<span class="hljs-built_in">getJsonToString</span>();<br>        client_socket-&gt;<span class="hljs-built_in">sendData</span>((<span class="hljs-keyword">char</span> *)response_data.<span class="hljs-built_in">c_str</span>(), response_data.<span class="hljs-built_in">length</span>() + <span class="hljs-number">1</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSelect</title>
    <link href="/2022/11/20/CarlSDK/CSelect/"/>
    <url>/2022/11/20/CarlSDK/CSelect/</url>
    
    <content type="html"><![CDATA[<h2 id="CSelect"><a href="#CSelect" class="headerlink" title="CSelect"></a>CSelect</h2><p>在CSocketListener接受数据时，由于是多client所以使用select进行I/O多路复用，CSelect是实现select操作的对象</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>Select比较简单，具体用法可以查看Linux系统编程：<a href="/2021/02/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/I-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/">I/O多路复用</a></p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cselect.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cerrno&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br>CSelect::<span class="hljs-built_in">CSelect</span>()<br>&#123;<br>    mMaxFd = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;mErrorFds);<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;mWriteFds);<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;mReadFds);<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;mReadSelectFds);<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;mWriteSelectFds);<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;mErrorSelectFds);<br>&#125;<br><br>CSelect:: ~<span class="hljs-built_in">CSelect</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CSelect::zeroFds</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd_type)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_READ)<br>    &#123;<br>        <span class="hljs-built_in">FD_ZERO</span>(&amp;mReadFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_WRITE)<br>    &#123;<br>        <span class="hljs-built_in">FD_ZERO</span>(&amp;mWriteFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_ERROR)<br>    &#123;<br>        <span class="hljs-built_in">FD_ZERO</span>(&amp;mErrorFds);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CSelect::addFd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd_type, <span class="hljs-keyword">int</span> fd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_READ)<br>    &#123;<br>        <span class="hljs-built_in">FD_SET</span>(fd, &amp;mReadFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_WRITE)<br>    &#123;<br>        <span class="hljs-built_in">FD_SET</span>(fd, &amp;mWriteFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_ERROR)<br>    &#123;<br>        <span class="hljs-built_in">FD_SET</span>(fd, &amp;mErrorFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd &gt; mMaxFd)<br>    &#123;<br>        mMaxFd = fd;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CSelect::removeFd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd_type, <span class="hljs-keyword">int</span> fd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_READ)<br>    &#123;<br>        <span class="hljs-built_in">FD_CLR</span>(fd, &amp;mReadFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_WRITE)<br>    &#123;<br>        <span class="hljs-built_in">FD_CLR</span>(fd, &amp;mWriteFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_ERROR)<br>    &#123;<br>        <span class="hljs-built_in">FD_CLR</span>(fd, &amp;mErrorFds);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSelect::isSetFd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd_type, <span class="hljs-keyword">int</span> fd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">bool</span> is_set = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_READ)<br>    &#123;<br>        is_set = <span class="hljs-built_in">FD_ISSET</span>(fd, &amp;mReadSelectFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_WRITE)<br>    &#123;<br>        is_set = <span class="hljs-built_in">FD_ISSET</span>(fd, &amp;mWriteSelectFds);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_ERROR)<br>    &#123;<br>        is_set = <span class="hljs-built_in">FD_ISSET</span>(fd, &amp;mErrorSelectFds);<br>    &#125;<br>    <span class="hljs-keyword">return</span> is_set;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CSelect::select</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd_type)</span></span><br><span class="hljs-function"></span>&#123;<br>    fd_set *read_fds = <span class="hljs-literal">nullptr</span>;<br>    fd_set *write_fds = <span class="hljs-literal">nullptr</span>;<br>    fd_set *error_fds = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_READ)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(&amp;mReadSelectFds, &amp;mReadFds, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(fd_set));<br>        read_fds = &amp;mReadSelectFds;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_WRITE)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(&amp;mWriteSelectFds, &amp;mWriteFds, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(fd_set));<br>        write_fds = &amp;mWriteSelectFds;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fd_type &amp; C_FDS_ERROR)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(&amp;mErrorSelectFds, &amp;mErrorFds, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(fd_set));<br>        error_fds = &amp;mErrorSelectFds;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ::<span class="hljs-built_in">select</span>(mMaxFd + <span class="hljs-number">1</span>, read_fds, write_fds, error_fds, <span class="hljs-literal">nullptr</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程操作对象</title>
    <link href="/2022/11/19/CarlSDK/%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/11/19/CarlSDK/%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="线程操作对象"><a href="#线程操作对象" class="headerlink" title="线程操作对象"></a>线程操作对象</h2><p>有关线程的操作，可以查看Linux系统编程：<a href="/2022/11/18/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B/">线程</a></p><p>今天介绍三个对象：CThread，CMutex，CCond。分别负责创建线程，线程互斥以及线程同步</p><h2 id="CThread"><a href="#CThread" class="headerlink" title="CThread"></a>CThread</h2><p>CThread继承ThreadClass，ThreadClass是一个只包含纯虚函数run()接口基类，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadClass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>CThread有两种使用方式：</p><ol><li>继承CThread，实现run()方法，根据C++的特性，派生类在重定义一个基类的函数时，基类的函数会被隐藏，所以在调用start()方法启动线程时，会执行派生类的run()方法</li><li>继承ThreadClass，实现run()方法，将派生类作为参数创建CThread，调用CThread的start()方法启动线程</li></ol><p>线程数据设置：</p><ul><li>pthread_key_create分配用于标识进程中线程特定数据的键。</li><li>pthread_getspecific根据键获取特定的数据</li></ul><p>这里用来保存线程名称，函数原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_key_create</span><span class="hljs-params">(<span class="hljs-keyword">pthread_key_t</span> *key, <span class="hljs-keyword">void</span> (*destructor)(<span class="hljs-keyword">void</span>*))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">pthread_getspecific</span><span class="hljs-params">(<span class="hljs-keyword">pthread_key_t</span> key)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setspecific</span><span class="hljs-params">(<span class="hljs-keyword">pthread_key_t</span> key, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *value)</span></span>;<br></code></pre></td></tr></table></figure><p>具体实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cthread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">pthread_key_t</span> key;<br><span class="hljs-keyword">bool</span> is_key_create = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">CThread::staticRun</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *ptr)</span></span><br><span class="hljs-function"></span>&#123;<br>    CThread *thread = <span class="hljs-keyword">static_cast</span>&lt;CThread *&gt;(ptr);<br>    thread-&gt;<span class="hljs-built_in">preparationRun</span>();<br>    <span class="hljs-keyword">return</span> thread;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CThread::preparationRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret, pthread_cancel;<br><br>    <span class="hljs-comment">//do NOT invoke any thread-unsafe function in cancelable state</span><br>    <span class="hljs-comment">//OR pthread_cancel to cancel thread may fall into deadlock.</span><br>    ret = <span class="hljs-built_in">pthread_setcancelstate</span>(PTHREAD_CANCEL_DISABLE, &amp;pthread_cancel);<br>    <span class="hljs-built_in">setCurrentThreadName</span>((<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">getThreadName</span>().<span class="hljs-built_in">c_str</span>());<br><br>    mThreadStatus = C_THREAD_STATUS_RUNNING;<br><br>    <span class="hljs-built_in">run</span>();<br><br>    mThreadStatus = C_THREAD_STATUS_EXIT;<br><br>    <span class="hljs-comment">// printf(&quot;pthread_exit(%u)[%s].&quot;, m_thread_id, mThreadName.c_str());</span><br>    <span class="hljs-built_in">pthread_setcancelstate</span>(PTHREAD_CANCEL_ENABLE, &amp;pthread_cancel);<br>    <span class="hljs-built_in">pthread_exit</span>(<span class="hljs-literal">nullptr</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CThread::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mThreadClass != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        mThreadClass-&gt;<span class="hljs-built_in">run</span>();<br>    &#125;<br>&#125;<br><br>CThread::<span class="hljs-built_in">CThread</span>()<br>&#123;<br>    mThreadId = <span class="hljs-number">0</span>;<br>    mThreadStatus = C_THREAD_STATUS_NEW;<br>    <span class="hljs-built_in">pthread_attr_init</span>(&amp;mThreadAttr);<br>&#125;<br><br>CThread::<span class="hljs-built_in">CThread</span>(ThreadClass *thread_class)<br>&#123;<br>    mThreadClass = thread_class;<br>    <span class="hljs-built_in">CThread</span>();<br>&#125;<br><br>CThread::~<span class="hljs-built_in">CThread</span>()<br>&#123;<br>    <span class="hljs-built_in">pthread_attr_destroy</span>(&amp;mThreadAttr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CThread::start</span><span class="hljs-params">(std::string name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">pthread_create</span>(&amp;mThreadId, &amp;mThreadAttr, staticRun, <span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>    &#123;<br>        mThreadId = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    mThreadName = name;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CThread::stop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (mThreadId &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        ret = <span class="hljs-built_in">pthread_cancel</span>(mThreadId);<br>        <span class="hljs-comment">// printf(&quot;pthread_cancel(%u)[%s], ret:%d.&quot;, m_thread_id, mThreadName.c_str(), ret);</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CThread::join</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret, count;<br>    <span class="hljs-keyword">for</span>(count = <span class="hljs-number">0</span>; count &lt; <span class="hljs-number">20</span>; count++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (mThreadId &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            ret = <span class="hljs-built_in">pthread_tryjoin_np</span>(mThreadId, <span class="hljs-literal">nullptr</span>);<br>            <span class="hljs-comment">// printf(&quot;pthread_tryjoin_np(%u)[%s], ret:%d.&quot;, mThreadId, mThreadName.c_str(), ret);</span><br>            <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>            &#123;<br>                ret = <span class="hljs-built_in">pthread_join</span>(mThreadId, <span class="hljs-literal">nullptr</span>);<br>                <span class="hljs-comment">// printf(&quot;pthread_join(%u)[%s], ret:%d.&quot;, mThreadId, mThreadName.c_str(), ret);</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CThread::join</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> millis_time)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mThreadId &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (millis_time == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">join</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// printf(&quot;join thread(%u)[%s], warit:%d.&quot;, m_thread_id, mThreadName.c_str(), millis_time);</span><br>            <span class="hljs-keyword">while</span> (mThreadStatus != C_THREAD_STATUS_EXIT &amp;&amp; millis_time &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>                millis_time--;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CThread::sleep</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> millis_time)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">usleep</span>(millis_time * <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CThread::setThreadName</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name)</span></span><br><span class="hljs-function"></span>&#123;<br>    mThreadName = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CThread::setThreadInfo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (name != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-built_in">setThreadName</span>(name);<br>        <span class="hljs-built_in">setCurrentThreadName</span>(name);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CThread::setCurrentThreadName</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (!is_key_create)<br>    &#123;<br>        ret = <span class="hljs-built_in">pthread_key_create</span>(&amp;key, <span class="hljs-literal">nullptr</span>);<br>        <span class="hljs-comment">// printf(&quot;pthread_key_create()[%s], ret:%d.&quot;, name, ret);</span><br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>        &#123;<br>            is_key_create = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (is_key_create)<br>    &#123;<br>        ret = <span class="hljs-built_in">pthread_setspecific</span> (key, (<span class="hljs-keyword">void</span> *)name);<br>        <span class="hljs-comment">// printf(&quot;pthread_setspecific()[%s], ret:%d.&quot;, name, ret);</span><br>        <span class="hljs-keyword">if</span>(ret != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">// printf(&quot;ret = %d, system crash&quot;, ret);</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">CThread::getCurrentThreadName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *name = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">if</span> (is_key_create)<br>    &#123;<br>        name = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">pthread_getspecific</span>(key);<br>        <span class="hljs-keyword">if</span>(name != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printf(&quot;get current name fail.&quot;);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Unknown&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CThread::getCurrentThreadId</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pthread_self</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注：线程中可能会使用syslog或其他异步信号不安全的函数，所以当收到cancel信号可能会产生死锁，所以屏蔽cancel信号，设置PTHREAD_CANCEL_DISABLE标志位</p></blockquote><h2 id="CMutex"><a href="#CMutex" class="headerlink" title="CMutex"></a>CMutex</h2><p>CMutex是一个简单的互斥锁实现类，提供lock和unloke方法，实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cmutex.h&quot;</span></span><br><br>CMutex::<span class="hljs-built_in">CMutex</span>()<br>&#123;<br>    <span class="hljs-built_in">memset</span>(&amp;mAttr, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(mAttr));<br>    <span class="hljs-built_in">pthread_mutexattr_init</span>(&amp;mAttr);<br>    <span class="hljs-built_in">pthread_mutex_init</span>(&amp;mMutex, <span class="hljs-literal">nullptr</span>);<br>&#125;<br><br><span class="hljs-comment">//Recursive or not</span><br>CMutex::<span class="hljs-built_in">CMutex</span>(<span class="hljs-keyword">bool</span> recursive)<br>&#123;<br>    <span class="hljs-built_in">memset</span>(&amp;mAttr, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(mAttr));<br>    <span class="hljs-built_in">pthread_mutexattr_init</span>(&amp;mAttr);<br>    <span class="hljs-keyword">if</span> (recursive)<br>    &#123;<br>        <span class="hljs-built_in">pthread_mutexattr_settype</span>(&amp;mAttr, PTHREAD_MUTEX_RECURSIVE);<br>        <span class="hljs-built_in">pthread_mutex_init</span>(&amp;mMutex, &amp;mAttr);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">pthread_mutex_init</span>(&amp;mMutex, <span class="hljs-literal">nullptr</span>);<br>    &#125;<br>&#125;<br><br>CMutex::~<span class="hljs-built_in">CMutex</span>()<br>&#123;<br>    <span class="hljs-built_in">pthread_mutex_destroy</span>(&amp;mMutex);<br>    <span class="hljs-built_in">pthread_mutexattr_destroy</span>(&amp;mAttr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CMutex::lock</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;mMutex);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CMutex::unlock</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;mMutex);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">pthread_mutex_t</span> *<span class="hljs-title">CMutex::getMutex</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> &amp;mMutex;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CCond"><a href="#CCond" class="headerlink" title="CCond"></a>CCond</h2><p>CCond是一个简单的线程同步实现类，主要提供了wait和signal方法，实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ccond.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cerrno&gt;</span></span><br><br>CCond::<span class="hljs-built_in">CCond</span>()<br>&#123;<br>    <span class="hljs-built_in">pthread_condattr_init</span>(&amp;mCondAttr);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    CLOCK_MONOTONIC:</span><br><span class="hljs-comment">    The timing starts from the moment the system starts,</span><br><span class="hljs-comment">    independent of the system time being changed by the user</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">pthread_condattr_setclock</span>(&amp;mCondAttr, CLOCK_MONOTONIC);<br>    <span class="hljs-built_in">pthread_cond_init</span>(&amp;mCond, &amp;mCondAttr);<br>&#125;<br><br>CCond::~<span class="hljs-built_in">CCond</span>()<br>&#123;<br>    <span class="hljs-built_in">pthread_condattr_destroy</span>(&amp;mCondAttr);<br>    <span class="hljs-built_in">pthread_cond_destroy</span>(&amp;mCond);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CCond::wait</span><span class="hljs-params">(CMutex *mutex)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mutex != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-built_in">pthread_cond_wait</span>(&amp;mCond, mutex-&gt;<span class="hljs-built_in">getMutex</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CCond::wait</span><span class="hljs-params">(CMutex *mutex, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> millis_time)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> wait_value = ETIMEDOUT;<br>    timespec wait_time;<br><br><span class="hljs-comment">//    clock_gettime(CLOCK_REALTIME, &amp;wait_time);</span><br>    <span class="hljs-built_in">clock_gettime</span>(CLOCK_MONOTONIC, &amp;wait_time);<br><br>    wait_time.tv_sec += millis_time / <span class="hljs-number">1000</span>;<br>    wait_time.tv_nsec += (millis_time % <span class="hljs-number">1000</span>) * <span class="hljs-number">1000000</span>;<br><br>    <span class="hljs-keyword">if</span> (mutex != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        wait_value = <span class="hljs-built_in">pthread_cond_timedwait</span>(&amp;mCond, mutex-&gt;<span class="hljs-built_in">getMutex</span>(), &amp;wait_time);<br>        <span class="hljs-keyword">if</span> (wait_value == ETIMEDOUT)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CCond::signal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">pthread_cond_signal</span>(&amp;mCond);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
      <tag>造轮子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程</title>
    <link href="/2022/11/18/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/11/18/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器，一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p><h2 id="有关线程的函数"><a href="#有关线程的函数" class="headerlink" title="有关线程的函数"></a>有关线程的函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_create</span><span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> *tid, <span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *attr, <span class="hljs-keyword">void</span> *(*func) (<span class="hljs-keyword">void</span> *), <span class="hljs-keyword">void</span> *arg)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_join</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> tid, <span class="hljs-keyword">void</span> ** status)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">pthread_t</span> <span class="hljs-title">pthread_self</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_detach</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> tid)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pthread_exit</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *status)</span></span>;<br></code></pre></td></tr></table></figure><p>pthread_create用于创建一个线程，成功返回0，否则返回Exxx（为正数）。</p><ul><li>pthread_t <em>tid：线程id的类型为pthread_t，通常为无符号整型，当调用pthread_create成功时，通过</em>tid指针返回。</li><li>const pthread_attr_t *attr：指定创建线程的属性，如线程优先级、初始栈大小、是否为守护进程等。可以使用NULL来使用默认值，通常情况下我们都是使用默认值。</li><li>void *(*func) (void *)：函数指针func，指定当新的线程创建之后，将执行的函数。</li><li>void *arg：线程将执行的函数的参数。如果想传递多个参数，请将它们封装在一个结构体中。</li><li>pthread_join用于等待某个线程退出，成功返回0，否则返回Exxx（为正数）。</li></ul><p>pthread_t tid：指定要等待的线程ID</p><ul><li>void ** status：如果不为NULL，那么线程的返回值存储在status指向的空间中（这就是为什么status是二级指针的原因！这种才参数也称为“值-结果”参数）。</li><li>pthread_self用于返回当前线程的ID。</li></ul><p>pthread_detach用于是指定线程变为分离状态，就像进程脱离终端而变为后台进程类似。成功返回0，否则返回Exxx（为正数）。变为分离状态的线程，如果线程退出，它的所有资源将全部释放。而如果不是分离状态，线程必须保留它的线程ID，退出状态直到其它线程对它调用了pthread_join。</p><p>进程也是类似，这也是当我们打开进程管理器的时候，发现有很多僵死进程的原因！也是为什么一定要有僵死这个进程状态。</p><p>pthread_exit用于终止线程，可以指定返回值，以便其他线程通过pthread_join函数获取该线程的返回值。</p><p>void *status：指针线程终止的返回值。</p><h2 id="Pthread互斥"><a href="#Pthread互斥" class="headerlink" title="Pthread互斥"></a>Pthread互斥</h2><p>互斥使用pthread_mutes_t对象表示，下面是定义和初始化一个互斥体mutex:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;<br></code></pre></td></tr></table></figure><h3 id="对互斥加锁"><a href="#对互斥加锁" class="headerlink" title="对互斥加锁"></a>对互斥加锁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_lock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *mutex)</span></span>;<br></code></pre></td></tr></table></figure><p>成功调用会阻塞调用的线程，直到由mutex指向的互斥体变得可用。一旦互斥体变得可用，调用线程就会被唤醒，函数返回0</p><h3 id="对互斥解锁"><a href="#对互斥解锁" class="headerlink" title="对互斥解锁"></a>对互斥解锁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_unlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *mutex)</span></span>;<br></code></pre></td></tr></table></figure><p>成功调用会释放由mutex所指向的互斥体并返回0</p><h2 id="线程间的同步"><a href="#线程间的同步" class="headerlink" title="线程间的同步"></a>线程间的同步</h2><p>使用条件变量可以以原子方式阻塞线程，直到某个特定条件为真为止。相关函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_wait</span><span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> *cptr, <span class="hljs-keyword">pthread_mutex_t</span> *mptr)</span></span>; <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_signal</span><span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> *cptr)</span></span>; <br></code></pre></td></tr></table></figure><p>pthread_cond_wait用于等待某个特定的条件为真，pthread_cond_signal用于通知阻塞的线程某个特定的条件为真了。在调用者两个函数之前需要声明一个pthread_cond_t类型的变量，用于这两个函数的参数。</p><p>为什么条件变量始终与互斥锁一起使用，对条件的测试是在互斥锁（互斥）的保护下进行的呢？因为“某个特性条件”通常是在多个线程之间共享的某个变量。互斥锁允许这个变量可以在不同的线程中设置和检测。</p><p>通常，pthread_cond_wait只是唤醒等待某个条件变量的一个线程。如果需要唤醒所有等待某个条件变量的线程，需要调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_broadcast</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> * cptr)</span></span>;<br></code></pre></td></tr></table></figure><p>默认情况下面，阻塞的线程会一直等待，知道某个条件变量为真。如果想设置最大的阻塞时间可以调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_timedwait</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> * cptr, <span class="hljs-keyword">pthread_mutex_t</span> *mptr, <span class="hljs-keyword">const</span> struct timespec *abstime)</span></span>;<br></code></pre></td></tr></table></figure><p>如果时间到了，条件变量还没有为真，仍然返回，返回值为ETIME。</p><h2 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 是否熟悉POSIX多线程编程技术？如熟悉，编写程序完成如下功能：</span><br><span class="hljs-comment">  1）有一int型全局变量g_Flag初始值为0；</span><br><span class="hljs-comment">  2）在主线称中起动线程1，打印“this is thread1”，并将g_Flag设置为1</span><br><span class="hljs-comment">  3）在主线称中启动线程2，打印“this is thread2”，并将g_Flag设置为2</span><br><span class="hljs-comment">  4）线程序1需要在线程2退出后才能退出</span><br><span class="hljs-comment">  5）主线程在检测到g_Flag从1变为2，或者从2变为1的时候退出</span><br><span class="hljs-comment">   */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> *(*fun)(<span class="hljs-keyword">void</span> *);<br><br><span class="hljs-keyword">int</span> g_Flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">thread1</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">thread2</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;enter main\n&quot;</span>);<br>    <span class="hljs-keyword">pthread_t</span> tid1, tid2;<br>    <span class="hljs-keyword">int</span> rc1 = <span class="hljs-number">0</span>, rc2 = <span class="hljs-number">0</span>;<br>    rc2 = pthread_create(&amp;tid2, <span class="hljs-literal">NULL</span>, thread2, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (rc2 != <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: %d\n&quot;</span>, __func__, strerror(rc2));<br><br>    rc1 = pthread_create(&amp;tid1, <span class="hljs-literal">NULL</span>, thread1, &amp;tid2);<br>    <span class="hljs-keyword">if</span> (rc1 != <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: %d\n&quot;</span>, __func__, strerror(rc1));<br><br>    pthread_cond_wait(&amp;cond, &amp;mutex);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leave main\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">thread1</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;enter thread1\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is thread1, g_Flag: %d, thread id is %u\n&quot;</span>, g_Flag, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)pthread_self());<br>    pthread_mutex_lock(&amp;mutex);<br>    <span class="hljs-keyword">if</span> (g_Flag == <span class="hljs-number">2</span>)<br>        pthread_cond_signal(&amp;cond);<br>    g_Flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is thread1, g_Flag: %d, thread id is %u\n&quot;</span>, g_Flag, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)pthread_self());<br>    pthread_mutex_unlock(&amp;mutex);<br>    pthread_join(*(<span class="hljs-keyword">pthread_t</span> *)arg, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leave thread1\n&quot;</span>);<br>    pthread_exit(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">thread2</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;enter thread2\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is thread2, g_Flag: %d, thread id is %u\n&quot;</span>, g_Flag, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)pthread_self());<br>    pthread_mutex_lock(&amp;mutex);<br>    <span class="hljs-keyword">if</span> (g_Flag == <span class="hljs-number">1</span>)<br>        pthread_cond_signal(&amp;cond);<br>    g_Flag = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is thread2, g_Flag: %d, thread id is %u\n&quot;</span>, g_Flag, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)pthread_self());<br>    pthread_mutex_unlock(&amp;mutex);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leave thread2\n&quot;</span>);<br>    pthread_exit(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSocketListener</title>
    <link href="/2022/11/15/CarlSDK/CSocketListener/"/>
    <url>/2022/11/15/CarlSDK/CSocketListener/</url>
    
    <content type="html"><![CDATA[<h2 id="CSocketListener"><a href="#CSocketListener" class="headerlink" title="CSocketListener"></a>CSocketListener</h2><p>CSocketListener是一个抽象类，作用是创建Server端的socket，完成socket的操作，调用listen()等待client的连接，接收client的数据，并提供了两个发送接口用来发给所有的client或者特定的client</p><p>CSocketListener只负责接受和发送，具体数据的处理由下一个名为CFrameworkListener的派生类继实现</p><h2 id="设置listener-socket"><a href="#设置listener-socket" class="headerlink" title="设置listener socket"></a>设置listener socket</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">CSocketListener::<span class="hljs-built_in">CSocketListener</span>(<span class="hljs-keyword">int</span> port)<br>&#123;<br>    <span class="hljs-comment">//Creat mListenerSocket</span><br>    mListenerSocket.<span class="hljs-built_in">create</span>(CSocket::C_SOCKET_NETWORK);<br>    mListenerSocket.<span class="hljs-built_in">bind</span>(<span class="hljs-literal">nullptr</span>, port);<br>    mListenerSocket.<span class="hljs-built_in">setBlocking</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">//Stop main thread or not</span><br>    <span class="hljs-comment">//default value is false</span><br>    mShouldStop = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h2><ul><li><p>在使用Carlsdk开发server时，需要主动调用此方法，使主线不会退出</p></li><li><p>在创建listener socket时将其设置为了非阻塞模式，这里使用多路复用IO select，来检测是否有新的连接接入</p></li><li><p>每当有新的连接接入，使用接受的socket_fd，创建一个CSocketClient对象，并将此对象放到列表中维护</p></li><li><p>每当创建CSocketClient对象时，向其发送Carlsdk的版本，同时可以让client主动确认已经连接成功</p></li><li><p>onDataAvailable 就是接受数据，如果有数据就处理，由于是非阻塞，所以没有数据就会返回0，所以此函数也承担着检查client和server的连接状态的职责</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Listener main thread function</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CSocketListener::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::list&lt;std::shared_ptr&lt;CSocketClient &gt;&gt;::iterator it;<br>    <span class="hljs-keyword">int</span> socket_fd = <span class="hljs-number">-1</span>;<br><br>    mListenerSocket.<span class="hljs-built_in">listen</span>();<br><br>    mSelectFds.<span class="hljs-built_in">zeroFds</span>(CSelect::C_FDS_READ | CSelect::C_FDS_ERROR);<br>    mSelectFds.<span class="hljs-built_in">addFd</span>(CSelect::C_FDS_READ, mListenerSocket.<span class="hljs-built_in">getSocketFd</span>());<br><br>    <span class="hljs-keyword">while</span>(!mShouldStop)<br>    &#123;<br>        <span class="hljs-comment">/*When the listener fd is readable, it indicates that there is a new connection*/</span><br>        <span class="hljs-keyword">if</span> (mSelectFds.<span class="hljs-built_in">select</span>(CSelect::C_FDS_READ| CSelect::C_FDS_ERROR) &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ms_socket_listener select error, errno = %d.&quot;</span>, errno);<br>            CThread::<span class="hljs-built_in">sleep</span>(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mSelectFds.<span class="hljs-built_in">isSetFd</span>(CSelect::C_FDS_READ, mListenerSocket.<span class="hljs-built_in">getSocketFd</span>()))<br>        &#123;<br>            socket_fd = mListenerSocket.<span class="hljs-built_in">accept</span>();<br><br>            <span class="hljs-keyword">if</span> (socket_fd &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                std::shared_ptr&lt;CSocketClient &gt; client = std::make_shared&lt;CSocketClient &gt;(socket_fd);<br>                <span class="hljs-keyword">char</span> version[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>                <span class="hljs-built_in">sprintf</span>(version, <span class="hljs-string">&quot;CVersion:%d&quot;</span>, mVersion);<br>                client-&gt;<span class="hljs-built_in">sendData</span>(version, <span class="hljs-built_in">strlen</span>(version));<br><br>                mSelectFds.<span class="hljs-built_in">addFd</span>(CSelect::C_FDS_READ| CSelect::C_FDS_ERROR, socket_fd);<br>                mMutex.<span class="hljs-built_in">lock</span>();<br>                mClientLists.<span class="hljs-built_in">push_back</span>(client);<br>                mMutex.<span class="hljs-built_in">unlock</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/*Whether all clients in client lists is readable or not*/</span><br>        mMutex.<span class="hljs-built_in">lock</span>();<br>        <span class="hljs-keyword">for</span> (it = mClientLists.<span class="hljs-built_in">begin</span>(); it != mClientLists.<span class="hljs-built_in">end</span>();)<br>        &#123;<br>            socket_fd = (*it)-&gt;<span class="hljs-built_in">getSocket</span>()-&gt;<span class="hljs-built_in">getSocketFd</span>();<br><br>            <span class="hljs-keyword">if</span>(mSelectFds.<span class="hljs-built_in">isSetFd</span>(CSelect::C_FDS_READ, socket_fd))<br>            &#123;<br>                mMutex.<span class="hljs-built_in">unlock</span>();<br>                <span class="hljs-keyword">bool</span> data_avaiable = <span class="hljs-built_in">onDataAvailable</span>((*it));<br>                mMutex.<span class="hljs-built_in">lock</span>();<br>                <span class="hljs-keyword">if</span> (!data_avaiable)<br>                &#123;<br>                    mSelectFds.<span class="hljs-built_in">removeFd</span>(CSelect::C_FDS_READ | CSelect::C_FDS_ERROR, socket_fd);<br>                    (*it) = <span class="hljs-literal">nullptr</span>;<br>                    it = mClientLists.<span class="hljs-built_in">erase</span>(it);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">//Error handling</span><br>            <span class="hljs-keyword">if</span> (mSelectFds.<span class="hljs-built_in">isSetFd</span>(CSelect::C_FDS_ERROR, socket_fd))<br>            &#123;<br>                mSelectFds.<span class="hljs-built_in">removeFd</span>(CSelect::C_FDS_READ | CSelect::C_FDS_ERROR, socket_fd);<br>                (*it) = <span class="hljs-literal">nullptr</span>;<br>                it = mClientLists.<span class="hljs-built_in">erase</span>(it);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            it++;<br>        &#125;<br>        mMutex.<span class="hljs-built_in">unlock</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在数据处理时可以多线程处理，考虑到数据处理函数可以根据不同场景，不同数据结构修改，所以将onDataAvailable写为纯虚函数，数据处理函数由派生类定义，而不是在此处实现onDataAvailable，将数据处理函数定义为纯虚函数，固定死</p><h2 id="两个发送接口"><a href="#两个发送接口" class="headerlink" title="两个发送接口"></a>两个发送接口</h2><p>不过多赘述，直接上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*Send to all clients*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CSocketListener::sendBroadcast</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::list&lt;std::shared_ptr&lt;CSocketClient &gt;&gt;::iterator it;<br>    mMutex.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">for</span> (it = mClientLists.<span class="hljs-built_in">begin</span>(); it != mClientLists.<span class="hljs-built_in">end</span>(); it++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((*it)-&gt;<span class="hljs-built_in">sendData</span>(data, length) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">/*error*/</span><br>        &#125;<br>    &#125;<br>    mMutex.<span class="hljs-built_in">unlock</span>();<br>&#125;<br><br><span class="hljs-comment">/*Send to the specified client*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CSocketListener::sendClient</span><span class="hljs-params">(std::shared_ptr&lt;CSocketClient &gt; client, <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br>    std::list&lt;std::shared_ptr&lt;CSocketClient &gt;&gt;::iterator it;<br>    mMutex.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">for</span> (it = mClientLists.<span class="hljs-built_in">begin</span>(); it != mClientLists.<span class="hljs-built_in">end</span>(); it++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((*it).<span class="hljs-built_in">get</span>() == client.<span class="hljs-built_in">get</span>())<br>        &#123;<br>            ret = (*it)-&gt;<span class="hljs-built_in">sendData</span>(data, length);<br>            <span class="hljs-keyword">if</span> ( ret &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-comment">/*error*/</span><br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    mMutex.<span class="hljs-built_in">unlock</span>();<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>为了线程安全，保护CSocketClient对象，对CSocketClient加了锁</p>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSocketClient</title>
    <link href="/2022/11/14/CarlSDK/CSocketClient/"/>
    <url>/2022/11/14/CarlSDK/CSocketClient/</url>
    
    <content type="html"><![CDATA[<h2 id="CSocketClient"><a href="#CSocketClient" class="headerlink" title="CSocketClient"></a>CSocketClient</h2><p>前面已经实现了用于建立连接的CSocket对象和用于收发数据包的CPackage对象，CSocketClient是将上面提到的两个对象作为成员的一个对象，用于Client和Server之间通信，server端维护一个CSocketClient列表，每个进程维护一个单独的CSocketClient</p><h2 id="服务端使用的构造函数"><a href="#服务端使用的构造函数" class="headerlink" title="服务端使用的构造函数"></a>服务端使用的构造函数</h2><p>server通过accept()接受client的sock_fds, 就可以通过传入fd创建一个CSocketClient对象，server计划使用select监听所有client，所以设置为非阻塞模式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">CSocketClient::<span class="hljs-built_in">CSocketClient</span>(<span class="hljs-keyword">int</span> sock_fd)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sock_fd:%d\n&quot;</span>, sock_fd);<br>    mSocket = std::make_shared&lt;CSocket&gt;(sock_fd);<br>    mSocket-&gt;<span class="hljs-built_in">setBlocking</span>(<span class="hljs-literal">false</span>);<br>    mPackage = std::make_shared&lt;CPackage&gt;(mSocket);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="客户端使用的构造函数"><a href="#客户端使用的构造函数" class="headerlink" title="客户端使用的构造函数"></a>客户端使用的构造函数</h2><p>client需要创建sockt_fd，所以传入的参数为需要创建的socket类型，以及阻塞模式，这里一般设置为阻塞模式，一直等待server的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">CSocketClient::<span class="hljs-built_in">CSocketClient</span>(<span class="hljs-keyword">int</span> socket_type, <span class="hljs-keyword">bool</span> blocking)<br>&#123;<br>    mSocket = std::make_shared&lt;CSocket&gt;();<br>    mSocket-&gt;<span class="hljs-built_in">create</span>(socket_type);<br>    mSocket-&gt;<span class="hljs-built_in">setBlocking</span>(blocking);<br>    mPackage = std::make_shared&lt;CPackage&gt;(mSocket);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sock_fd:%d\n&quot;</span>, mSocket-&gt;<span class="hljs-built_in">getSocketFd</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取CSocket对象"><a href="#获取CSocket对象" class="headerlink" title="获取CSocket对象"></a>获取CSocket对象</h2><p>客户端需要获取CSocket对象，来进行connect，shutdown操作，直接返回即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::shared_ptr&lt;CSocket&gt; <span class="hljs-title">CSocketClient::getSocket</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> mSocket;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CSocketClient::sendData</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> data_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">nullptr</span> || data_length &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mPackage)<br>    &#123;<br>        ret = mPackage-&gt;<span class="hljs-built_in">sendDataPackage</span>(data, data_length);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sendData:%s, length:%d, ret:%d\n&quot;</span>, data, data_length, ret);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CSocketClient::recvData</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **data, <span class="hljs-keyword">int</span> *data_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">nullptr</span> || data_length == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mPackage)<br>    &#123;<br>        ret = mPackage-&gt;<span class="hljs-built_in">recvDataPackage</span>(data, data_length);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP粘包问题</title>
    <link href="/2022/10/26/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/26/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="TCP特性"><a href="#TCP特性" class="headerlink" title="TCP特性"></a>TCP特性</h2><p>TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。</p><ul><li>面向连接：⼀定是⼀对⼀才能连接，不能⼀个主机同时向多个主机发送消息，即⼀对多是⽆法做到的；</li><li>可靠的：⽆论⽹络中出现了怎样的变化，TCP 都可以保证数据⼀定能够到达接收端，数据在传输过程中不会消失（TCP 通过序列号和包重传确认机制保证数据包的有序和一定被正确发到目的地）；</li><li>字节流：数据传输像流水一样是没有边界的，所以⽆论我们消息有多⼤都可以进⾏传输；<br>消息是有序的，当前⼀个消息没有收到的时候，即使它先收到了后⾯的字节，那么也不能扔给应⽤层去处理，同时对重复的报⽂会⾃动丢弃。</li></ul><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><ul><li>粘包，所谓粘包就是连续给发送端发送两个或者两个以上的数据包，接收端在一次收取中，可能收到的数据包可能是几个包（包括一个）加上某个包的部分，或者干脆就是几个完整的包在一起。</li><li>半包，则是可能收到的数据只是一个包的部分。</li></ul><p>进一步具体讲：</p><ul><li>TCP发送方：TCP本身传输的数据包大小有限制，如果应用发出的消息包过大，TCP会把应用消息包拆分为多个TCP数据包发送出去；如果应用发送数据包太小，TCP为了减少网络请求次数的开销，它会等待多个消息包一起，打成一个TCP数据包一次发送出去。</li><li>TCP接收方：TCP 缓冲区里的数据都是字符流的形式，没有明确的边界，因为数据没边界，所以应用从TCP缓冲区中读取数据时就没办法指定一个或几个消息一起读，而只能选择一次读取多大的数据流，而这个数据流中就可能包含着某个消息包的一部分数据。</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="定长消息"><a href="#定长消息" class="headerlink" title="定长消息"></a>定长消息</h3><p>规定每个数据包的大小，如64k，每次只取64k，如果不够64k就等待满足后取出</p><p>缺点：这种方式只有在确定包等于64k时才推荐使用，如果小于64k，需要在数据末尾填充占位符，浪费带宽；如果大于64k要分包发送，并且额外再写处理逻辑</p><h3 id="特殊标志作为结束符"><a href="#特殊标志作为结束符" class="headerlink" title="特殊标志作为结束符"></a>特殊标志作为结束符</h3><p>在数据包中遇到规定好的特殊的符号值时就认为到一个包的末尾了。</p><p>缺点：如果包中需要包含这个特殊符号值时，只能做转义处理</p><h3 id="包头-包体"><a href="#包头-包体" class="headerlink" title="包头 + 包体"></a>包头 + 包体</h3><p>为数据包添加一个包头，包头记录着数据包的长度</p><p>缺点：会浪费传输包头的带宽</p><p>这种方法是我目前正在使用的方法，取数据时先取出包头，再根据包头取出所需要的数据</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>首先定义一个缓存区，包头+包体不会存在大于此缓存区的情况，每次将接收的数据放入缓存区，再通过包头取出所需要的数据</p><p>定义未使用空间，每次取数据时，记录一个包大小之后未使用的空间，如果剩余空间小于未使用的空间，说明未使用的空间中还有数据，此时出现粘包现象，如下图：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/tcpsticking.png" alt="tcp_sticking"></p><p>处理逻辑如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/sticking.png" alt="tcp_sticking"></p><p>代码实现参考<a href="/2022/10/25/CarlSDK/Cpackage/">Cpackage对象</a>中的接收数据包部分内容</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPackage</title>
    <link href="/2022/10/25/CarlSDK/CPackage/"/>
    <url>/2022/10/25/CarlSDK/CPackage/</url>
    
    <content type="html"><![CDATA[<h1 id="CPackage"><a href="#CPackage" class="headerlink" title="CPackage"></a>CPackage</h1><p>Cpackage是Carlsdk中使用Csocket进行收发数据包的类，对数据包进行了定义，保证数据收发的完整性</p><p>此对象主要应对大数据包的收发，以及可能出现的TCP粘包问题</p><h2 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h2><p>数据包由包头和包体两部分组成，包头4个字节，包体最大8 * 1024个字节，使用如下两个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> C_DATA_PACKAGE_HEADER_SIZE                4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> C_DATA_PACKAGE_MAX_LENGTH              (8 * 1024)</span><br></code></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数主要申请数据包的缓存空间，一些标志位的初始化赋值</p><p>标志位是用来判断缓存空间的使用情况，包括如下几个：</p><ul><li>data_package_buffer:缓存空间头指针</li><li>unconsumed_buffer:还未使用的缓存空间头指针</li><li>read_end:已经读取的缓存空间尾指针</li><li>buffer_end：缓存空间的尾指针</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C">CPackage::CPackage(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">shared_ptr</span>&lt;CSocket&gt; socket)<br>&#123;<br>    mSock = socket;<br>    <span class="hljs-comment">/*Data package buffer is 8 * 1024 + 4*/</span><br>    dataPackageBuffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[C_DATA_PACKAGE_HEADER_SIZE + C_DATA_PACKAGE_MAX_LENGTH];<br>    dataSendBuffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[C_DATA_PACKAGE_HEADER_SIZE + C_DATA_PACKAGE_MAX_LENGTH];<br>    <span class="hljs-comment">/*Unconsumed buffer is all data package buffer*/</span><br>    unconsumedBuffer = dataPackageBuffer;<br>    <span class="hljs-comment">/*End of buffer already used */</span><br>    readEnd = dataPackageBuffer;<br>    <span class="hljs-comment">/*End of buffer*/</span><br>    bufferEnd = dataPackageBuffer + C_DATA_PACKAGE_HEADER_SIZE + C_DATA_PACKAGE_MAX_LENGTH;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发送数据包"><a href="#发送数据包" class="headerlink" title="发送数据包"></a>发送数据包</h2><p>发送数据包由两部分组成，构造数据和发送数据，发送数据要保证数据全部发送完成，实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CPackage::sendBlockData</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> data_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> send_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> data_remaining = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">nullptr</span> || data_length &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">/*init remaining data*/</span><br>    data_remaining = data_length;<br><br>    <span class="hljs-comment">/*Ensure all data is sent*/</span><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        send_length = mSock-&gt;send(data, data_remaining);<br>        <span class="hljs-keyword">if</span> (send_length &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        data_remaining -= send_length;<br>        data += send_length;<br>    &#125; <span class="hljs-keyword">while</span> (data_remaining &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造数据包，包括包头和包体，包体是传进来的参数，所以只需在发送数据前先发送包头，实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CPackage::sendDataPackage</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *data_package, <span class="hljs-keyword">int</span> package_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (data_package == <span class="hljs-literal">nullptr</span> || package_length &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*package header is 4 byte*/</span><br>    <span class="hljs-built_in">memset</span>(dataSendBuffer, <span class="hljs-number">0X00</span>, C_DATA_PACKAGE_HEADER_SIZE + C_DATA_PACKAGE_MAX_LENGTH);<br><br>    dataSendBuffer[<span class="hljs-number">0</span>] = (<span class="hljs-keyword">char</span>)((package_length &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>);<br>    dataSendBuffer[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">char</span>)((package_length &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>);<br>    dataSendBuffer[<span class="hljs-number">2</span>] = (<span class="hljs-keyword">char</span>)((package_length &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>);<br>    dataSendBuffer[<span class="hljs-number">3</span>] = (<span class="hljs-keyword">char</span>)(package_length &amp; <span class="hljs-number">0xFF</span>);<br><br>    <span class="hljs-built_in">memcpy</span>(dataSendBuffer + C_DATA_PACKAGE_HEADER_SIZE,data_package, package_length);<br>    <span class="hljs-comment">/*send package body*/</span><br>    <span class="hljs-keyword">if</span> (sendBlockData(dataSendBuffer, package_length + C_DATA_PACKAGE_HEADER_SIZE) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接收数据包"><a href="#接收数据包" class="headerlink" title="接收数据包"></a>接收数据包</h2><p>首先判断缓存空间无数据可读，并初始化缓存空间，接收数据后，再从缓存空间中取出可用数据，这一系列操作主要是解决TCP粘包问题，实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CPackage::recvDataPackage</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **data_package, <span class="hljs-keyword">int</span> *package_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> recv_length = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (data_package == <span class="hljs-literal">nullptr</span> || package_length == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*At first, there is no data readable in the buffer*/</span><br>    <span class="hljs-keyword">if</span> (getAvailableDataPackage(data_package, package_length) != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*Not enough buffer, New operation failed*/</span><br>    <span class="hljs-keyword">if</span> (unconsumedBuffer == dataPackageBuffer &amp;&amp; readEnd == bufferEnd)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*buffer is not empty*/</span><br>    <span class="hljs-keyword">if</span> (unconsumedBuffer != dataPackageBuffer)<br>    &#123;<br>        <span class="hljs-keyword">int</span> move_size = readEnd - unconsumedBuffer;<br>        <span class="hljs-comment">/*TCP packet sticking*/</span><br>        <span class="hljs-keyword">if</span> (move_size &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            memmove(dataPackageBuffer, unconsumedBuffer, move_size);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">memset</span>(dataPackageBuffer, <span class="hljs-number">0X00</span>, C_DATA_PACKAGE_HEADER_SIZE + C_DATA_PACKAGE_MAX_LENGTH);<br>        &#125;<br><br>        readEnd = dataPackageBuffer + move_size;<br>        unconsumedBuffer = dataPackageBuffer;<br>    &#125;<br><br>    recv_length = mSock-&gt;recv(readEnd, bufferEnd - readEnd);<br><br>    <span class="hljs-keyword">if</span> (recv_length &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (errno == EAGAIN || errno == EWOULDBLOCK)<br>        &#123;<br>            *data_package = <span class="hljs-literal">nullptr</span>;<br>            *package_length = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            *package_length = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (recv_length == <span class="hljs-number">0</span>)<br>    &#123;<br>        *package_length = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    readEnd += recv_length;<br><br>    <span class="hljs-keyword">if</span> (getAvailableDataPackage(data_package, package_length) != <span class="hljs-number">0</span>)<br>    &#123;<br>        *data_package = <span class="hljs-literal">nullptr</span>;<br>        *package_length = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取可用数据首先判断缓存空间是否有可读数据，然后根据包头获取指定长度的数据包</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CPackage::getAvailableDataPackage</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **data_package, <span class="hljs-keyword">int</span> *package_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> data_length = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/*No readable data*/</span><br>    <span class="hljs-keyword">if</span> (readEnd &lt; unconsumedBuffer + C_DATA_PACKAGE_HEADER_SIZE)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*Packet header saves data length information*/</span><br>    data_length = ((unconsumedBuffer[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xff</span>) &lt;&lt; <span class="hljs-number">24</span>)<br>                | ((unconsumedBuffer[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xff</span>) &lt;&lt; <span class="hljs-number">16</span>)<br>                | ((unconsumedBuffer[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xff</span>) &lt;&lt; <span class="hljs-number">8</span>)<br>                | (unconsumedBuffer[<span class="hljs-number">3</span>] &amp; <span class="hljs-number">0xff</span>);<br><br>    <span class="hljs-comment">/*The data packet is too large and the buffer is not enough*/</span><br>    <span class="hljs-keyword">if</span> (readEnd &lt; unconsumedBuffer + C_DATA_PACKAGE_HEADER_SIZE + data_length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    *data_package = unconsumedBuffer + C_DATA_PACKAGE_HEADER_SIZE;<br>    *package_length = data_length;<br>    unconsumedBuffer = unconsumedBuffer + C_DATA_PACKAGE_HEADER_SIZE + data_length;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSocket</title>
    <link href="/2022/10/23/CarlSDK/CSocket/"/>
    <url>/2022/10/23/CarlSDK/CSocket/</url>
    
    <content type="html"><![CDATA[<h2 id="CSocket"><a href="#CSocket" class="headerlink" title="CSocket"></a>CSocket</h2><p>Csocket是Carlsdk中的socket库，使用这个库即可轻松的完成socket网络编程</p><h2 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h2><p>根据需要的套接字类型，创建套接字，此处我打开了端口复用和地址复用，以便服务出现重启后可以立马重新建立连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::create</span><span class="hljs-params">(<span class="hljs-keyword">int</span> socket_type)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> reuse = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">sa_family_t</span> sa_family = AF_INET;<br><br>    <span class="hljs-keyword">if</span> (socket_type == C_SOCKET_LOCAL)<br>    &#123;<br>        sa_family = AF_UNIX;<br>    &#125;<br><br>    <span class="hljs-comment">/*Creak socket*/</span><br>    <span class="hljs-keyword">if</span> ((mSock = socket(sa_family, SOCK_STREAM, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*Enable address reuse and port reuse*/</span><br>    <span class="hljs-keyword">if</span> ((setsockopt(mSock, SOL_SOCKET, SO_REUSEADDR, (<span class="hljs-keyword">char</span> *)&amp;reuse, <span class="hljs-keyword">sizeof</span>(reuse)) == <span class="hljs-number">-1</span> ||<br>         setsockopt(mSock, SOL_SOCKET, SO_REUSEPORT, (<span class="hljs-keyword">char</span> *)&amp;reuse, <span class="hljs-keyword">sizeof</span>(reuse)) == <span class="hljs-number">-1</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        mBlocking = <span class="hljs-literal">true</span>;<br>        mStatus = C_SOCKET_INIT;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绑定-服务端"><a href="#绑定-服务端" class="headerlink" title="绑定(服务端)"></a>绑定(服务端)</h2><p>由于创建的套接字有两种类型，所以绑定也有两种，使用C++的重载，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*socket_type is C_SOCKET_NETWORK*/</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::bind</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *local_ip, <span class="hljs-keyword">int</span> local_port)</span></span><br><span class="hljs-function"></span>&#123;<br>    sockaddr_in local_addr;<br><br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    local_addr.sin_family = AF_INET;<br>    <span class="hljs-keyword">if</span> (local_ip == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        local_addr.sin_addr.s_addr = INADDR_ANY;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">/*IP address translation*/</span><br>        inet_pton(AF_INET, local_ip, &amp;local_addr.sin_addr);<br>    &#125;<br>    local_addr.sin_port = htons(local_port);<br><br>    <span class="hljs-keyword">if</span> (::bind(mSock, (struct sockaddr *)&amp;local_addr, <span class="hljs-keyword">sizeof</span>(local_addr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*socket_type is C_SOCKET_LOCAL*/</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::bind</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *socket_name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">local_addr</span>;</span><br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (socket_name == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;local_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(local_addr));<br>    local_addr.sun_family = AF_UNIX;<br>    <span class="hljs-comment">/*Set the socket file path*/</span><br>    <span class="hljs-built_in">snprintf</span>(local_addr.sun_path, <span class="hljs-keyword">sizeof</span>(local_addr.sun_path), <span class="hljs-string">&quot;%s/%s&quot;</span>, C_SOCKET_DIR, socket_name);<br>    unlink(local_addr.sun_path);<br><br>    <span class="hljs-keyword">if</span> (::bind(mSock, (struct sockaddr *)&amp;local_addr, <span class="hljs-keyword">sizeof</span>(local_addr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="监听-服务端"><a href="#监听-服务端" class="headerlink" title="监听(服务端)"></a>监听(服务端)</h2><p>listen 的作用是初始化连接队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::listen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*The maximum number of connections is 15*/</span><br>    <span class="hljs-keyword">if</span> (::listen(mSock, <span class="hljs-number">15</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        mStatus = C_SOCKET_LISTEN;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置阻塞模式"><a href="#设置阻塞模式" class="headerlink" title="设置阻塞模式"></a>设置阻塞模式</h2><p>设置套接字是否阻塞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*Set blocking mode*/</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::setBlocking</span><span class="hljs-params">(<span class="hljs-keyword">bool</span> is_blocking)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> soc_option;<br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((soc_option = fcntl(mSock, F_GETFL, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (is_blocking)<br>    &#123;<br>        soc_option &amp;= ~O_NONBLOCK;<br>        mBlocking = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        soc_option |= O_NONBLOCK;<br>        mBlocking = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fcntl(mSock, F_SETFL, soc_option) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h2><p>TCP内嵌有心跳包,以服务端为例,当server检测到超过一定时间(/proc/sys/net/ipv4/tcp_keepalive_time 7200 即2小时)没有数据传输,那么会向client端发送一个keepalive packet,此时client端有三种反应:</p><ol><li>client端连接正常,返回一个ACK.server端收到ACK后重置计时器,在2小时后在发送探测.如果2小时内连接上有数据传输,那么在该时间的基础上向后推延2小时发送探测包;</li><li>客户端异常关闭,或网络断开。client无响应,server收不到ACK,在一定时间(/proc/sys/net/ipv4/tcp_keepalive_intvl 75 即75秒)后重发keepalive packet, 并且重发一定次数(/proc/sys/net/ipv4/tcp_keepalive_probes 9 即9次);</li><li>客户端曾经崩溃,但已经重启.server收到的探测响应是一个复位,server端终止连接。</li></ol><p>如果我们不能接受如此之长的等待时间，从TCP-Keepalive-HOWTO上可以知道一共有两种方式可以设置，一种是修改内核关于网络方面的 配置参数，另外一种就是SOL_TCP字段的TCP_KEEPIDLE， TCP_KEEPINTVL， TCP_KEEPCNT三个选项。</p><ul><li>TCP_KEEPIDLE: 开始首次KeepAlive探测前的TCP空闭时间</li><li>TCP_KEEPINTVL:两次KeepAlive探测间的时间间隔</li><li>TCP_KEEPCNT:  判定断开前的KeepAlive探测次数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CSocket::keepAlive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> on_off, <span class="hljs-keyword">int</span> keep_idle, <span class="hljs-keyword">int</span> keep_interval, <span class="hljs-keyword">int</span> keep_count)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">/*SO_KEEPALIVE: Whether to enable heartbeat detection*/</span><br>    <span class="hljs-comment">/*TCP_KEEPIDLE: The tcp_keepidle parameter specifies the interval of inactivity that causes TCP to generate a KEEPALIVE transmission</span><br><span class="hljs-comment">                    for an application that requests them. tcp_keepidle defaults to 14400 (two hours).*/</span><br>    <span class="hljs-comment">/*TCP_KEEPINTVL:The tcp_keepintvl parameter specifies the interval between the nine retries that are attempted if a KEEPALIVE</span><br><span class="hljs-comment">                    transmission is not acknowledged. tcp_keepintvl defaults to 150 (75 seconds).*/</span><br>    <span class="hljs-comment">/*TCP_KEEPCNT:  The tcp_keepcnt option specifies the maximum number of keepalive probes to be sent. The value of TCP_KEEPCNT is an integer</span><br><span class="hljs-comment">                    value between 1 and n, where n is the value of the systemwide tcp_keepcnt parameter.*/</span><br>    <span class="hljs-keyword">if</span> (setsockopt(mSock, SOL_SOCKET, SO_KEEPALIVE, (<span class="hljs-keyword">void</span> *)&amp;on_off, <span class="hljs-keyword">sizeof</span>(on_off)) == <span class="hljs-number">-1</span> ||<br>        setsockopt(mSock, SOL_TCP, TCP_KEEPIDLE, (<span class="hljs-keyword">void</span> *)&amp;keep_idle, <span class="hljs-keyword">sizeof</span>(keep_idle)) == <span class="hljs-number">-1</span> ||<br>        setsockopt(mSock, SOL_TCP, TCP_KEEPINTVL, (<span class="hljs-keyword">void</span> *)&amp;keep_interval, <span class="hljs-keyword">sizeof</span>(keep_interval)) == <span class="hljs-number">-1</span> ||<br>        setsockopt(mSock, SOL_TCP, TCP_KEEPCNT, (<span class="hljs-keyword">void</span> *)&amp;keep_count, <span class="hljs-keyword">sizeof</span>(keep_count)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="等待连接-服务端"><a href="#等待连接-服务端" class="headerlink" title="等待连接(服务端)"></a>等待连接(服务端)</h2><p>创建等待队列之后，等待并接收客户端的连接请求</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CSocket::accept</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    sockaddr_in server_addr;<br>    <span class="hljs-keyword">int</span> addr_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sock_fd = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    addr_length = <span class="hljs-keyword">sizeof</span>(server_addr);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((sock_fd = ::accept(mSock, (struct sockaddr *)&amp;server_addr, (<span class="hljs-keyword">socklen_t</span> *)&amp;addr_length)) == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-comment">/*Interrupted, try again*/</span><br>            <span class="hljs-keyword">if</span> (errno == EINTR)<br>            &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sock_fd;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发起连接-客户端"><a href="#发起连接-客户端" class="headerlink" title="发起连接(客户端)"></a>发起连接(客户端)</h2><p>客户端向服务器发起连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::connect</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *server_ip, <span class="hljs-keyword">int</span> server_port)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>    sockaddr_in server_addr;<br><br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;server_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server_addr));<br>    server_addr.sin_family = AF_INET;<br>    inet_pton(AF_INET, server_ip, &amp;server_addr.sin_addr);<br>    server_addr.sin_port = htons(server_port);<br><br>    ret = ::connect(mSock, (struct sockaddr *)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));<br><br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-comment">/*Connection in progress*/</span><br>        <span class="hljs-keyword">if</span> (errno == EINPROGRESS)<br>        &#123;<br>            <span class="hljs-keyword">bool</span> ready = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">/* wait for 100 * write_ready timeout */</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> count = <span class="hljs-number">100</span>; count &gt; <span class="hljs-number">0</span>; count--)<br>            &#123;<br>                <span class="hljs-comment">/*Whether the socket can be written. If it can be written, the connection is completed*/</span><br>                <span class="hljs-keyword">if</span> (isWriteReady())<br>                &#123;<br>                    ready = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ready == <span class="hljs-literal">false</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    mStatus = C_SOCKET_CONNECTED;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::connect</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *socket_name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">local_addr</span>;</span><br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (socket_name == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;local_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(local_addr));<br>    local_addr.sun_family = AF_UNIX;<br>    <span class="hljs-built_in">snprintf</span>(local_addr.sun_path, <span class="hljs-keyword">sizeof</span>(local_addr.sun_path), <span class="hljs-string">&quot;%s/%s&quot;</span>, C_SOCKET_DIR, socket_name);<br><br>    <span class="hljs-keyword">if</span> (::connect(mSock, (struct sockaddr *)&amp;local_addr, <span class="hljs-keyword">sizeof</span>(local_addr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        mStatus = C_SOCKET_CONNECTED;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发送和接受"><a href="#发送和接受" class="headerlink" title="发送和接受"></a>发送和接受</h2><p>发送和接收主要多了错误判断，如果因为中断而失败就等待1S后重试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CSocket::send</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> data_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> send_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        send_length = ::send(mSock, data, data_length, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;::send[%d], ret:%d, errno:%d\n&quot;</span>, mSock, send_length, errno);<br>        <span class="hljs-comment">/*Determine the cause of the error*/</span><br>        <span class="hljs-keyword">if</span> (send_length == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">switch</span> (errno)<br>            &#123;<br>            <span class="hljs-keyword">case</span> EAGAIN:<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (EAGAIN != EWOULDBLOCK)</span><br>            <span class="hljs-keyword">case</span> EWOULDBLOCK:<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">/*Interrupted, try again*/</span><br>            <span class="hljs-keyword">case</span> EINTR:<br>                usleep(<span class="hljs-number">1</span> * <span class="hljs-number">1000</span>);<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> send_length;<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CSocket::recv</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> data_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> recv_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (mSock == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        recv_length = ::recv(mSock, data, data_length, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;::recv[%d], ret:%d, errno:%d.\n&quot;</span>, mSock, recv_length, errno);<br>        <span class="hljs-comment">/*Determine the cause of the error*/</span><br>        <span class="hljs-keyword">if</span> (recv_length == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">switch</span> (errno)<br>            &#123;<br>            <span class="hljs-keyword">case</span> EAGAIN:<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (EAGAIN != EWOULDBLOCK)</span><br>            <span class="hljs-keyword">case</span> EWOULDBLOCK:<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">/*Interrupted, try again*/</span><br>            <span class="hljs-keyword">case</span> EINTR:<br>                usleep(<span class="hljs-number">1</span> * <span class="hljs-number">1000</span>);<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> recv_length;<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关闭套接字"><a href="#关闭套接字" class="headerlink" title="关闭套接字"></a>关闭套接字</h2><p>Linux下tcp连接断开的时候调用close()函数，有优雅断开和强制断开两种方式。</p><p>那么如何设置断开连接的方式呢？是通过设置socket描述符一个linger结构体属性。</p><p>linger结构体数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linger</span></span><br><span class="hljs-class">&#123;</span><br>　　<span class="hljs-keyword">int</span> l_onoff;<br>　　<span class="hljs-keyword">int</span> l_linger;<br>&#125;;<br></code></pre></td></tr></table></figure><p>三种断开方式：</p><ol><li><p>l_onoff = 0; l_linger忽略</p><p> close()立刻返回，底层会将未发送完的数据发送完成后再释放资源，即优雅退出。</p></li><li><p>l_onoff != 0; l_linger = 0;</p><p> close()立刻返回，但不会发送未发送完成的数据，而是通过一个REST包强制的关闭socket描述符，即强制退出。</p></li><li><p>l_onoff != 0; l_linger &gt; 0;</p><p> close()不会立刻返回，内核会延迟一段时间，这个时间就由l_linger的值来决定。如果超时时间到达之前，发送完未发送的数据(包括FIN包)并得到另一端的确认，close()会返回正确，socket描述符优雅性退出。否则，close()会直接返回错误值，未发送数据丢失，socket描述符被强制性退出。需要注意的时，如果socket描述符被设置为非堵塞型，则close()会直接返回值。</p></li></ol><p>使用方式如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linger</span> <span class="hljs-title">ling</span> =</span> &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>setsockopt(socketfd, SOL_SOCKET, SO_LINGER, (<span class="hljs-keyword">void</span>*)&amp;ling, <span class="hljs-keyword">sizeof</span>(ling));<br></code></pre></td></tr></table></figure><p>具体实现入下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CSocket::close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linger</span> <span class="hljs-title">linger</span>;</span><br>    linger.l_onoff = <span class="hljs-number">1</span>;<br>    linger.l_linger = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (mSock != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-comment">/*If there is unsent data, wait for one second*/</span><br>        setsockopt(mSock, SOL_SOCKET, SO_LINGER, (<span class="hljs-keyword">char</span> *)&amp;linger, <span class="hljs-keyword">sizeof</span>(linger));<br>        ::close(mSock);<br>        mSock = <span class="hljs-number">-1</span>;<br>    &#125;<br>    mStatus = C_SOCKET_CLOSED;<br>&#125;<br><br><span class="hljs-comment">/*SHUT_RDWR close read and write func*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CSocket::shutdown</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mSock != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-comment">/*Shutdown connection*/</span><br>        ::shutdown(mSock, SHUT_RDWR);<br>    &#125;<br>    mStatus = C_SOCKET_CLOSED;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="是否可读或可写"><a href="#是否可读或可写" class="headerlink" title="是否可读或可写"></a>是否可读或可写</h2><p>此接口是用来判断因为超时在重试中的连接是否连接成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::isWriteReady</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">bool</span> write_ready = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">10</span>;<br>    fd_set wfds;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><br><br>    <span class="hljs-keyword">if</span> (mBlocking)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-comment">/*set ms_sock to write fds*/</span><br>        FD_ZERO(&amp;wfds);<br>        FD_SET(mSock, &amp;wfds);<br>        <span class="hljs-comment">/*set timeout timer*/</span><br>        tv.tv_sec = <span class="hljs-number">0</span>;<br>        tv.tv_usec = <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>;<br><br>        ret = select(mSock + <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, &amp;wfds, <span class="hljs-literal">NULL</span>, &amp;tv);<br><br>        <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">/*ready for write*/</span><br>            <span class="hljs-keyword">if</span> (FD_ISSET(mSock, &amp;wfds))<br>            &#123;<br>                write_ready = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">/*select is timeout*/</span><br>            write_ready = <span class="hljs-literal">false</span>;<br>            count--;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">/*Interrupted, try again*/</span><br>            <span class="hljs-keyword">if</span> (errno != EINTR)<br>            &#123;<br>                write_ready = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> write_ready;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CSocket::isReadReady</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">bool</span> read_ready = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">10</span>;<br>    fd_set rfds;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><br><br>    <span class="hljs-keyword">if</span> (mBlocking)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-comment">/*set ms_sock to read fds*/</span><br>        FD_ZERO(&amp;rfds);<br>        FD_SET(mSock, &amp;rfds);<br>        <span class="hljs-comment">/*set timeout timer*/</span><br>        tv.tv_sec = <span class="hljs-number">0</span>;<br>        tv.tv_usec = <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>;<br><br>        ret = select(mSock + <span class="hljs-number">1</span>, &amp;rfds, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tv);<br><br>        <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">/*ready for read*/</span><br>            <span class="hljs-keyword">if</span> (FD_ISSET(mSock, &amp;rfds))<br>            &#123;<br>                read_ready = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">/*select is timeout*/</span><br>            count--;<br>            read_ready = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">/*Interrupted, try again*/</span><br>            <span class="hljs-keyword">if</span> (errno != EINTR)<br>            &#123;<br>                read_ready = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> read_ready;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Carlsdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Carlsdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json-c的使用</title>
    <link href="/2022/10/19/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/json-c%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/10/19/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/json-c%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><blockquote><p>JSON（JavaScript Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于 ECMAScript（European Computer Manufacturers Association, 欧洲计算机协会制定的js规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote><p>所以在有web或者app的项目中，前端很大概率会使用到json来传输数据，后端解析json有很多库可以选择，在C和C++中我使用不同的库，这次介绍在C中使用的json-c</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">json_type</span> &#123;</span><br>  <span class="hljs-comment">/* If you change this, be sure to update json_type_to_name() too */</span><br>  json_type_null,<br>  json_type_boolean,<br>  json_type_double,<br>  json_type_int,<br>  json_type_object,<br>  json_type_array,<br>  json_type_string,<br>&#125; json_type;<br></code></pre></td></tr></table></figure><h2 id="创建json"><a href="#创建json" class="headerlink" title="创建json"></a>创建json</h2><p>创建json的方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">extern</span> struct json_object* <span class="hljs-title">json_object_new_object</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> struct json_object* <span class="hljs-title">json_tokener_parse</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> struct json_object* <span class="hljs-title">json_object_new_boolean</span><span class="hljs-params">(json_bool b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> struct json_object* <span class="hljs-title">json_object_new_double</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> struct json_object* <span class="hljs-title">json_object_new_int</span><span class="hljs-params">(<span class="hljs-keyword">int32_t</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> struct json_object* <span class="hljs-title">json_object_new_int64</span><span class="hljs-params">(<span class="hljs-keyword">int64_t</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> struct json_object* <span class="hljs-title">json_object_new_array</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> struct json_object* <span class="hljs-title">json_object_new_string</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s)</span></span>;<br><br></code></pre></td></tr></table></figure><ul><li>json_object_new_object是创建一个json对象，对象内容为空</li><li>json_tokener_parse是根据json字符串创建json对象，对象根据字符串生成</li><li>其余根据名称可以看出是创建不同的json对象</li></ul><h2 id="添加对象"><a href="#添加对象" class="headerlink" title="添加对象"></a>添加对象</h2><p>添加对象的方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">json_object_object_add</span><span class="hljs-params">(struct json_object* obj, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *key, struct json_object *val)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">json_object_array_add</span><span class="hljs-params">(struct json_object* obj, struct json_object *val)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>obj:要被添加的json_object对象</li><li>key:字段名称</li><li>val:与key关联的json_object对象</li></ul><h2 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h2><p>解析json的方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">extern</span> json_bool <span class="hljs-title">json_object_object_get_ex</span><span class="hljs-params">(struct json_object* obj, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *key, struct json_object **value)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">enum</span> json_type <span class="hljs-title">json_object_get_type</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-title">json_object_to_json_string</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> json_bool <span class="hljs-title">json_object_get_boolean</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">double</span> <span class="hljs-title">json_object_get_double</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int32_t</span> <span class="hljs-title">json_object_get_int</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int64_t</span> <span class="hljs-title">json_object_get_int64</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-title">json_object_get_string</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">json_object_array_length</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> struct array_list* <span class="hljs-title">json_object_get_array</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br><br></code></pre></td></tr></table></figure><ul><li>json_object_object_get_ex是根据key值获取一个json对象，返回值代表是否成功</li><li>json_object_get_type是判断json对象的类型</li><li>json_object_to_json_string是将json对象转换为字符串</li><li>其余根据名称可以看出是根据key获取不同的value</li></ul><h2 id="释放空间"><a href="#释放空间" class="headerlink" title="释放空间"></a>释放空间</h2><p>使用如下函数释放空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">json_object_put</span><span class="hljs-params">(struct json_object *obj)</span></span>;<br></code></pre></td></tr></table></figure><p>使用创建json方法后都需要释放json对象，释放时只需要释放根对象即可</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;json-c/json.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;json-c/json_tokener.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;json-c/json_object.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;json-c/json_inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;json-c/json_util.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">json_get_string_value_by_field</span><span class="hljs-params">(struct json_object *json, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *p_field)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span> *<span class="hljs-title">string_json</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    json_object_object_get_ex(json, p_field, &amp;string_json);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == string_json)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;json_object_object_get error %s&quot;</span>, p_field);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (json_type_string == json_object_get_type(string_json))<br>    &#123;<br>        <span class="hljs-keyword">return</span> json_object_get_string(string_json);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">json_get_int_value_by_field</span><span class="hljs-params">(struct json_object *json, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *p_field)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span> *<span class="hljs-title">int_json</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    json_object_object_get_ex(json, p_field, &amp;int_json);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == int_json)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;json_object_object_get error %s&quot;</span>, p_field);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (json_type_int == json_object_get_type(int_json))<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)json_object_get_int(int_json);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">json_get_string_value</span><span class="hljs-params">(struct json_object *json)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (json_type_string == json_object_get_type(json))<br>    &#123;<br>        <span class="hljs-keyword">return</span> json_object_get_string(json);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function">struct json_object *<span class="hljs-title">json_get_json_object_by_field</span><span class="hljs-params">(struct json_object *json, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *p_field)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span> *<span class="hljs-title">json_obj</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    json_object_object_get_ex(json, p_field, &amp;json_obj);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == json_obj)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;json_object_object_get error %s&quot;</span>, p_field);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> json_obj;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">json_is_array</span><span class="hljs-params">(struct json_object *json)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (json_type_array == json_object_get_type(json))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printFunc</span><span class="hljs-params">(struct json_object *Carl)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (Carl == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span> *<span class="hljs-title">PhoneArray</span> =</span> <span class="hljs-literal">NULL</span>;<br>    name = json_get_string_value_by_field(Carl, <span class="hljs-string">&quot;name&quot;</span>);<br>    age = json_get_int_value_by_field(Carl, <span class="hljs-string">&quot;age&quot;</span>);<br>    PhoneArray = json_get_json_object_by_field(Carl, <span class="hljs-string">&quot;phone&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name:%s\nage:%d\n&quot;</span>, name, age);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;phone num:\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == json_is_array(PhoneArray))<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; json_object_array_length(PhoneArray); i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, json_object_get_string(json_object_array_get_idx(PhoneArray, i)));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span> *<span class="hljs-title">Carl</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span> *<span class="hljs-title">Sam</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span> *<span class="hljs-title">PhoneObject</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">char</span> *root_json = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;Carl\&quot;,\&quot;age\&quot;:24,\&quot;phone\&quot;:[\&quot;12345678901\&quot;,\&quot;12345678902\&quot;]&#125;&quot;</span>;<br><br>    Carl = json_tokener_parse(root_json);<br><br>    printFunc(Carl);<br><br>    Sam = json_object_new_object();<br>    <span class="hljs-keyword">if</span> (Sam == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    json_object_object_add(Sam, <span class="hljs-string">&quot;name&quot;</span>, json_object_new_string(<span class="hljs-string">&quot;Sam&quot;</span>));<br>    json_object_object_add(Sam, <span class="hljs-string">&quot;age&quot;</span>, json_object_new_int(<span class="hljs-number">21</span>));<br><br>    PhoneObject = json_object_new_array();<br>    <span class="hljs-keyword">if</span> (PhoneObject == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      json_object_put(Sam);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    json_object_array_add(PhoneObject, json_object_new_string(<span class="hljs-string">&quot;12345678903&quot;</span>));<br>    json_object_array_add(PhoneObject, json_object_new_string(<span class="hljs-string">&quot;12345678904&quot;</span>));<br>    json_object_object_add(Sam, <span class="hljs-string">&quot;phone&quot;</span>, PhoneObject);<br><br>    printFunc(Sam);<br><br>    json_object_put(Carl);<br>    json_object_put(Sam);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">打印：</span><br><span class="hljs-comment">name:Carl</span><br><span class="hljs-comment">age:24</span><br><span class="hljs-comment">phone num:</span><br><span class="hljs-comment">12345678901</span><br><span class="hljs-comment">12345678902</span><br><span class="hljs-comment">name:Sam</span><br><span class="hljs-comment">age:21</span><br><span class="hljs-comment">phone num:</span><br><span class="hljs-comment">12345678903</span><br><span class="hljs-comment">12345678904</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适配器模式</title>
    <link href="/2022/06/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>最近升级wifi芯片，所以有些接口要重新实现，使用宏定义的方式进行了管理，感觉代码臃肿且不方便阅读，在此学习以下适配器模式，后面重构这部分代码。</p><p>此次学习参考LoveLion的<a href="https://blog.csdn.net/lovelion/article/details/8624325">不兼容结构的协调——适配器模式</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>适配器模式可以将一个类的接口和另一个类的接口匹配起来，而无须修改原来的适配者接口和抽象目标类接口。定义如下：</p><blockquote><p>适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p></blockquote><p>在适配器模式中，我们通过增加一个新的适配器类来解决接口不兼容的问题，使得原本没有任何关系的类可以协同工作。根据适配器类与适配者类的关系不同，适配器模式可分为对象适配器和类适配器两种，在对象适配器模式中，适配器与适配者之间是关联关系；在类适配器模式中，适配器与适配者之间是继承（或实现）关系。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/adapter.jpg" alt="adapter"></p><ul><li>Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</li><li>Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。</li><li>Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这个模式，我认为关键是中间适配层统一接口提供给上层，下层根据不同的平台实现适配层的接口.</p><p>个人见解不知道是否正确，下面放上我wifi重构后的结构:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">wifi/<br>├── ms_wifi_24g.cpp<br>├── ms_wifi_5g.cpp<br>├── ms_wifi_9008.cpp<br>├── ms_wifi_rtl8192.cpp<br>├── ms_wifi_service.cpp<br>└── ms_wifi_target.cpp<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/Adapter.png" alt="Adapter"></p><p>service负责接受请求并返回结果，target抽象了service用到的所有接口，并实现了相同的接口，24g和5g是对应的数据结构，9008和rtl8192继承target根据芯片适配差异化的接口，如果更换芯片就再实现一个实例.</p><p>涉及到工作，就不放源代码了</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hostapd问题解决</title>
    <link href="/2022/06/05/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/hostapd%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/06/05/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/hostapd%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>使用hostapd，配置wifi6模组为软AP模式</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="运行报错"><a href="#运行报错" class="headerlink" title="运行报错"></a>运行报错</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rfkill: Cannot open RFKILL control device<br></code></pre></td></tr></table></figure><p>解决方法：</p><p>内核添加对应的驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Networking support<br>        &lt;*&gt;   RF switch subsystem support  ---&gt;<br>                [*]   Power off on suspend (NEW)<br>                &lt;*&gt;   Generic rfkill regulator driver<br></code></pre></td></tr></table></figure><h3 id="国家码设置不生效"><a href="#国家码设置不生效" class="headerlink" title="国家码设置不生效"></a>国家码设置不生效</h3><p>不管设置什么，国家码都为00</p><p>解决方法：</p><p>由于内核版本在4.15以下，所以需要关闭CRDA，打开use statically compiled regulatory rules database</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Wireless<br>        ....<br>        [*]   use statically compiled regulatory rules database<br>        [ ]   support CRDA<br></code></pre></td></tr></table></figure><h3 id="ax设置不生效"><a href="#ax设置不生效" class="headerlink" title="ax设置不生效"></a>ax设置不生效</h3><p>wifi模式配置ax不生效，原因是编译时配置没有打开</p><p>解决方法：</p><p>在defconfig中打开以下开关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">CONFIG_WNM=y<br>CONFIG_IEEE80211AC=y<br>CONFIG_IEEE80211AX=y<br></code></pre></td></tr></table></figure><p>在运行hostapd之前使用以下命令进行配置：</p><p>./mlanutl uap0 11axcfg 11axcfg_80-2x2.conf</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建造者模式</title>
    <link href="/2022/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>建造者模式是六个创建型模式中的一个，和工厂模式有相同点，也有区别。</p><p>工厂模式关心最终的产品，建造者模式还关心创建的细节，所以建造者模式常用来创建复杂的对象。</p><p>此次学习参考LoveLion的<a href="https://blog.csdn.net/lovelion/article/details/7426323">复杂对象的组装与创建——建造者模式（二）</a>，实例则使用C++重新实现</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>建造者模式是较为复杂的创建型模式，它将客户端与包含多个组成部分（或部件）的复杂对象的创建过程分离，客户端无须知道复杂对象的内部组成部分与装配方式，只需要知道所需建造者的类型即可。它关注如何一步一步创建一个的复杂对象，不同的具体建造者定义了不同的创建过程，且具体建造者相互独立，增加新的建造者非常方便，无须修改已有代码，系统具有较好的扩展性。</p><blockquote><p>建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。</p></blockquote><p>类图如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="建造者模式"></p><p>在建造者模式结构图中包含如下几个角色：</p><ul><li><p>Builder（抽象建造者）：它为创建一个产品Product对象的各个部件指定抽象接口，在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是getResult()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。</p></li><li><p>ConcreteBuilder（具体建造者）：它实现了Builder接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。</p></li><li><p>Product（产品角色）：它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程。</p></li><li><p>Director（指挥者）：指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象（也可以通过配置文件和反射机制），然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者类中。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>直接使用C++实现原文中的游戏角色创建，类图如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/actor.gif" alt="actor"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Actor</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    string m_type; <span class="hljs-comment">//角色类型</span><br><br>    string m_sex; <span class="hljs-comment">//性别</span><br><br>    string m_face; <span class="hljs-comment">//脸型</span><br><br>    string m_costume; <span class="hljs-comment">//服装</span><br><br>    string m_hairstyle; <span class="hljs-comment">//发型</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Actor</span>()<br>    &#123;<br>        m_type = <span class="hljs-string">&quot;&quot;</span>;<br>        m_sex = <span class="hljs-string">&quot;&quot;</span>;<br>        m_face = <span class="hljs-string">&quot;&quot;</span>;<br>        m_costume = <span class="hljs-string">&quot;&quot;</span>;<br>        m_hairstyle = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(string type)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_type = type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(string sex)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setFace</span><span class="hljs-params">(string face)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_face = face;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCostume</span><span class="hljs-params">(string costume)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_costume = costume;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHairstyle</span><span class="hljs-params">(string hairstyle)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_hairstyle = hairstyle;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getType</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_type;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getSex</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_sex;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getFace</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_face;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getCostume</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_costume;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getHairstyle</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_hairstyle;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActorBuilder</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">protected</span>:<br>    Actor actor;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ActorBuilder</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildType</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildSex</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildFace</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildCostume</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildHairstyle</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function">Actor <span class="hljs-title">createActor</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-keyword">return</span> actor;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//英雄角色建造器：具体建造者</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroBuilder</span> :</span> <span class="hljs-keyword">public</span> ActorBuilder<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">HeroBuilder</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildType</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setType</span>(<span class="hljs-string">&quot;英雄&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildSex</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setSex</span>(<span class="hljs-string">&quot;男&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildFace</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setFace</span>(<span class="hljs-string">&quot;英俊&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildCostume</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setCostume</span>(<span class="hljs-string">&quot;盔甲&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildHairstyle</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setHairstyle</span>(<span class="hljs-string">&quot;飘逸&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AngelBuilder</span> :</span> <span class="hljs-keyword">public</span> ActorBuilder<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">AngelBuilder</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildType</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setType</span>(<span class="hljs-string">&quot;天使&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildSex</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setSex</span>(<span class="hljs-string">&quot;女&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildFace</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setFace</span>(<span class="hljs-string">&quot;漂亮&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildCostume</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setCostume</span>(<span class="hljs-string">&quot;白裙&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildHairstyle</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setHairstyle</span>(<span class="hljs-string">&quot;披肩长发&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DevilBuilder</span> :</span> <span class="hljs-keyword">public</span> ActorBuilder<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">DevilBuilder</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildType</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setType</span>(<span class="hljs-string">&quot;恶魔&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildSex</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setSex</span>(<span class="hljs-string">&quot;妖&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildFace</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setFace</span>(<span class="hljs-string">&quot;丑陋&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildCostume</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setCostume</span>(<span class="hljs-string">&quot;黑衣&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildHairstyle</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        actor.<span class="hljs-built_in">setHairstyle</span>(<span class="hljs-string">&quot;光头&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActorController</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ActorController</span>()&#123;&#125;<br><br>    <span class="hljs-function">Actor <span class="hljs-title">construct</span><span class="hljs-params">(ActorBuilder *ab)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Actor actor;<br>        ab-&gt;<span class="hljs-built_in">buildType</span>();<br>        ab-&gt;<span class="hljs-built_in">buildSex</span>();<br>        ab-&gt;<span class="hljs-built_in">buildFace</span>();<br>        ab-&gt;<span class="hljs-built_in">buildCostume</span>();<br>        ab-&gt;<span class="hljs-built_in">buildHairstyle</span>();<br>        actor = ab-&gt;<span class="hljs-built_in">createActor</span>();<br>        <span class="hljs-keyword">return</span> actor;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ActorBuilder *ab = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DevilBuilder</span>();<br>    ActorController ac;<br>    Actor actor;<br>    actor = ac.<span class="hljs-built_in">construct</span>(ab);<br>    cout &lt;&lt; actor.<span class="hljs-built_in">getType</span>() &lt;&lt; <span class="hljs-string">&quot;的外观：&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;性别：&quot;</span> &lt;&lt; actor.<span class="hljs-built_in">getSex</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;面容：&quot;</span> &lt;&lt; actor.<span class="hljs-built_in">getFace</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;服装：&quot;</span> &lt;&lt; actor.<span class="hljs-built_in">getCostume</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;发型：&quot;</span> &lt;&lt; actor.<span class="hljs-built_in">getHairstyle</span>() &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">恶魔的外观：</span><br><span class="hljs-comment">性别：妖</span><br><span class="hljs-comment">面容：丑陋</span><br><span class="hljs-comment">服装：黑衣</span><br><span class="hljs-comment">发型：光头</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型模式</title>
    <link href="/2022/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>原型模式（Prototype Pattern）：是一种对象创建模式，用原型实例指定创建对象的种类，并通过复制这些原型创建新的对象。</p></blockquote><p>此次学习参考LoveLion的<a href="https://blog.csdn.net/lovelion/article/details/7424559">对象的克隆——原型模式（一）</a></p><p>由于他使用java语言，我使用C++,我感觉这个设计模式就是C++使用拷贝构造函数，当然你也可以写一个名为clone的函数。说到拷贝，在实现时要注意思考深拷贝和浅拷贝的问题。</p><p>关于这个问题可以查看我之前踩过的坑<a href="/2021/09/23/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/">深拷贝和浅拷贝</a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我也以周报为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeeklyLog</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    string m_name;<br>    string m_title;<br>    string m_content;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">WeeklyLog</span>()&#123;<br>        m_name = <span class="hljs-string">&quot;&quot;</span>;<br>        m_title = <span class="hljs-string">&quot;&quot;</span>;<br>        m_content = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">WeeklyLog</span>(WeeklyLog &amp;log)<br>    &#123;<br>        m_name = log.m_name;<br>        m_title = log.m_title;<br>        m_content = log.m_content;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string name)</span></span><br><span class="hljs-function">    </span>&#123;<br>       m_name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setTitle</span><span class="hljs-params">(string title)</span></span><br><span class="hljs-function">    </span>&#123;<br>       m_title = title;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(string content)</span></span><br><span class="hljs-function">    </span>&#123;<br>       m_content = content;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_name;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getTitle</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_title;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">getContent</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_content;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    WeeklyLog jack;<br>    jack.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>    jack.<span class="hljs-built_in">setTitle</span>(<span class="hljs-string">&quot;第一周周报&quot;</span>);<br>    jack.<span class="hljs-built_in">setContent</span>(<span class="hljs-string">&quot;今天查看资料，学习！&quot;</span>);<br>    cout&lt;&lt;<span class="hljs-string">&quot;姓名:&quot;</span>&lt;&lt;jack.<span class="hljs-built_in">getName</span>()&lt;&lt;<span class="hljs-string">&quot;\n题目:&quot;</span>&lt;&lt;jack.<span class="hljs-built_in">getTitle</span>()&lt;&lt;<span class="hljs-string">&quot;\n内容:&quot;</span>&lt;&lt;jack.<span class="hljs-built_in">getContent</span>()&lt;&lt;endl;<br>    <span class="hljs-comment">//lihua今天摸鱼想抄jack的周报</span><br>    <span class="hljs-function">WeeklyLog <span class="hljs-title">lihua</span><span class="hljs-params">(jack)</span></span>;<br>    lihua.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;lihua&quot;</span>);<br>    cout&lt;&lt;<span class="hljs-string">&quot;姓名:&quot;</span>&lt;&lt;lihua.<span class="hljs-built_in">getName</span>()&lt;&lt;<span class="hljs-string">&quot;\n题目:&quot;</span>&lt;&lt;lihua.<span class="hljs-built_in">getTitle</span>()&lt;&lt;<span class="hljs-string">&quot;\n内容:&quot;</span>&lt;&lt;lihua.<span class="hljs-built_in">getContent</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>utf8和unicode</title>
    <link href="/2022/04/28/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/utf8%E5%92%8Cunicode/"/>
    <url>/2022/04/28/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/utf8%E5%92%8Cunicode/</url>
    
    <content type="html"><![CDATA[<p>最近又遇到了短信编解码的问题，个别符号显示乱码，所以有了这次学习记录。</p><p>关于短信PDU编码之前有过详细介绍：<a href="/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/sms%E4%BF%A1%E6%81%AF/">sms信息</a></p><p>关于短信内容的三种编码方式也有过介绍：<a href="/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/sms%E4%BF%A1%E6%81%AF%E7%BC%96%E7%A0%81/">sms信息编码</a></p><p>本次主要学习UTF-8和Unicode码及其互相转换</p><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><blockquote><p>ASCII ((American Standard Code for Information Interchange): 美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。</p></blockquote><p>ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，以及在美式英语中使用的特殊控制字符。</p><p>我们常说的ASCII 码也就是基础ASCII码，ASCII码表如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/ascll.png" alt="ASCII码表"></p><p>ASCII码有局限性，基础表只能显示现代英语和数字，拓展表每个西欧语言又有不同的规定，再加上最大只能表示256个字符，对于像中文这样有几万个汉字的语言来说，完全不够用。</p><h2 id="Unicode码"><a href="#Unicode码" class="headerlink" title="Unicode码"></a>Unicode码</h2><blockquote><p>统一码（Unicode），也叫万国码、单一码，是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p></blockquote><p>Unicode 是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字严。具体的符号对应表，可以查询<a href="https://home.unicode.org/">unicode.org</a>，或者专门的汉字对应表。</p><p>Unicode通常占两个字节，有一些特殊的拓展会占三个字节。</p><p>由于Unicode码只是一个码表，当按照码表储存时，计算机不知道怎么去解析，如有三个字节，那么这是三个ASCII 码还是一个SCII 码和一个Unicode码，又或者是一个三字节的Unicode码.</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>随着互联网的普及，在数据传输中需要一种统一的编码方式，这时UTF编码出现了，而UTF-8是使用最广的编码方式。值得注意的是UTF-8只是Unicode码的一种表示方式！</p><p>UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8 的编码规则只有两条：</p><ol><li><p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p></li><li><p>对于n字节的符号（n &gt; 1），第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p></li></ol><p>下表总结了编码规则，字母x表示可用编码的位。</p><table><thead><tr><th align="center">Unicode符号范围</th><th align="center">UTF-8编码方式</th></tr></thead><tbody><tr><td align="center">(十六进制)</td><td align="center">(二进制)</td></tr><tr><td align="center">0000 0000-0000 007F</td><td align="center">0xxxxxxx</td></tr><tr><td align="center">0000 0080-0000 07FF</td><td align="center">110xxxxx 10xxxxxx</td></tr><tr><td align="center">0000 0800-0000 FFFF</td><td align="center">1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td align="center">0001 0000-0010 FFFF</td><td align="center">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。</p><p>根据这张表我们就可以写出转换函数了</p><h2 id="UTF-8转Unicode码"><a href="#UTF-8转Unicode码" class="headerlink" title="UTF-8转Unicode码"></a>UTF-8转Unicode码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">utf8_to_unicode</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> in_len, <span class="hljs-keyword">int</span> *out_len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">nullptr</span> == in || <span class="hljs-literal">nullptr</span> == out)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> * in_hex = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)in;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; in_len; )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (in_hex[index] &lt; <span class="hljs-number">0x80</span>)<br>        &#123;<br>            out[length + <span class="hljs-number">0</span>] = <span class="hljs-number">0x00</span>;<br>            out[length + <span class="hljs-number">1</span>] = in_hex[index];<br>            index ++;<br>            length += <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (in_hex[index] &lt; <span class="hljs-number">0xE0</span>)<br>        &#123;<br>            out[length + <span class="hljs-number">0</span>] = (in_hex[index + <span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x1f</span>) &gt;&gt; <span class="hljs-number">2</span>;<br>            out[length + <span class="hljs-number">1</span>] = ((in_hex[index + <span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x03</span>) &lt;&lt; <span class="hljs-number">6</span>) | (in_hex[index + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3f</span>) ;<br>            length += <span class="hljs-number">2</span>;<br>            index += <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (in_hex[index] &lt; <span class="hljs-number">0xF0</span>)<br>        &#123;<br>            out[length + <span class="hljs-number">0</span>] = ((in_hex[index + <span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">4</span>) | ((in_hex[index + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3f</span>) &gt;&gt; <span class="hljs-number">2</span>);<br>            out[length + <span class="hljs-number">1</span>] = ((in_hex[index + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x03</span>) &lt;&lt; <span class="hljs-number">6</span>) | (in_hex[index + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3f</span>) ;<br>            length += <span class="hljs-number">2</span>;<br>            index += <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">//Supplementary Private Use Area</span><br>        &#123;<br>            out[length + <span class="hljs-number">0</span>] = ((in_hex[index + <span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x08</span>) &lt;&lt; <span class="hljs-number">2</span>) | ((in_hex[index + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3f</span>) &gt;&gt; <span class="hljs-number">4</span>);<br>            out[length + <span class="hljs-number">1</span>] = ((in_hex[index + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3f</span>) &lt;&lt; <span class="hljs-number">4</span>) |((in_hex[index + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3f</span>) &gt;&gt; <span class="hljs-number">2</span>);<br>            out[length + <span class="hljs-number">2</span>] = ((in_hex[index + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3f</span>) &lt;&lt; <span class="hljs-number">6</span>) |(in_hex[index + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x3f</span>);<br>            length += <span class="hljs-number">3</span>;<br>            index += <span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>    &#125;<br>    *out_len = length;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Unicode码转UTF-8"><a href="#Unicode码转UTF-8" class="headerlink" title="Unicode码转UTF-8"></a>Unicode码转UTF-8</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">unicode_to_utf8</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> in_len, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *out_len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">nullptr</span> == in || <span class="hljs-literal">nullptr</span> == out || in_len % <span class="hljs-number">2</span> != <span class="hljs-number">0</span> || <span class="hljs-literal">nullptr</span> == out_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>   *in_hex = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)in;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>    length  = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; in_len; index += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (in_hex[index] == <span class="hljs-number">0x00</span>)<br>        &#123;<br>            out[length++] = in_hex[index + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x7f</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        out[length + <span class="hljs-number">0</span>] = <span class="hljs-number">0xe0</span> | (in_hex[index + <span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">4</span>);<br>        out[length + <span class="hljs-number">1</span>] = <span class="hljs-number">0x80</span> | ((in_hex[index + <span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">2</span>) | (in_hex[index + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">6</span>);<br>        out[length + <span class="hljs-number">2</span>] = <span class="hljs-number">0x80</span> | (in_hex[index + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3f</span>);<br>        length += <span class="hljs-number">3</span>;<br>    &#125;<br>    *out_len = length;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jiffies</title>
    <link href="/2022/04/25/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/jiffies/"/>
    <url>/2022/04/25/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/jiffies/</url>
    
    <content type="html"><![CDATA[<h2 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h2><p>Linux的时钟中断中，涉及两个全局变量，一个是xtime。xtime是从cmos电路中取得的时间，一般是从某一历史时刻开始到现在的时间也就是为了取得我们操作系统上显示的日期。这个就是所谓的“实时时钟”，它的精确度是微秒它是timeval数据结构变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">time_t</span> tv_sec;<br>    <span class="hljs-keyword">susecond_t</span> tv_usec;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一个是jiffies。jiffies是记录着从电脑开机到现在总共的时钟中断次数。在linux内核中jiffies远比xtime重要，那么他取决于系统的频率，LINUX系统时钟频率是一个常数HZ来决定的，HZ是可配置的</p><h2 id="HZ和jiffies"><a href="#HZ和jiffies" class="headerlink" title="HZ和jiffies"></a>HZ和jiffies</h2><p>HZ是每秒钟产生的时钟中断的个数，那么jiffies每秒钟就增加HZ大小的值。系统中的中断个数，也叫tick数，jiffies保存的就是总tick数</p><p>jiffies每增加HZ个tick，时间就过去1s</p><p>jiffies的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _ARMEB_</span><br>jiffies = jiffies_64;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>jiffies = jiffies_64 + <span class="hljs-number">4</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>根据定义可以看出，jiffies和jiffies_64共用同一块内存，相比于jiffies_64,jiffies会在前端空出4个字节大小</p><h2 id="jiffies溢出"><a href="#jiffies溢出" class="headerlink" title="jiffies溢出"></a>jiffies溢出</h2><p>jiffies的类型为unsigned long，所以总会有溢出的时候，当jiffies溢出时就会发生回绕，从0开始重新计数</p><p>当发生回绕时，时间计算容易出现问题，所以内核提供了一些宏来判断时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> time_after(current,timeout) ((long)(timeout) - (long)(current)&lt; 0)</span><br></code></pre></td></tr></table></figure><p>关于为什么强转成long能解决这个问题，可以参考<a href="https://zhuanlan.zhihu.com/p/59195506">time_after方法对jiffies回绕问题的解决</a></p><p>为了能尽早的发现jiffies的溢出是否对系统造成影响，jiffies在初始化时，不是从零开始的，而是初始化为距离溢出还有5分钟的tick数</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整型数据</title>
    <link href="/2022/04/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B4%E5%9E%8B/"/>
    <url>/2022/04/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B4%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>在C/C++中整型用int表示，int是integer的简写，除了int，还有short int，long int等整型数据结构，他们的关系是包含与被包含的关系，如下图：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/int.png" alt="int"></p><p>short int可以简写为short，称为短整型，long int可以简写为log，称为长整型。</p><h2 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h2><p>编译器和操作系统的不同，整型所占的空间也会不同：</p><ol><li>最早的16位操作系统short占2个字节，int占2个字节，long占4个字节</li><li>在32位操作系统中short占2个字节，int占4个字节，long占4个字节</li><li>在64位操作系统中，32位编译器，short占2个字节，int占4个字节，long占4个字节；64位编译器short占2个字节，int占4个字节，long占8个字节</li></ol><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p>sizeof是运算符，不是函数，使用sizeof可以计算对象所占的内存，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(short):%ld\nsizeof(int):%ld\nsizeof(long):%ld\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">short</span>), <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>), <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*结果为：</span><br><span class="hljs-comment"> *sizeof(short):2</span><br><span class="hljs-comment"> *sizeof(int):4</span><br><span class="hljs-comment"> *sizeof(long):8</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>单例应该是我接触的第一个设计模式，当时是需要一个读取和保存配置文件的方法类，由于多处需要用到，经过了解知道了单例模式，进而知道了设计模式</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>单例模式(Singleton Pattern)：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种对象创建型模式。</p></blockquote><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>定义一个单例类：</p><ol><li>私有化它的构造函数，以防止外界创建单例类的对象；</li><li>使用类的私有静态指针变量指向类的唯一实例；</li><li>使用一个公有的静态方法获取该实例。</li></ol><p>最直观的实现方式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>()&#123;cout&lt;&lt; <span class="hljs-string">&quot;creat Singleton&quot;</span> &lt;&lt;endl;&#125;<br>    <span class="hljs-keyword">static</span> Singleton *instance;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Singleton *<span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;;<br>Singleton* Singleton::instance = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>上面这种实现是线程不安全的，容易出现重入的问题，所以需要进行优化</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>单例有两种最常见模式：懒汉模式和饿汉模式</p><p>上面的实现就是典型的懒汉模式，考虑上线程安全，我们加上锁：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//懒汉模式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>()&#123;cout&lt;&lt; <span class="hljs-string">&quot;creat Singleton&quot;</span> &lt;&lt;endl;&#125;<br>    <span class="hljs-keyword">static</span> Singleton *instance;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">pthread_mutex_t</span> mutex;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Singleton *<span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;mutex);<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>            &#125;<br>            <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;mutex);<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">pthread_mutex_t</span> Singleton::mutex;<br>Singleton* Singleton::instance = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure><p>饿汉模式就是在未进入main函数时就先创建好单例，如果没有使用会造成内存的浪费，我之前喜欢使用这种方式，因为简单：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//饿汉模式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>()&#123;cout&lt;&lt; <span class="hljs-string">&quot;creat Singleton&quot;</span> &lt;&lt;endl;&#125;<br>    <span class="hljs-keyword">static</span> Singleton *instance;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Singleton *<span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;;<br>Singleton* Singleton::instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br></code></pre></td></tr></table></figure><p>最近看到知乎上有个更优雅的方式实现<a href="https://zhuanlan.zhihu.com/p/37469260">单例</a>，不过需要在C++0x之后的版本使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>()&#123;cout&lt;&lt; <span class="hljs-string">&quot;creat Singleton&quot;</span> &lt;&lt;endl;&#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Singleton&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">static</span> Singleton instance;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="/2022/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>此次学习参考LoveLion的<a href="https://blog.csdn.net/lovelion/article/details/9319423">工厂三兄弟之抽象工厂模式（三）</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>抽象工厂模式为创建一组对象提供了一种解决方案。与工厂方法模式相比，抽象工厂模式中的具体工厂不只是创建一种产品，它负责创建一族产品。抽象工厂模式定义如下：</p><blockquote><p>抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，它是一种对象创建型模式。</p></blockquote><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.jpg" alt="抽象工厂模式图"></p><p>在抽象工厂模式结构图中包含如下几个角色：</p><ul><li>AbstractFactory（抽象工厂）：它声明了一组用于创建一族产品的方法，每一个方法对应一种产品。</li><li>ConcreteFactory（具体工厂）：它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。</li><li>AbstractProduct（抽象产品）：它为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。</li><li>ConcreteProduct（具体产品）：它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>我们修改工厂方法模式中的例子，添加car与plane：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank56</span> :</span> <span class="hljs-keyword">public</span> Tank<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tank56</span>() : <span class="hljs-built_in">Tank</span>(), <span class="hljs-built_in">mstr_type</span>(<span class="hljs-string">&quot;Tank56&quot;</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; mstr_type.<span class="hljs-built_in">data</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string mstr_type;<br>&#125;;<br><br><span class="hljs-comment">//具体的产品类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank96</span> :</span> <span class="hljs-keyword">public</span> Tank<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tank96</span>() : <span class="hljs-built_in">Tank</span>(), <span class="hljs-built_in">mstr_type</span>(<span class="hljs-string">&quot;Tank96&quot;</span>)<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; mstr_type.<span class="hljs-built_in">data</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string mstr_type;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car56</span> :</span> <span class="hljs-keyword">public</span> Car<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Car56</span>() : <span class="hljs-built_in">Car</span>(), <span class="hljs-built_in">mstr_type</span>(<span class="hljs-string">&quot;Car56&quot;</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; mstr_type.<span class="hljs-built_in">data</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string mstr_type;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car96</span> :</span> <span class="hljs-keyword">public</span> Car<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Car96</span>() : <span class="hljs-built_in">Car</span>(), <span class="hljs-built_in">mstr_type</span>(<span class="hljs-string">&quot;Car96&quot;</span>)<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; mstr_type.<span class="hljs-built_in">data</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string mstr_type;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plane</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plane56</span> :</span> <span class="hljs-keyword">public</span> Plane<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Plane56</span>() : <span class="hljs-built_in">Plane</span>(), <span class="hljs-built_in">mstr_type</span>(<span class="hljs-string">&quot;Plane56&quot;</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; mstr_type.<span class="hljs-built_in">data</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string mstr_type;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plane96</span> :</span> <span class="hljs-keyword">public</span> Plane<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Plane96</span>() : <span class="hljs-built_in">Plane</span>(), <span class="hljs-built_in">mstr_type</span>(<span class="hljs-string">&quot;Plane96&quot;</span>)<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; mstr_type.<span class="hljs-built_in">data</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string mstr_type;<br>&#125;;<br><br><span class="hljs-comment">//工厂类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Tank *<span class="hljs-title">createTank</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Car *<span class="hljs-title">createCar</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Plane *<span class="hljs-title">createPlane</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory56</span>:</span><span class="hljs-keyword">public</span> Factory<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Tank *<span class="hljs-title">createTank</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Tank56</span>();<br>    &#125;<br><br>    <span class="hljs-function">Car *<span class="hljs-title">createCar</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Car56</span>();<br>    &#125;<br><br>    <span class="hljs-function">Plane *<span class="hljs-title">createPlane</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Plane56</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory96</span>:</span><span class="hljs-keyword">public</span> Factory<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Tank *<span class="hljs-title">createTank</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Tank96</span>();<br>    &#125;<br>    <span class="hljs-function">Car *<span class="hljs-title">createCar</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Car96</span>();<br>    &#125;<br><br>    <span class="hljs-function">Plane *<span class="hljs-title">createPlane</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Plane96</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Factory *factory56 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Factory56</span>();<br>    Factory *factory96 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Factory96</span>();<br>    Tank *tank56 = factory56-&gt;<span class="hljs-built_in">createTank</span>();<br>    tank56-&gt;<span class="hljs-built_in">type</span>();<br>    Car *car56 = factory56-&gt;<span class="hljs-built_in">createCar</span>();<br>    car56-&gt;<span class="hljs-built_in">type</span>();<br>    Plane *plane56 = factory56-&gt;<span class="hljs-built_in">createPlane</span>();<br>    plane56-&gt;<span class="hljs-built_in">type</span>();<br>    Tank *tank96 = factory96-&gt;<span class="hljs-built_in">createTank</span>();<br>    tank96-&gt;<span class="hljs-built_in">type</span>();<br>    Car *car96 = factory96-&gt;<span class="hljs-built_in">createCar</span>();<br>    car96-&gt;<span class="hljs-built_in">type</span>();<br>    Plane *plane96 = factory96-&gt;<span class="hljs-built_in">createPlane</span>();<br>    plane96-&gt;<span class="hljs-built_in">type</span>();<br><br>    <span class="hljs-keyword">delete</span> tank96;<br>    tank96 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> car96;<br>    car96 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> plane96;<br>    plane96 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> tank56;<br>    tank56 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> car56;<br>    car56 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> plane56;<br>    plane56 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> factory56;<br>    factory56 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> factory96;<br>    factory96 = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此实例中有两个产品族，每个族下面有三个产品，所以有两个工厂负责创建各族的产品</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。</li><li>增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是很重要的，用户无须关心对象的创建过程，将对象的创建和使用解耦。</li><li>系统中有多于一个的产品族，而每次只使用其中某一产品族。可以通过配置文件等方式来使得用户可以动态改变产品族，也可以很方便地增加新的产品族。</li><li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。同一个产品族中的产品可以是没有任何关系的对象，但是它们都具有一些共同的约束，如同一操作系统下的按钮和文本框，按钮与文本框之间没有直接关系，但它们都是属于某一操作系统的，此时具有一个共同的约束条件：操作系统的类型。</li><li>产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。</li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂方法模式</title>
    <link href="/2022/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>此次学习参考LoveLion的<a href="https://blog.csdn.net/lovelion/article/details/9306745">工厂三兄弟之工厂方法模式（二）</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在简单工厂模式中只提供一个工厂类，该工厂类处于对产品类进行实例化的中心位置，它需要知道每一个产品对象的创建细节，并决定何时实例化哪一个产品类。简单工厂模式最大的缺点是当有新产品要加入到系统中时，必须修改工厂类，需要在其中加入必要的业务逻辑，这违背了“开闭原则”。此外，在简单工厂模式中，所有的产品都由同一个工厂创建，工厂类职责较重，业务逻辑较为复杂，具体产品与工厂类之间的耦合度高，严重影响了系统的灵活性和扩展性，而工厂方法模式则可以很好地解决这一问题。</p><p>在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的产品对象，而是针对不同的产品提供不同的工厂</p><blockquote><p>工厂方法模式(Factory Method Pattern)：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。工厂方法模式又简称为工厂模式(Factory Pattern)，又可称作虚拟构造器模式(Virtual Constructor Pattern)或多态工厂模式(Polymorphic Factory Pattern)。工厂方法模式是一种类创建型模式。</p></blockquote><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>在工厂方法模式中包含如下几个角色：</p><ul><li><p>Product（抽象产品）：它是定义产品的接口，是工厂方法模式所创建对象的超类型，也就是产品对象的公共父类。</p></li><li><p>ConcreteProduct（具体产品）：它实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，具体工厂和具体产品之间一一对应。</p></li><li><p>Factory（抽象工厂）：在抽象工厂类中，声明了工厂方法(Factory Method)，用于返回一个产品。抽象工厂是工厂方法模式的核心，所有创建对象的工厂类都必须实现该接口。</p></li><li><p>ConcreteFactory（具体工厂）：它是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户端调用，返回一个具体产品类的实例。</p></li></ul><p>改进简单工厂模式中Tank的结构：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt="uml"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>    Tank_Type_56,<br>    Tank_Type_96,<br>    Tank_Type_Num<br>&#125; Tank_Type;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank56</span> :</span> <span class="hljs-keyword">public</span> Tank<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tank56</span>() : <span class="hljs-built_in">Tank</span>(), <span class="hljs-built_in">mstr_type</span>(<span class="hljs-string">&quot;Tank56&quot;</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; mstr_type.<span class="hljs-built_in">data</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string mstr_type;<br>&#125;;<br><br><span class="hljs-comment">//具体的产品类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank96</span> :</span> <span class="hljs-keyword">public</span> Tank<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tank96</span>() : <span class="hljs-built_in">Tank</span>(), <span class="hljs-built_in">mstr_type</span>(<span class="hljs-string">&quot;Tank96&quot;</span>)<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> string &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; mstr_type.<span class="hljs-built_in">data</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string mstr_type;<br>&#125;;<br><br><span class="hljs-comment">//工厂类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TankFactory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Tank *<span class="hljs-title">createTank</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TankFactory56</span>:</span><span class="hljs-keyword">public</span> TankFactory<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Tank *<span class="hljs-title">createTank</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Tank56</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TankFactory96</span>:</span><span class="hljs-keyword">public</span> TankFactory<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Tank *<span class="hljs-title">createTank</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Tank96</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    TankFactory *factory56 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TankFactory56</span>();<br>    TankFactory *factory96 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TankFactory96</span>();<br>    Tank *tank56 = factory56-&gt;<span class="hljs-built_in">createTank</span>();<br>    tank56-&gt;<span class="hljs-built_in">type</span>();<br>    Tank *tank96 = factory96-&gt;<span class="hljs-built_in">createTank</span>();<br>    tank96-&gt;<span class="hljs-built_in">type</span>();<br><br>    <span class="hljs-keyword">delete</span> tank96;<br>    tank96 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> tank56;<br>    tank56 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> factory56;<br>    factory56 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> factory96;<br>    factory96 = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够让工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，就正是因为所有的具体工厂类都具有同一抽象父类。</li><li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了，这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，实现难度。</li></ol><h2 id="简单工厂模式的适用环境"><a href="#简单工厂模式的适用环境" class="headerlink" title="简单工厂模式的适用环境"></a>简单工厂模式的适用环境</h2><ol><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单工厂模式</title>
    <link href="/2022/04/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><p>定义：定义一个工厂类，他可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类</p></li><li><p>在简单工厂模式中用于被创建实例的方法通常为静态(static)方法,因此简单工厂模式又被成为静态工厂方法(Static Factory Method)</p></li><li><p>需要什么，只需要传入一个正确的参数，就可以获取所需要的对象，而无需知道其实现过程</p></li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/factory.73jpd9kkbv00.png" alt="uml"></p><p>其中工厂类为:TankFactory</p><p>产品类为:Tank</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>    Tank_Type_56,<br>    Tank_Type_96,<br>    Tank_Type_Num<br>&#125; Tank_Type;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank56</span> :</span> <span class="hljs-keyword">public</span> Tank<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Tank56() : Tank(), mstr_type(<span class="hljs-string">&quot;Tank56&quot;</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; mstr_type.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">string</span> mstr_type;<br>&#125;;<br><br><span class="hljs-comment">//具体的产品类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank96</span> :</span> <span class="hljs-keyword">public</span> Tank<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Tank96() : Tank(), mstr_type(<span class="hljs-string">&quot;Tank96&quot;</span>)<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;<span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; mstr_type.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> mstr_type;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">string</span> mstr_type;<br>&#125;;<br><br><span class="hljs-comment">//工厂类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TankFactory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//根据产品信息创建具体的产品类实例，返回一个抽象产品类</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Tank *<span class="hljs-title">createTank</span><span class="hljs-params">(Tank_Type type)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">switch</span> (type)<br>        &#123;<br>        <span class="hljs-keyword">case</span> Tank_Type_56:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tank56();<br>        <span class="hljs-keyword">case</span> Tank_Type_96:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tank96();<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    TankFactory *factory = <span class="hljs-keyword">new</span> TankFactory();<br>    Tank *tank56 = factory-&gt;createTank(Tank_Type_56);<br>    tank56-&gt;type();<br>    Tank *tank96 = factory-&gt;createTank(Tank_Type_96);<br>    tank96-&gt;type();<br><br>    <span class="hljs-keyword">delete</span> tank96;<br>    tank96 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> tank56;<br>    tank56 = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">delete</span> factory;<br>    factory = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>工厂类包含必要的逻辑判断，可以决定在什么时候创建哪一个产品的实例。客户端可以免除直接创建产品对象的职责</li><li>客户端无需知道所创建具体产品的类名，只需知道参数即可</li><li>也可以引入配置文件，在不修改客户端代码的情况下更换和添加新的具体产品类</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>工厂类集中了所有产品的创建逻辑，职责过重，一旦异常，整个系统将受影响</li><li>使用简单工厂模式会增加系统中类的个数(引入新的工厂类)，增加系统的复杂度和理解难度</li><li>系统扩展困难，一旦增加新产品不得不修改工厂逻辑，在产品类型较多时，可能造成逻辑过于复杂</li><li>简单工厂模式使用了static工厂方法，造成工厂角色无法形成基于继承的等级结构。</li></ol><h2 id="简单工厂模式的适用环境"><a href="#简单工厂模式的适用环境" class="headerlink" title="简单工厂模式的适用环境"></a>简单工厂模式的适用环境</h2><ol><li>工厂类负责创建的对象比较少，因为不会造成工厂方法中的业务逻辑过于复杂</li><li>客户端只知道传入工厂类的参数，对如何创建对象不关心</li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>状态模式</title>
    <link href="/2022/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>新项目要有VOIP或者VOLTE的功能，即支持数据语音通话，这个功能之前的项目有做过。为了加速新项目的开发速度，将移植之前的代码，进行二次开发。由于我未参加这个功能的开发，所以需要了解代码逻辑和功能实现。</p><p>话机的状态很多，状态切换也比较复杂，所以功能实现上采用设计模式中的状态模式，为了更好的理解之前的代码，今天学习一下状态模式，并做一个记录。</p><p>此次学习参考LoveLion的<a href="https://blog.csdn.net/lovelion/article/details/8523062">处理对象的多种状态及其相互转换——状态模式（二）</a>，实例则使用C++重新实现</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>状态模式用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。当系统中某个对象存在多个状态，这些状态之间可以进行转换，而且对象在不同状态下行为不相同时可以使用状态模式。状态模式将一个对象的状态从该对象中分离出来，封装到专门的状态类中，使得对象状态可以灵活变化，对于客户端而言，无须关心对象状态的转换以及对象所处的当前状态，无论对于何种状态的对象，客户端都可以一致处理。</p><p>状态模式定义如下：</p><blockquote><p>状态模式(State Pattern)：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式</p></blockquote><p>在状态模式中引入了抽象状态类和具体状态类，它们是状态模式的核心，其结构如下图所示：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9B%BE.jpg" alt="状态模式"></p><p>在状态模式结构图中包含如下几个角色：</p><ul><li><p>Context（环境类）：环境类又称为上下文类，它是拥有多种状态的对象。由于环境类的状态存在多样性且在不同状态下对象的行为有所不同，因此将状态独立出去形成单独的状态类。在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象。</p></li><li><p>State（抽象状态类）：它用于定义一个接口以封装与环境类的一个特定状态相关的行为，在抽象状态类中声明了各种不同状态对应的方法，而在其子类中实现类这些方法，由于不同状态下对象的行为可能不同，因此在不同子类中方法的实现可能存在不同，相同的方法可以写在抽象状态类中。</p></li><li><p>ConcreteState（具体状态类）：它是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>此实例参考<a href="https://blog.csdn.net/lovelion/article/details/8523083">处理对象的多种状态及其相互转换——状态模式（三）</a>,是一个银行账户状态的转换问题，原始类图如下（犯懒了，没有根据新代码重新画类图）：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E8%B4%A6%E6%88%B7%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9B%BE.jpg" alt="账户状态"></p><p>代码很长，如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//state.h</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> STATE_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountState</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Account *m_acc;<br>    <span class="hljs-built_in">AccountState</span>(Account *acc);<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AccountState</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stateCheck</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NormalState</span> :</span> <span class="hljs-keyword">public</span> AccountState<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">NormalState</span>(Account *acc);<br>    ~<span class="hljs-built_in">NormalState</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stateCheck</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverDraftState</span> :</span> <span class="hljs-keyword">public</span> AccountState<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">OverDraftState</span>(Account *acc);<br>    ~<span class="hljs-built_in">OverDraftState</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stateCheck</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedState</span> :</span> <span class="hljs-keyword">public</span> AccountState<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">RestrictedState</span>(Account *acc);<br>    ~<span class="hljs-built_in">RestrictedState</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stateCheck</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    string m_owner;<br>    string now_state;<br>    <span class="hljs-keyword">double</span> m_balance = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NormalState</span>;</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedState</span>;</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverDraftState</span>;</span><br><br>    AccountState *m_state;<br>    NormalState m_normal;<br>    RestrictedState m_restricted;<br>    OverDraftState m_overdraft;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> NORMAL_STATE = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> RESTRICTED_STATE = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> OVERDRAFT_STATE = <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Account</span>();<br>    <span class="hljs-built_in">Account</span>(string owner, <span class="hljs-keyword">double</span> init);<br><br>    ~<span class="hljs-built_in">Account</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> balance)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span></span>;<br><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//state.cpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;state.h&quot;</span></span><br>AccountState::<span class="hljs-built_in">AccountState</span>(Account *acc)<br>&#123;<br>    m_acc = acc;<br>&#125;<br><br>NormalState::<span class="hljs-built_in">NormalState</span>(Account *acc):<span class="hljs-built_in">AccountState</span>(acc)<br>&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NormalState::deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_acc-&gt;<span class="hljs-built_in">setBalance</span>(m_acc-&gt;<span class="hljs-built_in">getBalance</span>() + amount);<br>    <span class="hljs-built_in">stateCheck</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NormalState::withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_acc-&gt;<span class="hljs-built_in">setBalance</span>(m_acc-&gt;<span class="hljs-built_in">getBalance</span>() - amount);<br>    <span class="hljs-built_in">stateCheck</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NormalState::computeInterest</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;正常状态，无需支付利息&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NormalState::stateCheck</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m_acc-&gt;<span class="hljs-built_in">getBalance</span>() &gt; <span class="hljs-number">-2000</span> &amp;&amp; m_acc-&gt;<span class="hljs-built_in">getBalance</span>() &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        m_acc-&gt;<span class="hljs-built_in">setState</span>(m_acc-&gt;OVERDRAFT_STATE);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m_acc-&gt;<span class="hljs-built_in">getBalance</span>() == <span class="hljs-number">-2000</span>)<br>    &#123;<br>        m_acc-&gt;<span class="hljs-built_in">setState</span>(m_acc-&gt;RESTRICTED_STATE);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m_acc-&gt;<span class="hljs-built_in">getBalance</span>() &lt; <span class="hljs-number">-2000</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;操作受限！&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br>OverDraftState::<span class="hljs-built_in">OverDraftState</span>(Account *acc):<span class="hljs-built_in">AccountState</span>(acc)<br>&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OverDraftState::deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_acc-&gt;<span class="hljs-built_in">setBalance</span>(m_acc-&gt;<span class="hljs-built_in">getBalance</span>() + amount);<br>    <span class="hljs-built_in">stateCheck</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OverDraftState::withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_acc-&gt;<span class="hljs-built_in">setBalance</span>(m_acc-&gt;<span class="hljs-built_in">getBalance</span>() - amount);<br>    <span class="hljs-built_in">stateCheck</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OverDraftState::computeInterest</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;计算利息&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OverDraftState::stateCheck</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m_acc-&gt;<span class="hljs-built_in">getBalance</span>() &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        m_acc-&gt;<span class="hljs-built_in">setState</span>(m_acc-&gt;NORMAL_STATE);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m_acc-&gt;<span class="hljs-built_in">getBalance</span>() == <span class="hljs-number">-2000</span>)<br>    &#123;<br>        m_acc-&gt;<span class="hljs-built_in">setState</span>(m_acc-&gt;RESTRICTED_STATE);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m_acc-&gt;<span class="hljs-built_in">getBalance</span>() &lt; <span class="hljs-number">-2000</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;操作受限！&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br>RestrictedState::<span class="hljs-built_in">RestrictedState</span>(Account *acc):<span class="hljs-built_in">AccountState</span>(acc)<br>&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RestrictedState::deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_acc-&gt;<span class="hljs-built_in">setBalance</span>(m_acc-&gt;<span class="hljs-built_in">getBalance</span>() + amount);<br>    <span class="hljs-built_in">stateCheck</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RestrictedState::withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;操作受限，取款失败&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RestrictedState::computeInterest</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;计算利息&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RestrictedState::stateCheck</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m_acc-&gt;<span class="hljs-built_in">getBalance</span>() &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        m_acc-&gt;<span class="hljs-built_in">setState</span>(m_acc-&gt;NORMAL_STATE);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m_acc-&gt;<span class="hljs-built_in">getBalance</span>() &gt; <span class="hljs-number">-2000</span>)<br>    &#123;<br>        m_acc-&gt;<span class="hljs-built_in">setState</span>(m_acc-&gt;OVERDRAFT_STATE);<br>    &#125;<br>&#125;<br><br>Account::<span class="hljs-built_in">Account</span>(string owner, <span class="hljs-keyword">double</span> init) : <span class="hljs-built_in">m_normal</span>(<span class="hljs-keyword">this</span>), <span class="hljs-built_in">m_restricted</span>(<span class="hljs-keyword">this</span>), <span class="hljs-built_in">m_overdraft</span>(<span class="hljs-keyword">this</span>), <span class="hljs-built_in">m_state</span>(<span class="hljs-literal">nullptr</span>)<br>&#123;<br>    m_owner = owner;<br>    m_balance = init;<br>    <span class="hljs-built_in">setState</span>(NORMAL_STATE);<br>    cout &lt;&lt; m_owner &lt;&lt; <span class="hljs-string">&quot;开户，初始金额：&quot;</span> &lt;&lt; m_balance &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;----------------------------&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>Account::~<span class="hljs-built_in">Account</span>()<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Account::getBalance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> m_balance;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Account::setBalance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> balance)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_balance = balance;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Account::setState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (index)<br>    &#123;<br>    <span class="hljs-keyword">case</span> NORMAL_STATE:<br>        now_state = <span class="hljs-string">&quot;NORMAL_STATE&quot;</span>;<br>        m_state = &amp;m_normal;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> RESTRICTED_STATE:<br>        now_state = <span class="hljs-string">&quot;RESTRICTED_STATE&quot;</span>;<br>        m_state = &amp;m_restricted;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> OVERDRAFT_STATE:<br>        now_state = <span class="hljs-string">&quot;OVERDRAFT_STATE&quot;</span>;<br>        m_state = &amp;m_overdraft;<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br>        now_state = <span class="hljs-string">&quot;NORMAL_STATE&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Account::deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; m_owner &lt;&lt; <span class="hljs-string">&quot;存款：&quot;</span> &lt;&lt; amount &lt;&lt; endl;<br>    m_state-&gt;<span class="hljs-built_in">deposit</span>(amount);<br>    cout &lt;&lt; <span class="hljs-string">&quot;余额：&quot;</span> &lt;&lt; m_balance &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前账户状态为:&quot;</span> &lt;&lt; now_state &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;----------------------------&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Account::withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; m_owner &lt;&lt; <span class="hljs-string">&quot;取款：&quot;</span> &lt;&lt; amount &lt;&lt; endl;<br>    m_state-&gt;<span class="hljs-built_in">withdraw</span>(amount);<br>    cout &lt;&lt; <span class="hljs-string">&quot;余额：&quot;</span> &lt;&lt; m_balance &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前账户状态为:&quot;</span> &lt;&lt; now_state &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;----------------------------&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Account::computeInterest</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_state-&gt;<span class="hljs-built_in">computeInterest</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//main.cpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;state.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string name = <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">double</span> balance = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-function">Account <span class="hljs-title">acc</span><span class="hljs-params">(name, balance)</span></span>;<br>    acc.<span class="hljs-built_in">deposit</span>(<span class="hljs-number">1000</span>);<br>    acc.<span class="hljs-built_in">withdraw</span>(<span class="hljs-number">2000</span>);<br>    acc.<span class="hljs-built_in">deposit</span>(<span class="hljs-number">3000</span>);<br>    acc.<span class="hljs-built_in">withdraw</span>(<span class="hljs-number">4000</span>);<br>    acc.<span class="hljs-built_in">computeInterest</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">./state<br>张三开户，初始金额：0<br>----------------------------<br>张三存款：1000<br>余额：1000<br>当前账户状态为:NORMAL_STATE<br>----------------------------<br>张三取款：2000<br>余额：-1000<br>当前账户状态为:OVERDRAFT_STATE<br>----------------------------<br>张三存款：3000<br>余额：2000<br>当前账户状态为:NORMAL_STATE<br>----------------------------<br>张三取款：4000<br>余额：-2000<br>当前账户状态为:RESTRICTED_STATE<br>----------------------------<br>计算利息<br></code></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="多重定义main"><a href="#多重定义main" class="headerlink" title="多重定义main()"></a>多重定义main()</h3><p>错误如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">CMakeFiles/state_test.dir/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp.o: In function `main&#x27;:<br>CMakeCXXCompilerId.cpp:(.text+0x0): multiple definition of `main&#x27;<br></code></pre></td></tr></table></figure><p>发现是CMakeLists的<strong>GLOB_RECURSE</strong>参数导致的，修改方法如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#目录结构如下：</span><br>.<br>├── build<br>├── CMakeLists.txt<br>├── state.cpp<br>├── state.h<br>└── state_main.cpp<br><br><span class="hljs-number">1</span> directory, <span class="hljs-number">4</span> files<br><br><span class="hljs-comment">#--------------------------------------------------------</span><br><br><span class="hljs-comment">#CMakeLists如下：</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.05</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">project</span>(state_test<br>        VERSION <span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-comment"># &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;]]</span><br>        )<br><span class="hljs-keyword">include_directories</span>(<br>        .<br>        )<br><span class="hljs-keyword">file</span>(GLOB_RECURSE SRC *.cpp)<br><span class="hljs-keyword">add_executable</span>(state <span class="hljs-variable">$&#123;SRC&#125;</span>)<br><br><span class="hljs-comment">#--------------------------------------------------------</span><br><br><span class="hljs-comment">#方法一，修改CMakeLists：</span><br><span class="hljs-keyword">file</span>(GLOB SRC *.cpp)<br><br><span class="hljs-comment">#--------------------------------------------------------</span><br><br><span class="hljs-comment">#方法二，修改目录结构：</span><br>.<br>├── build<br>├── inc<br>│   └── state.h<br>└── src<br>    ├── CMakeLists.txt<br>    ├── state.cpp<br>    └── state_main.cpp<br><br><span class="hljs-number">3</span> directories, <span class="hljs-number">4</span> files<br><br><span class="hljs-comment">#相应的CMakeLists改为：</span><br><span class="hljs-keyword">include_directories</span>(<br>        ../inc<br>        )<br></code></pre></td></tr></table></figure><p>原因在于<strong>GLOB</strong>只会遍历当前目录，而<strong>GLOB_RECURSE</strong>会遍历当前目录及其子目录，因为<em>build</em>目录和<em>CMakeLists.txt</em>在同一级所以<strong>GLOB_RECURSE</strong>也会遍历编译目录，所以可以看如下的一条编译过程：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MAKEFILE">[ 75%] Building CXX object CMakeFiles/state.dir/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp.o<br></code></pre></td></tr></table></figure><h3 id="子类重载的函数调用失败"><a href="#子类重载的函数调用失败" class="headerlink" title="子类重载的函数调用失败"></a>子类重载的函数调用失败</h3><p>错误输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">./state<br>张三开户，初始金额：0<br>----------------------------<br>张三存款：1000<br>余额：0<br>当前账户状态为:NORMAL_STATE<br>----------------------------<br>张三取款：2000<br>余额：0<br>当前账户状态为:NORMAL_STATE<br>----------------------------<br>张三存款：3000<br>余额：0<br>当前账户状态为:NORMAL_STATE<br>----------------------------<br>张三取款：4000<br>余额：0<br>当前账户状态为:NORMAL_STATE<br>----------------------------<br></code></pre></td></tr></table></figure><p>原因是，在将子类赋值给基类时需采用指针赋值，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountState</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">()</span></span>&#123;cout &lt;&lt; <span class="hljs-string">&quot;Base Class&quot;</span> &lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NormalState</span> :</span> <span class="hljs-keyword">public</span> AccountState<br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">()</span></span>&#123;cout &lt;&lt; <span class="hljs-string">&quot;NormalState！&quot;</span> &lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">错误，此时调用的是基类方法</span><br><span class="hljs-comment">*/</span><br>AccountState m_state;<br>NormalState m_normal;<br><br>m_state = m_normal;<br>m_state.<span class="hljs-built_in">deposit</span>();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">正确，此时调用的是子类方法</span><br><span class="hljs-comment">*/</span><br>AccountState *m_state;<br>NormalState m_normal;<br><br>m_state = &amp;m_normal;<br>m_state-&gt;<span class="hljs-built_in">deposit</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>友元</title>
    <link href="/2022/03/30/C++/%E5%8F%8B%E5%85%83/"/>
    <url>/2022/03/30/C++/%E5%8F%8B%E5%85%83/</url>
    
    <content type="html"><![CDATA[<p>类的友元函数 (friend) 是定义在类外部, 但是有权限访问类的所有私有 (private) 成员和保护 (protected) 成员</p><p>公有成员和私有成员的概念:</p><ul><li>公有成员 (public) : 在类外可以访问</li><li>私有成员 (private): 只有本类中的函数可以访问</li></ul><p>友元 (friend) 可以访问与其有好友关系的类中的私有成员 (有限制的共享).</p><p>友元包括友元函数和友元类:</p><ul><li>友元函数: 如果在本类以外的其他地方定义的函数, 在类体重用 friend 进行声明. 此函数就称为本类的有元函数, 友元函数可以访问这个类中的私有成员</li><li>友元类: 类 A 将另一个类 B 声明为其友元类, 友元类 B 中的所有函数都是 A 类的友元函数, 可以访问 A 类中的所有成员</li></ul><h2 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">student</span>(string &amp;name, <span class="hljs-keyword">int</span> &amp;age)<br>    &#123;<br>            my_name = name;<br>            my_age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">who_are_you</span><span class="hljs-params">(student &amp;s)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    string my_name;<br>    <span class="hljs-keyword">int</span> my_age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">who_are_you</span><span class="hljs-params">(student &amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; s.my_name &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;age: &quot;</span> &lt;&lt; s.my_age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string name = <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">int</span> age = <span class="hljs-number">18</span>;<br>    <span class="hljs-function">student <span class="hljs-title">s</span><span class="hljs-params">(name,age)</span></span>;<br>    <span class="hljs-built_in">who_are_you</span>(s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">student</span>(string &amp;name, <span class="hljs-keyword">int</span> &amp;age)<br>    &#123;<br>            my_name = name;<br>            my_age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span>;</span><br><br><span class="hljs-keyword">private</span>:<br>    string my_name;<br>    <span class="hljs-keyword">int</span> my_age;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">who_are_you</span><span class="hljs-params">(student &amp;s)</span></span><br><span class="hljs-function">    </span>&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; s.my_name &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;age: &quot;</span> &lt;&lt; s.my_age &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string name = <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">int</span> age = <span class="hljs-number">18</span>;<br>    <span class="hljs-function">student <span class="hljs-title">s</span><span class="hljs-params">(name,age)</span></span>;<br>    teacher t;<br>    t.<span class="hljs-built_in">who_are_you</span>(s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>友元包含友元函数和友元类</li><li>友元是C++提供的一种破坏数据封装和数据隐藏的机制。</li><li>通过将一个模块声明为另一个模块的友元，一个模块能够引用到另外一个模块中本是被隐藏的信息。</li><li>为了确保数据的完整性，及数据封装与隐藏的原则，<br>建议尽量不使用或少使用友元。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板</title>
    <link href="/2022/03/27/C++/%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/03/27/C++/%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板分为函数模板和类模板</p><h2 id="模板函数"><a href="#模板函数" class="headerlink" title="模板函数"></a>模板函数</h2><p>函数模板的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">template &lt;typename T&gt;</span><br><span class="hljs-comment">返回类型 函数名（形参表）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-comment">//交换两个参数的值</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T &amp;a, T &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    T tmp;<br>    tmp = a;<br>    a = b;<br>    b = tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">char</span> d = <span class="hljs-string">&#x27;D&#x27;</span>, e = <span class="hljs-string">&#x27;E&#x27;</span>;<br>    <span class="hljs-built_in">swap</span>(a, b);<br>    <span class="hljs-built_in">swap</span>(d, e);<br>    cout &lt;&lt; <span class="hljs-string">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b: &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;d: &quot;</span> &lt;&lt; d &lt;&lt; <span class="hljs-string">&quot; e: &quot;</span> &lt;&lt; e &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><p>可以像函数模板一样创建类模板，创建方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">template &lt;typename T&gt;</span><br><span class="hljs-comment">class name &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//有问题的单例类模板仅作格式参考</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SINGLETON_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SINGLETON_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mutex&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">singleton</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... Args&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> T* <span class="hljs-title">get_instance</span><span class="hljs-params">(Args&amp;&amp;... args)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!s_instance)<br>        &#123;<br>            <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lck</span><span class="hljs-params">(s_instance_mtx)</span></span>;<br>            <span class="hljs-keyword">if</span> (!s_instance)<br>            &#123;<br>                s_instance = std::shared_ptr&lt;T&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">T</span>(std::forward&lt;Args&gt;(args)...));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s_instance.<span class="hljs-built_in">get</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release_instance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (s_instance)<br>        &#123;<br>            <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lck</span><span class="hljs-params">(s_instance_mtx)</span></span>;<br>            <span class="hljs-keyword">if</span> (s_instance)<br>            &#123;<br>                s_instance.<span class="hljs-built_in">reset</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">static</span> std::shared_ptr&lt;T&gt;   s_instance;<br>    <span class="hljs-keyword">static</span> std::mutex           s_instance_mtx;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>std::mutex singleton&lt;T&gt;::s_instance_mtx;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>std::shared_ptr&lt;T&gt; singleton&lt;T&gt;::s_instance;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* SINGLETON_H */</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重写和重定义</title>
    <link href="/2022/03/21/C++/%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    <url>/2022/03/21/C++/%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><ul><li>override是重写（覆盖）了一个方法，以实现不同的功能。一般用于子类在继承父类时，重写（覆盖）父类中的方法。函数特征相同，但是具体实现不同</li><li>被重写的函数不能是static的，必须是virtual的</li><li>重写函数必须有相同的类型，名称和参数列表</li><li>重写函数的访问修饰符可以不同。尽管virtual是private的，派生类中重写改写为public、protect也是可以的</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">toprint</span><span class="hljs-params">()</span> </span>&#123;cout &lt;&lt; <span class="hljs-string">&quot;A&quot;</span>&lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> :</span> <span class="hljs-keyword">public</span> A<br>&#123;<br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toprint</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;B&quot;</span>&lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> :</span> <span class="hljs-keyword">public</span> A<br>&#123;<br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toprint</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;C&quot;</span>&lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        B b;<br>        b.<span class="hljs-built_in">toprint</span>();<br>        C c;<br>        c.<span class="hljs-built_in">toprint</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="重定义"><a href="#重定义" class="headerlink" title="重定义"></a>重定义</h2><ul><li>派生类对基类的成员函数重新定义，即派生类定义了某个函数，该函数的名字与基类中函数名字一样。</li><li>重定义也叫做隐藏，子类重定义父类中有相同名称的非虚函数（参数可以不同）。如果一个类，存在和父类相同的函数，那么这个类将会覆盖其父类的方法，除非你在调用的时候，强制转换为父类类型，否则试图对子类和父类做类似重载的调用时不能成功的。</li><li>不在同一个作用域（分别位于基类、派生类）</li><li>函数的名字必须相同</li><li>对函数的返回值、形参列表无要求</li><li>若派生类定义该函数与基类的成员函数完全一样（返回值、形参列表均相同），且基类的该函数为virtual，则属于派生类重写基类的虚函数</li><li>若重新定义了基类中的一个重载函数，则在派生类中，基类中该名字函数（即其他所有重载版本）都会被自动隐藏，包括同名的虚函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toprint</span><span class="hljs-params">()</span> </span>&#123;cout &lt;&lt; <span class="hljs-string">&quot;A&quot;</span>&lt;&lt; endl;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toprint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;cout &lt;&lt; a &lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> :</span> <span class="hljs-keyword">public</span> A<br>&#123;<br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toprint</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;B&quot;</span>&lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> :</span> <span class="hljs-keyword">public</span> A<br>&#123;<br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toprint</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;C&quot;</span>&lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        B b;<br>        b.<span class="hljs-built_in">toprint</span>();<br>        C c;<br>        c.<span class="hljs-built_in">toprint</span>();<br>        <span class="hljs-comment">//c.toprint(10); //报错，toprint(int a)被隐藏</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重载</title>
    <link href="/2022/03/20/C++/%E9%87%8D%E8%BD%BD/"/>
    <url>/2022/03/20/C++/%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="C-重载"><a href="#C-重载" class="headerlink" title="C++重载"></a>C++重载</h2><p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。</p><p>重载分为函数重载和运算符重载</p><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>在同一个作用域内，可以声明函数名相同，参数不同的函数。但是不能通过返回值的不同来重载函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">printData</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;整数为: &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">double</span>  f)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;浮点数为: &quot;</span> &lt;&lt; f &lt;&lt; endl;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c[])</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;字符串为: &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>      &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>   printData pd;<br><br>   <span class="hljs-comment">// 输出整数</span><br>   pd.<span class="hljs-built_in">print</span>(<span class="hljs-number">5</span>);<br>   <span class="hljs-comment">// 输出浮点数</span><br>   pd.<span class="hljs-built_in">print</span>(<span class="hljs-number">500.263</span>);<br>   <span class="hljs-comment">// 输出字符串</span><br>   <span class="hljs-keyword">char</span> c[] = <span class="hljs-string">&quot;Hello C++&quot;</span>;<br>   pd.<span class="hljs-built_in">print</span>(c);<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">public</span>:<br><br>      <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getVolume</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function">      </span>&#123;<br>         <span class="hljs-keyword">return</span> length * breadth * height;<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setLength</span><span class="hljs-params">( <span class="hljs-keyword">double</span> len )</span></span><br><span class="hljs-function">      </span>&#123;<br>          length = len;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setBreadth</span><span class="hljs-params">( <span class="hljs-keyword">double</span> bre )</span></span><br><span class="hljs-function">      </span>&#123;<br>          breadth = bre;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHeight</span><span class="hljs-params">( <span class="hljs-keyword">double</span> hei )</span></span><br><span class="hljs-function">      </span>&#123;<br>          height = hei;<br>      &#125;<br>      <span class="hljs-comment">// 重载 + 运算符，用于把两个 Box 对象相加</span><br>      Box <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Box&amp; b)<br>      &#123;<br>         Box box;<br>         box.length = <span class="hljs-keyword">this</span>-&gt;length + b.length;<br>         box.breadth = <span class="hljs-keyword">this</span>-&gt;breadth + b.breadth;<br>         box.height = <span class="hljs-keyword">this</span>-&gt;height + b.height;<br>         <span class="hljs-keyword">return</span> box;<br>      &#125;<br>   <span class="hljs-keyword">private</span>:<br>      <span class="hljs-keyword">double</span> length;      <span class="hljs-comment">// 长度</span><br>      <span class="hljs-keyword">double</span> breadth;     <span class="hljs-comment">// 宽度</span><br>      <span class="hljs-keyword">double</span> height;      <span class="hljs-comment">// 高度</span><br>&#125;;<br><span class="hljs-comment">// 程序的主函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   Box Box1;                <span class="hljs-comment">// 声明 Box1，类型为 Box</span><br>   Box Box2;                <span class="hljs-comment">// 声明 Box2，类型为 Box</span><br>   Box Box3;                <span class="hljs-comment">// 声明 Box3，类型为 Box</span><br>   <span class="hljs-keyword">double</span> volume = <span class="hljs-number">0.0</span>;     <span class="hljs-comment">// 把体积存储在该变量中</span><br><br>   <span class="hljs-comment">// Box1 详述</span><br>   Box1.<span class="hljs-built_in">setLength</span>(<span class="hljs-number">6.0</span>);<br>   Box1.<span class="hljs-built_in">setBreadth</span>(<span class="hljs-number">7.0</span>);<br>   Box1.<span class="hljs-built_in">setHeight</span>(<span class="hljs-number">5.0</span>);<br><br>   <span class="hljs-comment">// Box2 详述</span><br>   Box2.<span class="hljs-built_in">setLength</span>(<span class="hljs-number">12.0</span>);<br>   Box2.<span class="hljs-built_in">setBreadth</span>(<span class="hljs-number">13.0</span>);<br>   Box2.<span class="hljs-built_in">setHeight</span>(<span class="hljs-number">10.0</span>);<br><br>   <span class="hljs-comment">// Box1 的体积</span><br>   volume = Box1.<span class="hljs-built_in">getVolume</span>();<br>   cout &lt;&lt; <span class="hljs-string">&quot;Volume of Box1 : &quot;</span> &lt;&lt; volume &lt;&lt;endl;<br><br>   <span class="hljs-comment">// Box2 的体积</span><br>   volume = Box2.<span class="hljs-built_in">getVolume</span>();<br>   cout &lt;&lt; <span class="hljs-string">&quot;Volume of Box2 : &quot;</span> &lt;&lt; volume &lt;&lt;endl;<br><br>   <span class="hljs-comment">// 把两个对象相加，得到 Box3</span><br>   Box3 = Box1 + Box2;<br><br>   <span class="hljs-comment">// Box3 的体积</span><br>   volume = Box3.<span class="hljs-built_in">getVolume</span>();<br>   cout &lt;&lt; <span class="hljs-string">&quot;Volume of Box3 : &quot;</span> &lt;&lt; volume &lt;&lt;endl;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是不可重载的运算符列表：</p><ul><li>.：成员访问运算符</li><li>.*, -&gt;*：成员指针访问运算符</li><li>::：域运算符</li><li>sizeof：长度运算符</li><li>?:：条件运算符</li><li>#： 预处理符号</li></ul><p>代码转自<a href="https://www.runoob.com/cplusplus/cpp-overloading.html">菜鸟教程</a></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++的三大特性</title>
    <link href="/2022/03/10/C++/c++%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <url>/2022/03/10/C++/c++%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="C-的三大特性"><a href="#C-的三大特性" class="headerlink" title="C++的三大特性"></a>C++的三大特性</h2><p>C++的三大特性为：继承、多态、封装</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>被继承的是父类（基类），继承出来的类是子类（派生类），子类拥有父类的所有的特性。</p><p>继承方式有公有继承、私有继承，保护继承。默认是私有继承</p><ul><li>公有继承中父类的公有和保护成员在子类中不变，私有的在子类中不可访问。</li><li>私有继承中父类的公有和保护成员在子类中变为私有，但私有的在子类中不可访问。</li><li>保护继承中父类的公有和保护成员在子类中变为保护，但私有的在子类中不可访问。</li></ul><p>c++语言允许单继承和多继承</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态性是指对不同类的对象发出相同的消息将会有不同的实现</p><p>C++有两种多态，称为动多态（运行期多态）和静多态（编译器多态）</p><ul><li>静多态主要是通过模板来实现</li><li>动多态是通过虚函数来实现的。即在基类中存在虚函数（一般为纯虚函数）子类通过重载这些接口，使用基类的指针或者引用指向子类的对象，就可以调用子类对应的函数，动多态的函数调用机制是执行器期才能确定的，所以他是动态的。</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>隐藏类的属性和实现细节，仅仅对外提供接口</p><p>封装性实际上是由编译器去识别关键字public、private和protected来实现的，体现在类的成员可以有公有成员(public)，私有成员(private)，保护成员(protected)。</p><ul><li>私有成员是在封装体内被隐藏的部分，只有类体内说明的函数(类的成员函数)才可以访问私有成员，而在类体外的函数时不能访问的</li><li>公有成员是封装体与外界的一个接口，类体外的函数可以访问公有成员</li><li>保护成员是只有该类的成员函数和该类的派生类才可以访问的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例和智能指针</title>
    <link href="/2022/03/07/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E5%8D%95%E4%BE%8B%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <url>/2022/03/07/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E5%8D%95%E4%BE%8B%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p>单例 Singleton 是设计模式的一种，其特点是只提供唯一一个类的实例,具有全局变量的特点，在任何位置都可以通过接口获取到那个唯一实例。</p><ol><li><p>单例类只能有一个实例。</p><p> 为此，单例类只能提供私有的构造函数，即保证不能随意创建该类的实例。</p></li><li><p>单例类必须自己创建自己的唯一实例。</p><p> 因为构造函数是私有的，其他对象不能创建单例类的实例，只能是单例类自己来创建。</p></li><li><p>单例类必须给所有其他对象提供这一实例。</p><p> 外界需要获取并使用这个单例类的实例，但是由于该类的构造函数是私有的，外界无法通过new去获取它的实例，那么就必须提供一个静态的公有方法，该方法创建或者获取它本身的静态私有对象并返回。</p></li></ol><h2 id="智能指针-shared-ptr"><a href="#智能指针-shared-ptr" class="headerlink" title="智能指针 shared_ptr"></a>智能指针 shared_ptr</h2><p>智能指针是存储动态分配对象指针的类，用于生命周期的控制。当指针离开其作用域时，自动销毁动态分配的空间，防止内存泄漏。</p><p>std::shared_ptr采用引用计数，每一个shared_ptr的拷贝都指向相同的内容，当最后一个shared_ptr析构的时候，内存被释放。</p><h2 id="使用智能指针创建单例模板"><a href="#使用智能指针创建单例模板" class="headerlink" title="使用智能指针创建单例模板"></a>使用智能指针创建单例模板</h2><p>为了减少重复代码，实现单例模板，需要创建单例的只需把这个模板添加为友元类即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SINGLETON_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SINGLETON_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mutex&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">singleton</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... Args&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> T* <span class="hljs-title">get_instance</span><span class="hljs-params">(Args&amp;&amp;... args)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!s_instance)<br>        &#123;<br>            <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lck</span><span class="hljs-params">(s_instance_mtx)</span></span>;<br>            <span class="hljs-keyword">if</span> (!s_instance)<br>            &#123;<br>                s_instance = std::shared_ptr&lt;T&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">T</span>(std::forward&lt;Args&gt;(args)...));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s_instance.<span class="hljs-built_in">get</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release_instance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (s_instance)<br>        &#123;<br>            <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lck</span><span class="hljs-params">(s_instance_mtx)</span></span>;<br>            <span class="hljs-keyword">if</span> (s_instance)<br>            &#123;<br>                s_instance.<span class="hljs-built_in">reset</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">static</span> std::shared_ptr&lt;T&gt;   s_instance;<br>    <span class="hljs-keyword">static</span> std::mutex           s_instance_mtx;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>std::mutex singleton&lt;T&gt;::s_instance_mtx;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>std::shared_ptr&lt;T&gt; singleton&lt;T&gt;::s_instance;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* SINGLETON_H */</span></span><br><br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这个单例已经在以前的项目中跑了一年多了，最近发现在第一次调用release_instance()时就会被析构，智能指针的引用计数器貌似没有发挥作用</p><p>经过LOG，和调查发现根本原因是在get_instance()时，返回的是原始指针，所以智能指针只有创建时的一次引用，即引用计数器永远为1</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>第一个解决方法就是返回智能指针，要保证在使用单例的地方也声明对应的智能指针</li><li>第二个是我们自己添加一个计数器，get_instance()时计数器加一，release_instance()时减一，当计数器为0，就析构</li></ol><p>两种修改方法都很简单，就不放修改代码了。</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取已连接设备</title>
    <link href="/2022/02/16/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E8%8E%B7%E5%8F%96%E5%B7%B2%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87/"/>
    <url>/2022/02/16/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E8%8E%B7%E5%8F%96%E5%B7%B2%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h2 id="获取已连接设备"><a href="#获取已连接设备" class="headerlink" title="获取已连接设备"></a>获取已连接设备</h2><p>产品有一个需求，获取已连接设备，这个需求经过三次更改，我的实现也随之改了又改，现在记录一下</p><h2 id="最初的需求"><a href="#最初的需求" class="headerlink" title="最初的需求"></a>最初的需求</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>获取已连接设备的列表，设备有两种方式连接，第一，为通过网线连接，第二为通过WiFi连接</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>因为如果有设备连接到DUT,DUT会给已连接设备分配IP，分配ip的操作是由dnsmasq来完成的，关于dnsmasq的配置可以参考之前的文章 <a href="/2021/10/17/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/dnsmasq/">dnsmasq的配置</a></p><p>dnsmasq在分配IP时会更新租期文件，租期文件的路径就是我们自己配置的，此次实现就是读取租期文件，获取hostname，ip以及mac地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">cat dnsmasq.leases<br>1642514042 ca:32:8b:3e:ff:f7 192.168.1.137 DESKTOP-S48TNAG 01:ca:32:8b:3e:ff:f7<br></code></pre></td></tr></table></figure><p>这几个字段的意义分别为：租约到期时间 MAC地址 IP地址 Hostname client-ID</p><p>所以可以很容易的获取到已连接设备的列表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ms_lan_list_info</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> ipaddr[<span class="hljs-number">64</span>];<br>    <span class="hljs-keyword">char</span> mac[<span class="hljs-number">48</span>];<br>    <span class="hljs-keyword">char</span> host_name[<span class="hljs-number">48</span>];<br>&#125; ms_lan_list_info;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read_leases_file</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">-1</span>;<br>    <span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(<span class="hljs-string">&quot;/tmp/dnsmasq.leases&quot;</span>)</span></span>;<br>    string line;<br>    <span class="hljs-keyword">char</span> ip[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;, mac[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;, name[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;, time[<span class="hljs-number">64</span>]=&#123;<span class="hljs-number">0</span>&#125;, id[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    ms_lan_list_info info;<br>    <span class="hljs-keyword">if</span>(in)<br>    &#123;<br>        m_lan_list.<span class="hljs-built_in">clear</span>();<br>        len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span> (in, line))<br>        &#123;<br>            <span class="hljs-built_in">memset</span>(&amp;info,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(info));<br><br>            <span class="hljs-built_in">sscanf</span>(line.<span class="hljs-built_in">c_str</span>(),<span class="hljs-string">&quot;%s %s %s %s %s&quot;</span>,time, mac, ip, name, id);<br>            <span class="hljs-built_in">strncpy</span>(info.ipaddr, ip, <span class="hljs-number">64</span>);<br>            <span class="hljs-built_in">strncpy</span>(info.mac, mac, <span class="hljs-number">48</span>);<br>            <span class="hljs-built_in">strncpy</span>(info.host_name, name, <span class="hljs-number">48</span>);<br>            m_lan_list.<span class="hljs-built_in">push_back</span>(info);<br>            len++;<br>        &#125;<br>    &#125;<br><br>    in.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果设备断开连接，只有租期到了才会删除记录，所以已连接设备列表不会实时更新，此为遗留问题</p><h2 id="获取已连接设备并区分连接类型"><a href="#获取已连接设备并区分连接类型" class="headerlink" title="获取已连接设备并区分连接类型"></a>获取已连接设备并区分连接类型</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>获取已连接设备，区分是LAN，2.4G WIFI还是5G WIFI连接，并可以实时更新连接状态</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>wifi驱动会更新其sta列表，表中会有已连接设备的mac，根据此mac向当前的列表打标记，可以区分连接类型:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ms_lan_list_info</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> ipaddr[<span class="hljs-number">64</span>];<br>    <span class="hljs-keyword">char</span> mac[<span class="hljs-number">48</span>];<br>    <span class="hljs-keyword">char</span> host_name[<span class="hljs-number">48</span>];<br>    <span class="hljs-keyword">int</span> type;<br>&#125; ms_lan_list_info;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">CLIENT_TYPE</span>&#123;</span><br>    MS_CLIENT_TYPE_LAN = <span class="hljs-number">1</span>,<br>    MS_CLIENT_TYPE_WIFI24G = <span class="hljs-number">2</span>,<br>    MS_CLIENT_TYPE_WIFI5G = <span class="hljs-number">3</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read_leases_file</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-number">-1</span>;<br>    <span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(<span class="hljs-string">&quot;/tmp/dnsmasq.leases&quot;</span>)</span></span>;<br>    string line;<br>    <span class="hljs-keyword">char</span> ip[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;, mac[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;, name[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;, time[<span class="hljs-number">64</span>]=&#123;<span class="hljs-number">0</span>&#125;, id[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    ms_lan_list_info info;<br>    <span class="hljs-keyword">if</span>(in)<br>    &#123;<br>        m_lan_list.<span class="hljs-built_in">clear</span>();<br>        len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span> (in, line))<br>        &#123;<br>            <span class="hljs-built_in">memset</span>(&amp;info,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(info));<br>            <span class="hljs-built_in">sscanf</span>(line.<span class="hljs-built_in">c_str</span>(),<span class="hljs-string">&quot;%s %s %s %s %s&quot;</span>,time, mac, ip, name, id);<br>            info.type = MS_CLIENT_TYPE_LAN;<br>            <span class="hljs-built_in">strncpy</span>(info.ipaddr, ip, <span class="hljs-number">64</span>);<br>            <span class="hljs-built_in">strncpy</span>(info.mac, mac, <span class="hljs-number">48</span>);<br>            <span class="hljs-built_in">strncpy</span>(info.host_name, name, <span class="hljs-number">48</span>);<br>            m_lan_list.<span class="hljs-built_in">push_back</span>(info);<br>            len++;<br>        &#125;<br>    &#125;<br><br>    in.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-built_in">set_client_type</span>(MS_CLIENT_TYPE_WIFI5G, m_lan_list);<br>    <span class="hljs-built_in">set_client_type</span>(MS_CLIENT_TYPE_WIFI24G, m_lan_list);<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_client_type</span><span class="hljs-params">(<span class="hljs-keyword">int</span> type,list&lt;ms_lan_list_info&gt; *list)</span></span><br><span class="hljs-function"></span>&#123;<br>    string filename;<br>    string line;<br>    string mark = <span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">if</span> (type == MS_CLIENT_TYPE_WIFI24G)<br>    &#123;<br>        filename = <span class="hljs-string">&quot;/proc/wlan0/sta_info&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == MS_CLIENT_TYPE_WIFI5G)<br>    &#123;<br>        filename = <span class="hljs-string">&quot;/proc/wlan1/sta_info&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(filename)</span></span>;<br>    <span class="hljs-keyword">if</span>(in)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span> (in, line))<br>        &#123;<br>            <span class="hljs-keyword">size_t</span> pos = line.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;hwaddr: &quot;</span>);<br>            <span class="hljs-keyword">if</span> (pos != <span class="hljs-number">-1</span>)<br>            &#123;<br>                string value = line.<span class="hljs-built_in">substr</span>(pos + <span class="hljs-number">8</span>);<br>                <span class="hljs-keyword">if</span> (list-&gt;<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> list_iterator = list-&gt;<span class="hljs-built_in">begin</span>(); list_iterator != list-&gt;<span class="hljs-built_in">end</span>(); list_iterator++)<br>                    &#123;<br>                        string macaddr = list_iterator-&gt;mac;<br>                        <span class="hljs-built_in">delete_mark</span>(macaddr, mark);<br>                        <span class="hljs-keyword">if</span> (macaddr == value)<br>                        &#123;<br>                            list_iterator-&gt;type = type;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        in.<span class="hljs-built_in">close</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open [%s] fail&quot;</span>,filename.<span class="hljs-built_in">c_str</span>());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实时更新使用arping来检测列表中的设备，将无响应的设备从列表中移除：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ms_lan_service::flush_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    list&lt;ms_lan_list_info&gt;::iterator list_iterator;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">-1</span>;<br>    len = <span class="hljs-built_in">read_leases_file</span>();<br>    <span class="hljs-keyword">if</span> (len &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(list_iterator = m_lan_list.<span class="hljs-built_in">begin</span>(); list_iterator != m_lan_list.<span class="hljs-built_in">end</span>();)<br>        &#123;<br>            string cmd = <span class="hljs-string">&quot;arping -f -w 1 -I br-lan &quot;</span>, result;<br>            cmd += list_iterator-&gt;ipaddr;<br>            <span class="hljs-built_in">execute_cmd</span>(cmd, result);<br>            <span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">rfind</span>(<span class="hljs-string">&quot;Received 1 response&quot;</span>) == string::npos)<br>            &#123;<br>                m_lan_list.<span class="hljs-built_in">erase</span>(list_iterator++);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                list_iterator++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果离线设备过多，每个设备都需要1s的超时时间arping才会返回，严重影响DUT性能</p><h2 id="最终需求"><a href="#最终需求" class="headerlink" title="最终需求"></a>最终需求</h2><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><p>可以从已连接设备中将设备拉入黑名单，只关心通过WiFi连接的设备，所以已连接设备只需要获取WiFi连接的设备，并添加拉黑功能(此功能在此不做讨论)</p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>优化上一版，只需返回wifi的sta列表中的设备，由于wifi驱动会实时更新sta列表，所以不需要arping的操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read_leases_file</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">-1</span>;<br>    <span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(<span class="hljs-string">&quot;/tmp/dnsmasq.leases&quot;</span>)</span></span>;<br>    string line;<br>    <span class="hljs-keyword">char</span> ip[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;, mac[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;, name[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;, time[<span class="hljs-number">64</span>]=&#123;<span class="hljs-number">0</span>&#125;, id[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    ms_lan_list_info info;<br>    list&lt;ms_lan_list_info&gt; list;<br>    <span class="hljs-keyword">if</span>(in)<br>    &#123;<br>        m_lan_list.<span class="hljs-built_in">clear</span>();<br>        len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span> (in, line))<br>        &#123;<br>            <span class="hljs-built_in">memset</span>(&amp;info,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(info));<br><br>            <span class="hljs-built_in">sscanf</span>(line.<span class="hljs-built_in">c_str</span>(),<span class="hljs-string">&quot;%s %s %s %s %s&quot;</span>,time, mac, ip, name, id);<br>            info.type = MS_CLIENT_TYPE_LAN;<br>            <span class="hljs-built_in">strncpy</span>(info.ipaddr, ip, <span class="hljs-number">64</span>);<br>            <span class="hljs-built_in">strncpy</span>(info.mac, mac, <span class="hljs-number">48</span>);<br>            <span class="hljs-built_in">strncpy</span>(info.host_name, name, <span class="hljs-number">48</span>);<br>            list.<span class="hljs-built_in">push_back</span>(info);<br>            len++;<br>        &#125;<br>    &#125;<br><br>    in.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-built_in">set_client_type</span>(MS_CLIENT_TYPE_WIFI5G, &amp;list);<br>    <span class="hljs-built_in">set_client_type</span>(MS_CLIENT_TYPE_WIFI24G, &amp;list);<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_client_type</span><span class="hljs-params">(<span class="hljs-keyword">int</span> type,list&lt;ms_lan_list_info&gt; *list)</span></span><br><span class="hljs-function"></span>&#123;<br>    string filename;<br>    string line;<br>    string mark = <span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">if</span> (type == MS_CLIENT_TYPE_WIFI24G)<br>    &#123;<br>        filename = <span class="hljs-string">&quot;/proc/wlan0/sta_info&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == MS_CLIENT_TYPE_WIFI5G)<br>    &#123;<br>        filename = <span class="hljs-string">&quot;/proc/wlan1/sta_info&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(filename)</span></span>;<br><br>    <span class="hljs-keyword">if</span>(in)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span> (in, line))<br>        &#123;<br>            <span class="hljs-keyword">size_t</span> pos = line.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;hwaddr: &quot;</span>);<br>            <span class="hljs-keyword">if</span> (pos != <span class="hljs-number">-1</span>)<br>            &#123;<br>                string value = line.<span class="hljs-built_in">substr</span>(pos + <span class="hljs-number">8</span>);<br>                <span class="hljs-keyword">if</span> (list-&gt;<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> list_iterator = list-&gt;<span class="hljs-built_in">begin</span>(); list_iterator != list-&gt;<span class="hljs-built_in">end</span>(); list_iterator++)<br>                    &#123;<br>                        string macaddr = list_iterator-&gt;mac;<br>                        <span class="hljs-built_in">delete_mark</span>(macaddr, mark);<br>                        <span class="hljs-built_in">ALOGI</span>(<span class="hljs-string">&quot;lan mac[%s] - mac[%s]&quot;</span>,value.<span class="hljs-built_in">c_str</span>(), macaddr.<span class="hljs-built_in">c_str</span>());<br>                        <span class="hljs-keyword">if</span> (macaddr == value)<br>                        &#123;<br>                            list_iterator-&gt;type = type;<br>                            m_lan_list.<span class="hljs-built_in">push_back</span>(*list_iterator);<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        in.<span class="hljs-built_in">close</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open [%s] fail&quot;</span>,filename.<span class="hljs-built_in">c_str</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>需求的小更改会导致实现的大变化，最好在一开始就明确需求，减少开发的无效修改和无效工作</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二个轮子OS API</title>
    <link href="/2022/01/23/%E9%80%A0%E8%BD%AE%E5%AD%90/osapi/"/>
    <url>/2022/01/23/%E9%80%A0%E8%BD%AE%E5%AD%90/osapi/</url>
    
    <content type="html"><![CDATA[<h2 id="OS-API"><a href="#OS-API" class="headerlink" title="OS API"></a>OS API</h2><p>在Linux应用编程中，常常为了获取或设置一些信息，写一些重复性的代码，在此整理一下，作为实现的第二个轮子，暂且称之为OS API</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_rm_file</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *file_name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> unlink(file_name);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">unlink_cb</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fpath, <span class="hljs-keyword">const</span> struct stat *sb, <span class="hljs-keyword">int</span> typeflag, struct FTW *ftwbuf)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> rv = remove(fpath);<br>    <span class="hljs-keyword">if</span> (rv)<br>    &#123;<br>        ALOGE(<span class="hljs-string">&quot;remove(%s) failed, rv: %d, err: %d\n&quot;</span>, fpath, rv, errno);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> rv;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_rmdir</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *path)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> rv = nftw(path, unlink_cb, <span class="hljs-number">64</span>, FTW_DEPTH | FTW_PHYS);<br>    <span class="hljs-keyword">if</span> ((rv != <span class="hljs-number">0</span>) &amp;&amp; (errno != ENOENT))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文件夹是否为空"><a href="#文件夹是否为空" class="headerlink" title="文件夹是否为空"></a>文件夹是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_dirempty</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *dirname)</span></span><br><span class="hljs-function"></span>&#123;<br>    DIR *dir = opendir(dirname);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">ent</span>;</span><br>    <span class="hljs-keyword">if</span> (dir == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        ent = readdir (dir);<br>        <span class="hljs-keyword">if</span> (ent &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;.&quot;</span>, ent-&gt;d_name)==<span class="hljs-number">0</span>) || (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;..&quot;</span>, ent-&gt;d_name)==<span class="hljs-number">0</span>))<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((ent-&gt;d_type == DT_DIR) || (ent-&gt;d_type == DT_REG))<br>        &#123;<br>            closedir(dir);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    closedir(dir);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行shell命令并获取结果"><a href="#执行shell命令并获取结果" class="headerlink" title="执行shell命令并获取结果"></a>执行shell命令并获取结果</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">popen_read</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmd,<span class="hljs-keyword">char</span> *res,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    len--;<span class="hljs-comment">//预留一个位来保存&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">if</span>(cmd == <span class="hljs-literal">NULL</span> || res == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    FILE *fp;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">int</span> l,nread = <span class="hljs-number">0</span>;<br>    fp = popen(cmd,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(fp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">1024</span>,fp) != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            l = <span class="hljs-built_in">strlen</span>(buf);<br>            <span class="hljs-keyword">if</span>(l &gt;= len - nread)<br>            &#123;<br>                <span class="hljs-built_in">memcpy</span>(res + nread,buf,len-nread);<br>                res[len+<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>                <span class="hljs-keyword">return</span> len;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">memcpy</span>(res + nread,buf,l+<span class="hljs-number">1</span>);<br>            &#125;<br>            nread += l;<br>        &#125;<br>        pclose(fp);<br>        <span class="hljs-keyword">return</span> nread;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行多参数shell命令"><a href="#执行多参数shell命令" class="headerlink" title="执行多参数shell命令"></a>执行多参数shell命令</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_system</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> wait, <span class="hljs-keyword">int</span> *svc_pid, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *exec_file, ...)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> status = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> rc = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">sigset_t</span> chldmask, savemask;<br>    <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt;::iterator list_iterator;<br><br>    <span class="hljs-keyword">if</span> (exec_file == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* now block SIGCHLD */</span><br>    sigemptyset(&amp;chldmask);<br>    sigaddset(&amp;chldmask, SIGCHLD);<br>    <span class="hljs-keyword">if</span> (sigprocmask(SIG_BLOCK, &amp;chldmask, &amp;savemask))<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-2</span>);<br>    &#125;<br><br>    pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Error. */</span><br>        rc = <span class="hljs-number">-3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Child. */</span><br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **argv;<br>        <span class="hljs-keyword">int</span> argc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **p;<br>        va_list args;<br><br>        ALOGI(<span class="hljs-string">&quot;exec_file[%d]:%s&quot;</span>, getpid(), exec_file);<br><br>        n = <span class="hljs-number">1</span>; <span class="hljs-comment">/* =1 for argv[0]. */</span><br>        va_start(args, exec_file);<br>        <span class="hljs-keyword">for</span> (; va_arg(args, <span class="hljs-keyword">char</span> *);)<br>        &#123;<br>            ++n;<br>        &#125;<br>        va_end(args);<br><br>        p = argv = (<span class="hljs-keyword">char</span> **)<span class="hljs-built_in">malloc</span>((n + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span> *)); <span class="hljs-comment">/* +1 for terminal NULL */</span><br><br>        p[<span class="hljs-number">0</span>] = (<span class="hljs-keyword">char</span> *)exec_file;<br><br>        va_start(args, exec_file);<br>        <span class="hljs-keyword">for</span> (; n--;)<br>        &#123;<br>            *++p = va_arg(args, <span class="hljs-keyword">char</span> *);<br>        &#125;<br>        va_end(args);<br>        *p = <span class="hljs-literal">NULL</span>;<br><br>        sigprocmask(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>        n = execvp(exec_file, argv);<br>        <span class="hljs-comment">/* on error */</span><br>        <span class="hljs-built_in">free</span>(argv);<br>        <span class="hljs-built_in">exit</span>(n);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">/* to make child run first. sleep 2ms. */</span><br>        usleep(<span class="hljs-number">1</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">/* Parent. */</span><br>        <span class="hljs-keyword">if</span> (svc_pid)<br>        &#123;<br>            *svc_pid = pid;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (wait)<br>        &#123;<br>            <span class="hljs-keyword">do</span><br>            &#123;<br>                rc = waitpid(pid, &amp;status, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (errno != EINTR)<br>                    &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    rc = WEXITSTATUS(status);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            rc = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    sigprocmask(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> rc;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除字符串分隔符"><a href="#删除字符串分隔符" class="headerlink" title="删除字符串分隔符"></a>删除字符串分隔符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">strdel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s, <span class="hljs-keyword">char</span> del)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *p;<br>    <span class="hljs-keyword">char</span> *q;<br>    <span class="hljs-keyword">for</span> (p=s, q=s; *p != <span class="hljs-string">&#x27;\0&#x27;</span>; p++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (*p != del)<br>        &#123;<br>            *q++ = *p;<br>        &#125;<br>    &#125;<br>     *q=*p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取key和value"><a href="#获取key和value" class="headerlink" title="获取key和value"></a>获取key和value</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//key=value</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">strkv</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *src, <span class="hljs-keyword">char</span> *key, <span class="hljs-keyword">char</span> *value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *p, *q;<br>    <span class="hljs-keyword">int</span> len;<br>    p = <span class="hljs-built_in">strchr</span>(src, <span class="hljs-string">&#x27;=&#x27;</span>);<br>    q = <span class="hljs-built_in">strchr</span>(src, <span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; q != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        *q = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-built_in">strncpy</span>(key, src, p-src);<br>        <span class="hljs-built_in">strcpy</span>(value, p+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">configItem</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> key[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> value[<span class="hljs-number">50</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_config</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * configFilePath, struct configItem* configVar, <span class="hljs-keyword">int</span> configNum)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    FILE * pfile;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">50</span>] = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">char</span> key[<span class="hljs-number">50</span>] = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">char</span> value[<span class="hljs-number">50</span>] = <span class="hljs-string">&quot;&quot;</span>;<br><br>    pfile = fopen(configFilePath, <span class="hljs-string">&quot;r&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (pfile == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;配置文件打开失败!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-built_in">strlen</span>(buf));<br>    <span class="hljs-keyword">while</span> (fgets(buf, <span class="hljs-number">50</span>, pfile))<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(key, <span class="hljs-number">0</span>, <span class="hljs-built_in">strlen</span>(key));<br>        <span class="hljs-built_in">memset</span>(value, <span class="hljs-number">0</span>, <span class="hljs-built_in">strlen</span>(value));<br>        <span class="hljs-keyword">if</span> (strkv(buf, key, value)) <span class="hljs-comment">//获取key和value</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; configNum; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(key, configVar[i].key) != <span class="hljs-literal">NULL</span>)<br>                &#123;<br>                    <span class="hljs-built_in">strcpy</span>(configVar[i].value, value);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取失败\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-built_in">strlen</span>(buf));<br>    &#125;<br>    fclose(pfile);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取MAC地址"><a href="#获取MAC地址" class="headerlink" title="获取MAC地址"></a>获取MAC地址</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_if_macaddr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name, <span class="hljs-keyword">char</span> *macaddr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-keyword">int</span> rc;<br>    <span class="hljs-keyword">int</span> sockfd;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> mac[<span class="hljs-number">6</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span><br><br>    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (sockfd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;socket() failed, err: %d,[%s]\n&quot;</span>, errno, strerror(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">snprintf</span>(ifr.ifr_name, (<span class="hljs-keyword">sizeof</span>(ifr.ifr_name) - <span class="hljs-number">1</span>), <span class="hljs-string">&quot;%s&quot;</span>, name);<br><br>    rc = ioctl(sockfd, SIOCGIFFLAGS, &amp;ifr);<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ioctl(%s, SIOCGIFFLAGS) failed, err: %d,[%s]\n&quot;</span>, name, errno, strerror(errno));<br>        ret = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">goto</span> out;<br>    &#125;<br><br>    rc = ioctl(sockfd, SIOCGIFHWADDR, &amp;ifr);<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ioctl(%s, SIOCGIFHWADDR, %s) failed, err: %d,[%s]\n&quot;</span>, name, macaddr, errno,<br>               strerror(errno));<br>        ret = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">goto</span> out;<br>    &#125;<br><br>    <span class="hljs-built_in">memcpy</span>(mac, ifr.ifr_hwaddr.sa_data, <span class="hljs-keyword">sizeof</span>(mac));<br>    <span class="hljs-built_in">sprintf</span>(macaddr, <span class="hljs-string">&quot;%02X:%02X:%02X:%02X:%02X:%02X&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)mac[<span class="hljs-number">0</span>], (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)mac[<span class="hljs-number">1</span>],<br>        (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)mac[<span class="hljs-number">2</span>], (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)mac[<span class="hljs-number">3</span>], (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)mac[<span class="hljs-number">4</span>], (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)mac[<span class="hljs-number">5</span>]);<br>    ret = <span class="hljs-number">0</span>;<br><br>out:<br>    <span class="hljs-keyword">if</span> (sockfd &gt;= <span class="hljs-number">0</span>) &#123;<br>        close(sockfd);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (ret);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="监听子进程状态"><a href="#监听子进程状态" class="headerlink" title="监听子进程状态"></a>监听子进程状态</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//task = -1 监听所有子进程</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_wait</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *task, <span class="hljs-keyword">int</span> *status, <span class="hljs-keyword">int</span> option)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> wait_status;<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        pid = waitpid(*task, &amp;wait_status, option);<br>        <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (errno != EINTR)<br>            &#123;<br>                *task = pid;<br>                <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>            &#125;<br>            usleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (pid &lt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (task != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        *task = pid;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (status != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        *status = wait_status;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>造轮子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>造轮子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>产测工具</title>
    <link href="/2022/01/18/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E4%BA%A7%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/01/18/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E4%BA%A7%E6%B5%8B%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="产测工具"><a href="#产测工具" class="headerlink" title="产测工具"></a>产测工具</h2><p>又是一个多月过去了，在WiFi功能完成差不多后，我又需要做一个产测工具，用于工厂生产和测试。在不知不觉中这个产品的开发已经进入收尾了，要开始产测了。</p><p>产测工具已经完成，并出差去了工厂现场调试，现将方案和遇到的问题做一个记录</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>主要分为五个工作站，分别为固件下载，WiFi校准，功能测试，驻网测试，打印标签。功能和流程如下图：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/mptool.png" alt="流程"></p><h2 id="工具设计"><a href="#工具设计" class="headerlink" title="工具设计"></a>工具设计</h2><p>工具和设备主要使用UDP进行通信，设备作为一个udp server，工具作为client，通过定义好的规则，工具可以向设备发送命令，获取信息，设置参数等</p><p>工具功能：</p><ul><li>固件下载：使用USB进行下载</li><li>WiFi校准：WiFi校准使用第三方工具，产测工具调用wifi校准工具，校准工具成功后产测工具给予反馈</li><li>功能测试：功能测试时设备通过网线和电脑连接，其余网口连接配置了IP地址的交换机，LAN口功能测试时ping对应的IP即可，其他功能测试也是通过UDP进行</li><li>驻网测试：本次未做此功能</li><li>打标签：打印标签时，设备已经完成组装，使用USB连接设备，通过AT命令获取所需信息并一键打印</li></ul><p>流程：</p><ul><li>选择模式，计划登陆成功后，选择需要的功能</li><li>扫描SN：扫描设备的SN</li><li>途程检测：检测设备是否通过之前的功能测试</li><li>开始测试：进行测试</li><li>过站：测试通过就流入下一个工作站，进行下一项测试</li></ul><h2 id="工具实现"><a href="#工具实现" class="headerlink" title="工具实现"></a>工具实现</h2><p>决定使用QT进行开发，QT支持跨平台编译，有很高的可移植性；QT拥有丰富的模块，包括多达 250 个以上的 C++ 类；QT有自己的编辑器Qt Creator，方便配置编译器；QT还拥有很多工具，比如语言家，设计家等，可以更方便的将应用release出来</p><p>QT开发有三种方式，纯代码，纯UI，以及代码UI结合的方式，本次为了提高开发效率使用代码和UI结合的方式进行开发（上一个高通的5G MIFI采用纯代码开发）</p><p>标签打印使用codesoft6，完成标签模板，设置变量，产测工具通过接口将变量传给codesoft6进行打印</p><p>放几张界面图片：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/QTselect.png" alt="select"></p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/QTfunc.png" alt="func"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>流程控制是工具对接工厂的MES系统</p><blockquote><p>MES系统是一套面向制造企业车间执行层的生产信息化管理系统。MES可以为企业提供包括制造数据管理、计划排程管理、生产调度管理、库存管理、质量管理、人力资源管理、工作中心/设备管理、工具工装管理、采购管理、成本管理、项目看板管理、生产过程控制、底层数据集成分析、上层数据集成分解等管理模块，为企业打造一个扎实、可靠、全面、可行的制造协同管理平台。</p></blockquote><p>输入SN后工具和MES系统交互，进行途程检测，检测通过后再进行测试，测试结果通过接口上传给MES系统进行保存和数据分析</p><h2 id="开发遇到的问题"><a href="#开发遇到的问题" class="headerlink" title="开发遇到的问题"></a>开发遇到的问题</h2><ol><li><p>QT使用UDP进行广播</p><p> 使用现成的 QUdpSocket 模块进行开发</p></li><li><p>LAN口ping测试</p><p> 使用QProcess执行CMD命令进行测试</p></li><li><p>进行LAN口ping测试时，界面假死</p><p> 创建线程执行CMD命令</p></li><li><p>打印标签时串口开发</p><p> 使用的QT4.8.7没有对应模块，升级到QT5使用自带的QSerialPort进行开发</p></li><li><p>对接MES系统时，参数异常(QString 转 char* 出现异常)</p><p> 错误写法和正确写法如下，为什么不能一步写完，还没有查找原因：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//错误写法</span><br>QString SN = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">char</span> *sn = SN.<span class="hljs-built_in">toLatin1</span>().<span class="hljs-built_in">data</span>();<br><br><span class="hljs-comment">//正确写法</span><br>QByteArray tmp;<br>QString SN = <span class="hljs-string">&quot;test&quot;</span>;<br>tmp = SN.<span class="hljs-built_in">toLatin1</span>()；<br><span class="hljs-keyword">char</span> *sn = tmp.<span class="hljs-built_in">data</span>();<br></code></pre></td></tr></table></figure></li><li><p>线程中调用某些成员函数失败</p><p> 在不同的线程中使用信号和槽的方式进行函数调用</p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>QT的基础使用是比较简单的，有空的话记录一下QT的一些简单的使用</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WPS功能调试</title>
    <link href="/2021/12/15/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/WPS%E8%B0%83%E8%AF%95/"/>
    <url>/2021/12/15/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/WPS%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="WPS功能调试"><a href="#WPS功能调试" class="headerlink" title="WPS功能调试"></a>WPS功能调试</h2><p>在SDK中添加WiFi模块后发现WPS不能正常使用，于是又有了调试WPS的任务</p><h2 id="WPS介绍"><a href="#WPS介绍" class="headerlink" title="WPS介绍"></a>WPS介绍</h2><p>WPS（Wi-Fi Protected Setup）是Wi-Fi保护设置的英文缩写。WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线局域网安装及安全性能的配置工作。这是一个2007年年初才发布的认证，目的是让消费者可以通过更简单的方式来设置无线网络设备，并且保证有一定的安全性。</p><p>在传统方式下，用户新建一个无线网络时，必须在接入点手动设置网络名（SSID）和安全密钥，然后在客户端验证密钥以阻止“不速之客”的闯入。Wi-Fi Protected Setup能帮助用户自动设置网络名（SSID）、配置最高级别的WPA2安全密钥，具备这一功能的无线产品往往在机身上设计一个功能键，称为WPS按钮，用户只需轻轻按下该按钮或输入PIN码，再经过两三步简单操作即可完成无线加密设置，同时在客户端和路由器之间建立一个安全的连接。</p><p>WPS并不是一项新增的安全性能，只是使现有的安全技术更容易配置。对于一般用户，WPS提供了一个相当简便的加密方法。通过该功能，不仅可将都具有WPS功能的Wi-Fi设备和无线路由器进行快速互联，还会随机产生一个8位数字的字符串作为个人识别号码（PIN）进行加密操作。省去了客户端需要连入无线网络时，必须手动添加网络名称（SSID）及输入冗长的无线加密密码的繁琐过程。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p>经过自己的摸索，发现WPS需要运行wscd，在项目中加入wscd进行编译，发现一些类型不匹配的错误，基本都是有符号和无符号指针的不匹配，简单的进行强转修改，使其能够编译通过并运行</p></li><li><p>运行失败，由于系统是只读系统，默认的路径不能生成文件，所以修改目录，定义了宏，并将TOP_CONFIG_DIR修改为我们定义的宏WIFI_WPS_TMP_DIR，这两个宏的路径如下：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TOP_CONFIG_DIR  <span class="hljs-meta-string">&quot;/etc&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WIFI_WPS_TMP_DIR    <span class="hljs-meta-string">&quot;/tmp/wps&quot;</span></span><br></code></pre></td></tr></table></figure></li><li><p>查到启动命令为：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">$wscd -start -c /tmp/wps/wsc-wlan0.conf -w wlan0 -fi /tmp/wps/wscd-wlan0.fifo -br br-lan -upnp <span class="hljs-number">0</span> -daemon<br></code></pre></td></tr></table></figure><p> 通过命令可以看到需要一份配置文件，指定interface，指定管道路径，建立网桥</p><p> 配置文件最后再说，interface就是WiFi对应的，管道的作用是什么呢，经过一段时间的资料查找，代码查看，发现除了wscd还需要一个iwcontrol的进程，iwcontrol的启动命令如下：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">iwcontrol wlan0 wlan1<br></code></pre></td></tr></table></figure></li><li><p>启动wscd，启动iwcontrol后，发送启动wps的命令后，wscd直接退出，原因是接收到用户定义的信号SIGUSR2。</p><p> 我去查看wsc的源码，发现有捕获信号的操作：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">signal(SIGUSR2, sigHandler_user);<br>signal(SIGTSTP, sigHandler_user);<br></code></pre></td></tr></table></figure><p> 说明代码没有走到这个地方就阻塞了，向上查看代码，找到了阻塞的位置：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C">&#123;<br>    <span class="hljs-keyword">if</span> (stat(pCtx-&gt;fifo_name, &amp;status) == <span class="hljs-number">0</span>)<br>        unlink(pCtx-&gt;fifo_name);<br><br>    <span class="hljs-keyword">if</span> (mkfifo(pCtx-&gt;fifo_name, FIFO_MODE) &lt; <span class="hljs-number">0</span>) &#123;<br>        WSC_DEBUG(<span class="hljs-string">&quot;mkfifo() error1!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* Open fifo, indication event queue of wlan driver */</span><br>    pCtx-&gt;fifo = open(pCtx-&gt;fifo_name, O_RDONLY , <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//WSC_DEBUG(&quot;mkfifo(%s)\n&quot;,pCtx-&gt;fifo_name);</span><br>    <span class="hljs-keyword">if</span> (pCtx-&gt;fifo &lt; <span class="hljs-number">0</span>) &#123;<br>        DEBUG_ERR(<span class="hljs-string">&quot;open fifo(%s) fail!\n&quot;</span>,pCtx-&gt;fifo_name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 打开管道后，会一直阻塞，等待另一个进程的写入，所以说明iwcontrol没有打开这个管道，查看其源码发现，管道的路径是写死的在/etc目录下，和wscd不匹配，所以修改路径解决此问题</p></li><li><p>以上所有问题解决后，WPS并不能连接成功，经过排查发现还需建立一条路由：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;route add -net 239.255.255.250 netmask 255.255.255.255 dev br-lan&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="WSCD配置文件"><a href="#WSCD配置文件" class="headerlink" title="WSCD配置文件"></a>WSCD配置文件</h2><h3 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h3><p>WSCD的默认配置文件参数，手册里都有介绍，其中uuid需要将后12位换成mac地址，其他的是否修改无伤大雅，如果要修改可按照手册修改</p><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><p>WSCD使用的配置文件是由两部分组成，一部分为WIFI的WPS配置，一部分即使默认配置,WPS配置如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">mode：</span><br><span class="hljs-comment">1: ap unconfigured, 2: client unconfigured (enrollee),</span><br><span class="hljs-comment">3: client configured (registrar), 4: ap-proxy configured,</span><br><span class="hljs-comment">5: ap-proxy registrar</span><br><span class="hljs-comment">*/</span><br>mode = <span class="hljs-number">5</span><br>upnp = <span class="hljs-number">0</span>    <span class="hljs-comment">//0-disable， 1-enable</span><br>config_method = <span class="hljs-number">134</span> <span class="hljs-comment">//2-ETH,4-PIN,128-PBC 默认全选即134</span><br>wlan0_wsc_disabled = <span class="hljs-number">0</span> <span class="hljs-comment">//0-enable wps,1-disable wps</span><br>auth_type = <span class="hljs-number">34</span> <span class="hljs-comment">//0-open,2-WPA,32-WPA2 WPA/WPA2即为34</span><br>encrypt_type = <span class="hljs-number">12</span> <span class="hljs-comment">//1-NONE,2-WEP,4-TKIP,8-AES</span><br>connection_type = <span class="hljs-number">1</span><br>manual_config = <span class="hljs-number">0</span><br>network_key = <span class="hljs-number">1234567890</span> <span class="hljs-comment">//password</span><br>ssid = <span class="hljs-string">&quot;default2.4G&quot;</span>    <span class="hljs-comment">//ssid</span><br>pin_code = <span class="hljs-number">74694907</span> <span class="hljs-comment">//pin code</span><br>rf_band = <span class="hljs-number">1</span> <span class="hljs-comment">//1-2.4G,2-5G</span><br>device_name = <span class="hljs-string">&quot;AP&quot;</span> <span class="hljs-comment">//device name</span><br>config_by_ext_reg = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>最终配置要根据WiFi的配置生成，并将其与默认配置合并，以2.4g为例生成配置文件的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update_wsc_conf</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE *fp,*default_fp;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">status</span>;</span><br>    <span class="hljs-keyword">char</span> tmp_buf[<span class="hljs-number">4096</span>];<br>    <span class="hljs-built_in">memset</span>(tmp_buf,<span class="hljs-number">0</span>,<span class="hljs-number">4096</span>);<br>    fp = <span class="hljs-built_in">fopen</span>(WLAN0_WPS_CONF_FILE, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;mode = 5\n&quot;</span>);<br><br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;upnp = 0\n&quot;</span>);<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;config_method = 134\n&quot;</span>);<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;wlan0_wsc_disabled = 0\n&quot;</span>);<br>        <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (m_wifi_24g-&gt;m_auth_mode)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;auth_type = 0\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;auth_type = 32\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;auth_type = 34\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (m_wifi_24g-&gt;m_encryp_type)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;encrypt_type = 4\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;encrypt_type = 8\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;encrypt_type = 12\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;connection_type = 1\n&quot;</span>);<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;manual_config = 0\n&quot;</span>);<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;network_key = %s\n&quot;</span>, m_wifi_24g-&gt;m_password.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;ssid = \&quot;%s\&quot;\n&quot;</span>, m_wifi_24g-&gt;m_ssid.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;pin_code = 74694907\n&quot;</span>);<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;rf_band = 1\n&quot;</span>);<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;device_name = \&quot;AP\&quot;\n&quot;</span>);<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;config_by_ext_reg = 1\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stat</span>(DEFAULT_WPS_CONF_FILE, &amp;status) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;stat() error [%s]!\n&quot;</span>, DEFAULT_WPS_CONF_FILE);<br>        <span class="hljs-built_in">fclose</span>(fp);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((default_fp = <span class="hljs-built_in">fopen</span>(DEFAULT_WPS_CONF_FILE, <span class="hljs-string">&quot;r&quot;</span>)) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fread</span>(tmp_buf, <span class="hljs-number">1</span>, status.st_size+<span class="hljs-number">1</span>, default_fp))<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s&quot;</span>,tmp_buf);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;fread error [%s]!\n&quot;</span>, DEFAULT_WPS_CONF_FILE);<br>            <span class="hljs-built_in">fclose</span>(fp);<br>            <span class="hljs-built_in">fclose</span>(default_fp);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;fopen error [%s]!\n&quot;</span>, DEFAULT_WPS_CONF_FILE);<br>        <span class="hljs-built_in">fclose</span>(fp);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">fclose</span>(fp);<br>    <span class="hljs-built_in">fclose</span>(default_fp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中间件添加WIFI模块</title>
    <link href="/2021/12/14/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%B7%BB%E5%8A%A0WIFI%E6%A8%A1%E5%9D%97/"/>
    <url>/2021/12/14/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%B7%BB%E5%8A%A0WIFI%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="中间件添加WIFI模块"><a href="#中间件添加WIFI模块" class="headerlink" title="中间件添加WIFI模块"></a>中间件添加WIFI模块</h2><p>距离上次更新已经过去了一个半月了，这段时间一直在忙WIFI功能的添加，此项目是直接买的两个wifi芯片，8812和8192，一个是2.4G一个是5G，手里只有一份8812的手册，再也没有其他资料，是一次学习，也是一次挑战。</p><p>此前我是没有做过WiFi相关的中间件的工作，这次因为公司没人（三个中间件开发，负责WiFi的同事离职了），由我来顶上，借此机会也对WiFi进行了基本的学习。</p><h2 id="具体任务"><a href="#具体任务" class="headerlink" title="具体任务"></a>具体任务</h2><p>BSP的同事负责修改、移植WIFI驱动。使用的平台是64位的，没有现成的驱动，需要把找到的32位驱动移植过来(为了节省资金，直接购买的芯片，没有FAE的支持，只能自己搞)</p><p>我负责把WiFi功能添加到SDK中并向上提供接口，所需接口可以大致为以下几个：</p><ul><li>WiFi参数的设置和获取（SSID，密码，加密模式，信道，信道宽度等）</li><li>WiFi黑名单白名单的设置和获取</li><li>WPS PBC/PIN 模式的设置</li><li>WPS状态获取</li><li>WPS取消/关闭</li></ul><p>每个接口又分为2.4G和5G，本次以2.4G为记录，5G和2.4G基本一样，只用改interface即可。</p><h2 id="WIFI启动前的准备工作"><a href="#WIFI启动前的准备工作" class="headerlink" title="WIFI启动前的准备工作"></a>WIFI启动前的准备工作</h2><p>此次没有使用hostapd，也没有使用脚本，采用直接操作驱动，即使用iwpriv的方式进行设置，根据需求先在数据库中建立了三张表，一张表为WiFi参数，一张表为白名单，一张表为黑名单：</p><ul><li>WiFi参数</li></ul><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/WIFI%E5%8F%82%E6%95%B0%E8%A1%A8.png" alt="WiFi参数"></p><ul><li>黑名单</li></ul><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/WiFi%E9%BB%91%E5%90%8D%E5%8D%95.png" alt="黑名单"></p><ul><li>白名单</li></ul><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/WiFi%E7%99%BD%E5%90%8D%E5%8D%95.png" alt="白名单"></p><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><p>黑白名单里均为12位mac地址，就不过多赘述了，主要看一下表中wifi参数</p><table><thead><tr><th>参数</th><th>取值</th><th>意义</th></tr></thead><tbody><tr><td>enable</td><td>0-disable, 1-enable</td><td>WiFi开关</td></tr><tr><td>hidden_ssid</td><td>0-disable, 1-enable</td><td>隐藏WiFi</td></tr><tr><td>ssid</td><td>string</td><td>WiFi名称</td></tr><tr><td>password</td><td>string</td><td>WiFi密码</td></tr><tr><td>max_user</td><td>int</td><td>WiFi最大连接数</td></tr><tr><td>frequency</td><td>0-2.4g, 1-5g</td><td>wifi模式</td></tr><tr><td>auth_mode</td><td>0-open, 4-wpa2, 6-wpa/wpa2 mixed</td><td>加密类型</td></tr><tr><td>encryp_type</td><td>2–TKIP, 8–AES(CCMP), 10–TKIP/AES mixed</td><td>密码组</td></tr><tr><td>band_mode</td><td>1–11b, 2–11g, 4–11a, 8–11n, 64–11ac</td><td>波段选择，可以按位或操作</td></tr><tr><td>channel</td><td>0 for auto channel, 1-14 for 11b/11g</td><td>信道</td></tr><tr><td>band_width</td><td>0-20M, 1-40M, 2-80M</td><td>信道宽度</td></tr><tr><td>mac_enable</td><td>0-disable, 1-enable</td><td>黑白名单功能开关</td></tr><tr><td>mac_mod</td><td>0-黑名单, 1-白名单</td><td>黑白名单模式</td></tr></tbody></table><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>表有了，我们创建一个类来管理和使用表中的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">wifi_24g</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> m_enable;<br>    <span class="hljs-keyword">int</span> m_hiden_ssid;<br>    string m_ssid;<br>    string m_password;<br>    <span class="hljs-keyword">int</span> m_max_user;<br>    <span class="hljs-keyword">int</span> m_frequency;<br>    <span class="hljs-keyword">int</span> m_auth_mode;<br>    <span class="hljs-keyword">int</span> m_encryp_type;<br>    <span class="hljs-keyword">int</span> m_band_mode;<br>    <span class="hljs-keyword">int</span> m_channel;<br>    <span class="hljs-keyword">int</span> m_band_width;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-built_in">wifi_24g</span>(); <span class="hljs-comment">//初始化，将WiFi配置读取并赋值给成员变量</span><br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">wifi_24g</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save_conf_to_db</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//保存WiFi配置</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save_mac_filter</span><span class="hljs-params">(<span class="hljs-keyword">int</span> enable, <span class="hljs-keyword">int</span> mod)</span></span>; <span class="hljs-comment">//保存黑白名单配置</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_mac_filter</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *enable, <span class="hljs-keyword">int</span> *mod)</span></span>; <span class="hljs-comment">//读黑白名单配置</span><br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function">string <span class="hljs-title">read_config</span><span class="hljs-params">(string config_name)</span></span>; <span class="hljs-comment">//读取数据库</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">save_config</span><span class="hljs-params">(string config_name, string config_value)</span></span>; <span class="hljs-comment">//保存到数据库</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="启动WIFI"><a href="#启动WIFI" class="headerlink" title="启动WIFI"></a>启动WIFI</h2><p>启动分为加载驱动，设置参数，up interface，建立网桥这几步，具体实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//m_wifi_24g 为wifi_24g的实例</span><br><span class="hljs-comment">//m_mac_mod,m_mac_enable为黑白名单参数，wifi驱动中只定义了aclmode，0-disable， 1-白名单， 2-黑名单</span><br><span class="hljs-comment">//m_mac_list_black m_mac_list_white 为黑白名单mac地址列表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start_wifi_24g</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    list&lt;string&gt; cmd_list;<br>    list&lt;string&gt; mac_list;<br>    string tmp;<br>    <span class="hljs-keyword">int</span> mod = m_mac_mod + <span class="hljs-number">1</span>;<br><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;insmod /lib/modules/rtl8192es.ko&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib wsc_enable=2&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib regdomain=3&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib opmode=16&quot;</span>);<br>    <span class="hljs-comment">//RF</span><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib channel=&quot;</span> + <span class="hljs-built_in">to_string</span>(m_wifi_24g-&gt;m_channel);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib ch_hi=14&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib ch_low=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib MIMO_TR_mode=3&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib tssi1=0&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib tssi2=0&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib trswitch=0&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib rfe_type=0&quot;</span>);<br>    <span class="hljs-comment">//rate</span><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib basicrates=15&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib oprates=4095&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib autorate=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib rtsthres=2347&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib fragthres=2346&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib expired_time=30000&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib bcnint=100&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib dtimperiod=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib preamble=0&quot;</span>);<br><br>    <span class="hljs-comment">//hiden SSID</span><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib hiddenAP=&quot;</span> + <span class="hljs-built_in">to_string</span>(m_wifi_24g-&gt;m_hiden_ssid);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br>    <span class="hljs-comment">//SSID</span><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib ssid=&quot;</span> + m_wifi_24g-&gt;m_ssid;<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br>    <span class="hljs-comment">//max client number</span><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan1 set_mib stanum=&quot;</span> + m_wifi_24g-&gt;m_max_user;<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br>    <span class="hljs-comment">//acl start</span><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib aclnum=0&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!m_mac_enable)<br>    &#123;<br>        mod = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib aclmode=&quot;</span> + <span class="hljs-built_in">to_string</span>(mod);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br>    <span class="hljs-keyword">if</span> (mod == <span class="hljs-number">1</span>)<br>    &#123;<br>        mac_list = m_mac_list_white;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        mac_list = m_mac_list_black;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mac_list.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (list&lt;string&gt;::iterator it = mac_list.<span class="hljs-built_in">begin</span>(); it != mac_list.<span class="hljs-built_in">end</span>(); ++it)<br>        &#123;<br>            tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib acladdr=&quot;</span> + (*it);<br>            cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//acl end</span><br><br>    <span class="hljs-comment">//Set to 2 to use open system or shared key automatically</span><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib authtype=2&quot;</span>);<br><br>    <span class="hljs-comment">//auth_mode</span><br>    <span class="hljs-keyword">if</span> (m_wifi_24g-&gt;m_auth_mode == <span class="hljs-number">0</span>)<br>    &#123;<br>        cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib encmode=0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib encmode=2&quot;</span>);<br>    &#125;<br><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib 802_1x=0&quot;</span>);<br><br>    <span class="hljs-comment">//band</span><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib band=&quot;</span> + <span class="hljs-built_in">to_string</span>(m_wifi_24g-&gt;m_band_mode);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib deny_legacy=0&quot;</span>);<br><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib use40M=&quot;</span> + <span class="hljs-built_in">to_string</span>(m_wifi_24g-&gt;m_band_width);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib 2ndchoffset=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib shortGI20M=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib shortGI40M=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib shortGI80M=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib ampdu=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib amsdu=0&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib stbc=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib coexist=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib disable_protection=0&quot;</span>);<br><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib groupID=0&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib block_relay=0&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib wifi_specific=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib qos_enable=1&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib guest_access=0&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib countrycode=CN&quot;</span>);<br><br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (m_wifi_24g-&gt;m_auth_mode)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib psk_enable=0&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib psk_enable=2&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib psk_enable=3&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br>        cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib psk_enable=3&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (m_wifi_24g-&gt;m_auth_mode == <span class="hljs-number">2</span> || m_wifi_24g-&gt;m_auth_mode == <span class="hljs-number">6</span>)<br>    &#123;<br>        tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib wpa_cipher=&quot;</span> + <span class="hljs-built_in">to_string</span>(m_wifi_24g-&gt;m_encryp_type);<br>        cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (m_wifi_24g-&gt;m_auth_mode == <span class="hljs-number">4</span> || m_wifi_24g-&gt;m_auth_mode == <span class="hljs-number">6</span>)<br>    &#123;<br>        tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib wpa2_cipher=&quot;</span> + <span class="hljs-built_in">to_string</span>(m_wifi_24g-&gt;m_encryp_type);<br>        cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br>    &#125;<br><br>    <span class="hljs-comment">//password</span><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib passphrase=&quot;</span> + m_wifi_24g-&gt;m_password;<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib gk_rekey=86400&quot;</span>);<br><br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;ifconfig wlan0 up&quot;</span>);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;brctl addif br-lan wlan0&quot;</span>);<br><br>    <span class="hljs-built_in">do_command</span>(<span class="hljs-string">&quot;start_wifi.sh&quot;</span>, cmd_list);<br>&#125;<br></code></pre></td></tr></table></figure><p>do_command函数就是对我之前提到的do_system()的封装，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_command</span><span class="hljs-params">(string file_name, list&lt;string&gt; arg_list)</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE *fp = <span class="hljs-literal">NULL</span>;<br>    string path = <span class="hljs-string">&quot;/tmp/&quot;</span> + file_name;<br><br>    fp = <span class="hljs-built_in">fopen</span>(path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-string">&quot;w+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (list&lt;string&gt;::iterator list_iterator = arg_list.<span class="hljs-built_in">begin</span>(); list_iterator != arg_list.<span class="hljs-built_in">end</span>(); list_iterator++)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s\n&quot;</span>, (*list_iterator).<span class="hljs-built_in">c_str</span>());<br>    &#125;<br><br>    <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;rm -f %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-built_in">fclose</span>(fp);<br><br>    <span class="hljs-keyword">return</span>(<span class="hljs-built_in">do_system</span>(<span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;sh&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_system</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> wait, <span class="hljs-keyword">int</span> *svc_pid, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *exec_file, ...)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> status = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> rc = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">sigset_t</span> chldmask, savemask;<br>    list&lt;string&gt;::iterator list_iterator;<br><br>    <span class="hljs-keyword">if</span> (exec_file == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* now block SIGCHLD */</span><br>    <span class="hljs-built_in">sigemptyset</span>(&amp;chldmask);<br>    <span class="hljs-built_in">sigaddset</span>(&amp;chldmask, SIGCHLD);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sigprocmask</span>(SIG_BLOCK, &amp;chldmask, &amp;savemask))<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-2</span>);<br>    &#125;<br><br>    pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Error. */</span><br>        rc = <span class="hljs-number">-3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Child. */</span><br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **argv;<br>        <span class="hljs-keyword">int</span> argc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **p;<br>        va_list args;<br><br>        n = <span class="hljs-number">1</span>; <span class="hljs-comment">/* =1 for argv[0]. */</span><br>        <span class="hljs-built_in">va_start</span>(args, exec_file);<br>        <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">va_arg</span>(args, <span class="hljs-keyword">char</span> *);)<br>        &#123;<br>            ++n;<br>        &#125;<br>        <span class="hljs-built_in">va_end</span>(args);<br><br>        p = argv = (<span class="hljs-keyword">char</span> **)<span class="hljs-built_in">malloc</span>((n + <span class="hljs-number">1</span>) * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span> *)); <span class="hljs-comment">/* +1 for terminal NULL */</span><br><br>        p[<span class="hljs-number">0</span>] = (<span class="hljs-keyword">char</span> *)exec_file;<br><br>        <span class="hljs-built_in">va_start</span>(args, exec_file);<br>        <span class="hljs-keyword">for</span> (; n--;)<br>        &#123;<br>            *++p = <span class="hljs-built_in">va_arg</span>(args, <span class="hljs-keyword">char</span> *);<br>        &#125;<br>        <span class="hljs-built_in">va_end</span>(args);<br>        *p = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-built_in">sigprocmask</span>(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>        n = <span class="hljs-built_in">execvp</span>(exec_file, argv);<br>        <span class="hljs-built_in">free</span>(argv);<br>        <span class="hljs-built_in">exit</span>(n);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">usleep</span>(<span class="hljs-number">1</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">if</span> (svc_pid)<br>        &#123;<br>            *svc_pid = pid;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (wait)<br>        &#123;<br>            <span class="hljs-keyword">do</span><br>            &#123;<br>                rc = <span class="hljs-built_in">waitpid</span>(pid, &amp;status, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (errno != EINTR)<br>                    &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    rc = <span class="hljs-built_in">WEXITSTATUS</span>(status);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            rc = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">sigprocmask</span>(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> rc;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动WiFi的过程中，参数的意义和数据库基本一致，比较值得注意的是auth_mode</p><ul><li>如果auth_mode为0，encmode为0否则为2，2代表WPA/WPA2模式</li><li>auth_mode为0，psk_enable为0，否则为一一对应的值(代码中的switch为映射关系)</li><li>auth_mode不为0，才需要设置wpa_cipher或wpa2_cipher</li></ul><h2 id="WIFI接口"><a href="#WIFI接口" class="headerlink" title="WIFI接口"></a>WIFI接口</h2><h3 id="WIFI参数配置和获取"><a href="#WIFI参数配置和获取" class="headerlink" title="WIFI参数配置和获取"></a>WIFI参数配置和获取</h3><p>获取参数时只需返回wifi_24g实例的成员变量即可</p><p>配置时，将接收到的值赋给wifi_24g的成员变量，并重新加载WiFi驱动</p><h3 id="WiFi黑名单白名单的设置和获取"><a href="#WiFi黑名单白名单的设置和获取" class="headerlink" title="WiFi黑名单白名单的设置和获取"></a>WiFi黑名单白名单的设置和获取</h3><p>获取黑白名单配置时，只需读出表中数据返回即可</p><p>设置黑白名单时，将数据保存到表中，并执行黑白名单的参数配置命令即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;string&gt; cmd_list;<br>list&lt;string&gt; mac_list;<br>string tmp;<br><span class="hljs-keyword">int</span> mod = m_mac_mod + <span class="hljs-number">1</span>;<br><br>cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;ifconfig wlan0 down&quot;</span>);<br>cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan0 set_mib aclnum=0&quot;</span>);<br><br>cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;ifconfig wlan1 down&quot;</span>);<br>cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;iwpriv wlan1 set_mib aclnum=0&quot;</span>);<br><span class="hljs-keyword">if</span> (!m_mac_enable)<br>&#123;<br>    mod = <span class="hljs-number">0</span>;<br>&#125;<br><br>tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib aclmode=&quot;</span> + <span class="hljs-built_in">to_string</span>(mod);<br>cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br>tmp = <span class="hljs-string">&quot;iwpriv wlan1 set_mib aclmode=&quot;</span> + <span class="hljs-built_in">to_string</span>(mod);<br>cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br><span class="hljs-keyword">if</span> (mod == <span class="hljs-number">1</span>)<br>&#123;<br>    mac_list = m_mac_list_white;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    mac_list = m_mac_list_black;<br>&#125;<br><br><span class="hljs-keyword">for</span> (list&lt;string&gt;::iterator it = mac_list.<span class="hljs-built_in">begin</span>(); it != mac_list.<span class="hljs-built_in">end</span>(); ++it)<br>&#123;<br>    tmp = <span class="hljs-string">&quot;iwpriv wlan0 set_mib acladdr=&quot;</span> + (*it);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br><br>    tmp = <span class="hljs-string">&quot;iwpriv wlan1 set_mib acladdr=&quot;</span> + (*it);<br>    cmd_list.<span class="hljs-built_in">push_back</span>(tmp);<br>&#125;<br><br>cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;ifconfig wlan0 up&quot;</span>);<br>cmd_list.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;ifconfig wlan1 up&quot;</span>);<br><span class="hljs-built_in">do_command</span>(CMD_WIFI_MAC_FILTER, cmd_list);<br></code></pre></td></tr></table></figure><p>wlan0为2.4GWiFi，wlan1为5GWiFi，黑白名单需要同时配置两个WiFi</p><h3 id="WPS-PBC-PIN-模式的设置"><a href="#WPS-PBC-PIN-模式的设置" class="headerlink" title="WPS PBC/PIN 模式的设置"></a>WPS PBC/PIN 模式的设置</h3><p>开启WPS只用下发WPS命令，PBC模式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;wscd -sig_pbc wlan0&quot;</span>);<br></code></pre></td></tr></table></figure><p>PIN模式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">string cmd = <span class="hljs-string">&quot;iwpriv wlan0 set_mib pin=&quot;</span> + pin_code;<br><span class="hljs-built_in">system</span>(cmd.<span class="hljs-built_in">c_str</span>());<br></code></pre></td></tr></table></figure><h3 id="WPS状态获取"><a href="#WPS状态获取" class="headerlink" title="WPS状态获取"></a>WPS状态获取</h3><p>WPS的状态保存在文件中，直接读取”/tmp/wscd_status”即可。状态值如下：</p><p>-1：未启动， 0：启动， 2：超时， 3：成功</p><h3 id="WPS取消-关闭"><a href="#WPS取消-关闭" class="headerlink" title="WPS取消/关闭"></a>WPS取消/关闭</h3><p>WPS取消/关闭时只需要创建一个文件，wscd检测到文件，就会停止WPS：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;touch /tmp/wscd_cancel&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二次代码优化</title>
    <link href="/2021/11/01/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    <url>/2021/11/01/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="第二次优化代码"><a href="#第二次优化代码" class="headerlink" title="第二次优化代码"></a>第二次优化代码</h2><p>这次代码优化主要是对删除文件和文件夹操作进行优化</p><h2 id="删除文件和文件夹"><a href="#删除文件和文件夹" class="headerlink" title="删除文件和文件夹"></a>删除文件和文件夹</h2><p>删除文件和文件夹我习惯使用rm，简单粗暴，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">system(<span class="hljs-string">&quot;rm -f /etc/log_config&quot;</span>); <span class="hljs-comment">//删文件</span><br>system(<span class="hljs-string">&quot;rm -rf /data/traffic&quot;</span>); <span class="hljs-comment">//删文件夹</span><br></code></pre></td></tr></table></figure><p>其实有函数可以完成删除操作，就像之前说的这样可以不用创建进程，优化性能</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink()"></a>unlink()</h2><p>unlink()是用来删除文件的函数，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">unlink</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * pathname)</span></span>;<br></code></pre></td></tr></table></figure><p>unlink()会删除参数pathname 指定的文件. 如果该文件名为最后连接点, 但有其他进程打开了此文件, 则在所有关于此文件的文件描述词皆关闭后才会删除. 如果参数pathname 为一符号连接, 则此连接会被删除。</p><p>成功则返回0, 失败返回-1, 错误原因存于errno</p><p>错误代码：</p><ol><li>EROFS 文件存在于只读文件系统内。</li><li>EFAULT 参数pathname 指针超出可存取内存空间。</li><li>ENAMETOOLONG 参数pathname 太长。</li><li>ENOMEM 核心内存不足。</li><li>ELOOP 参数pathname 有过多符号连接问题。</li><li>EIO I/O 存取错误。</li></ol><p>所以可以简单的封装一下，封装为我们自己的删除文件的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_rm_file</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *file_name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> unlink(file_name);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="remove-、rmdir-和mkdir"><a href="#remove-、rmdir-和mkdir" class="headerlink" title="remove()、rmdir()和mkdir()"></a>remove()、rmdir()和mkdir()</h2><p>remove()函数用于删除指定的文件，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *filename)</span></span>;<br></code></pre></td></tr></table></figure><p>filename为要删除的文件名，可以为一目录。如果参数filename 为一文件，则调用unlink()处理；若参数filename 为一目录，则调用rmdir()来处理。</p><hr><p>rmdir()是删除一个空目录，如果目录不为空则会返回-1，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rmdir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *pathname)</span></span>;<br></code></pre></td></tr></table></figure><hr><p>mkdir()是创建目录，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mkdir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *pathname, <span class="hljs-keyword">mode_t</span> mode)</span></span>;<br></code></pre></td></tr></table></figure><p>其中参数pathname是新创建目录的目录名，mode指定该目录的访问权限，</p><p>由pathname指定的新目录的父目录必须存在，并且调用进程必须具有该父目录的写权限以及pathname涉及的各个分路径目录的搜寻权限</p><p>mode如下：</p><table><thead><tr><th>参    数</th><th>说    明</th><th>参    数</th><th>说    明</th></tr></thead><tbody><tr><td>S_IRUSR</td><td>所有者拥有读权限</td><td>S_IXGRP</td><td>群组拥有执行权限</td></tr><tr><td>S_IWUSR</td><td>所有者拥有写权限</td><td>S_IROTH</td><td>其他用户拥有读权限</td></tr><tr><td>S_IXUSR</td><td>所有者拥有执行权限</td><td>S_IWOTH</td><td>其他用户拥有写权限</td></tr><tr><td>S_IRGRP</td><td>群组拥有读权限</td><td>S_IXOTH</td><td>其他用户拥有执行权限</td></tr><tr><td>S_IWGRP</td><td>群组拥有写权限</td><td></td><td></td></tr></tbody></table><h2 id="nftw"><a href="#nftw" class="headerlink" title="nftw()"></a>nftw()</h2><p>nftw()是遍历目录树的一个函数，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ftw.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nftw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *dirpath,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">int</span> (*fn) (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fpath, <span class="hljs-keyword">const</span> struct stat *sb, <span class="hljs-keyword">int</span> typeflag, struct FTW *ftwbuf),</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">int</span> nopenfd, <span class="hljs-keyword">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><p>nftw()遍历位于文件夹dirpath下面的目录树，为每个树的节点调用一次fn()。默认情况下，当前目录总是先于其包含的文件和子目录被处理（先序遍历）。</p><p>为了避免调用进程的文件描述符被用尽，nopenfd指定了 nftw() 能够同时打开目录的最大数量。当搜索深度超过这个值，nftw() 将会变慢，因为目录必须被关掉和重新打开。nftw() 为目录树中的每一层至多使用一个文件描述符。</p><p>对于在树中发现的每个节点，nftw() 为其调用带四个参数的函数fn(),这四个参数为fpath，sb，typeflag和ftwbuf。fpath是节点的路径名，它可以表示为相对路径或者绝对路径，相对路径是相对调用进程的当前工作目录。sb是为fpath调用stat函数所返回的指向stat结构体的指针。typeflag是一个整型值，取下面其中一个值：</p><ul><li>FTW_F fpath是一个普通文件。</li><li>FTW_D fpath是一个目录。</li><li>FTW_DNR fpath是一个不能被读的目录。</li><li>FTW_DP fpath是一个目录，并且 flag参数被指定为FTW_DEPTH。（如果flags没有被指定为- FTW_DEPTH，那么访问目录时使用的typeflag总会是FTW_D。）路径fpath下的所有文件和子目录已经被处理过了。</li><li>FTW_NS 在不是符号链接的fpath上调用stat失败。可能的原因是调用者对父目录有读权限，所以文件名fpath可以被看到，但是没有执行权限，所以执行stat失败。由sb指向的缓存的内容是未定义的。</li><li>FTW_SL fpath是一个符号链接，flags被设置为FTW_PHYS。</li><li>FTW_SLN fpath是一个指向不存在的文件的符号链接。（只在FTW_PHYS未被设置的时候才会发生。）</li></ul><p>当调用fn() 时 nftw() 为其提供的第四个参数是一个类型为FTW的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FTW</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">int</span> base;<br>   <span class="hljs-keyword">int</span> level;<br>&#125;;<br></code></pre></td></tr></table></figure><p>base是在fpath中给定的路径名中的文件名（basename）的偏移量。level是fpath在目录树中相对于根节点的深度（dirpath的深度为0）。</p><p>为了让树的遍历停止，fn() 返回一个非0值；这个值将会成为 nftw() 的返回值。只要fn()返回值为0，nftw()将会继续遍历目录树，直到要么遍历完整个树，在这种情况下会返回0；要么遇到一个错误（比如malloc失败），在这种情况下返回-1。</p><p>因为nftw() 使用动态数据结构，遍历目录树时唯一的安全退出方法就是从fn() 返回一个非0值。为了让信号量终止遍历时不会造成内存泄露，让处理这设置一个全局的flag，由fn()对这个全局flag进行检查。不要使用longjmp,除非程序将会终止（terminate）。</p><p>nftw() 的flags 参数由下面的一个或者多个的flags进行或运算所形成：</p><ul><li><p>FTW_ACTIONRETVAL (从 glibc 2.3.3开始支持)</p><p> 如果这个特定的glibc的flag被设置，nftw() 会对从fn()返回的值进行不同处理。fn() 应该返回下面的值的其中一个：</p><ul><li>FTW_CONTINUE:让nftw() 继续正常进行。</li><li>FTW_SKIP_SIBLINGS:如果fn() 返回这个值，当前节点的兄弟节点会被跳过，处理从父节点继续进行。</li><li>FTW_SKIP_SUBTREE:如果一个目录节点调用fn()(typeflag是FTW_D),这个返回值会阻止这个目录下的对象作为参数传递给fn()。- nftw() 继续处理当前目录的下一个兄弟节点。</li><li>FTW_STOP:这会导致nftw() 立即返回FTW_STOP。</li><li>其它返回值可以关联到未来的一些新的行为上；fn() 不应该返回除上面列出的值之外的其它值。</li><li>为了从&lt;ftw.h&gt;中获取FTW_ACTIONRETVAL的定义，必须在Include任何头文件之前定义功能测试宏_GNU_SOURCE。</li></ul></li><li><p>FTW_CHDIR</p><p>  如果设置了这个flag,在处理每个目录的内容之前，都会chdir(2)到这个目录。如果程序需要在fpath所在的某个目录做一些操作，这就是有用的。（指定这个flag不会对作为fn 参数fpath进行传递的路径名有影响。）</p></li><li><p>FTW_DEPTH</p><p>  设置这个flag会进行后序遍历，也就是在处理完当前目录的内容和它的所有子目录之后才会调用fn() (默认情况下，每个目录在它的内容之前被处理。)</p></li><li><p>FTW_MOUNT</p><p>  设置这个flag，就会停留在同一个文件系统中（也就是不会跨越挂载点）。</p></li><li><p>FTW_PHYS</p><p>  设置这个flag，就不会跟随符号链接。（这是你想做的。）如果不设置这个flag，就会跟随符号链接，但是没有文件会被报告两次。</p><p>  如果FTW_PHYS没有被设置，但是设置了FTW_DEPTH，那么函数fn() 就永远不会被自己是自己子孙的目录调用到。</p></li></ul><p>我们想实现删除文件夹，所以要从最后一层向前删除，所以要使用后序遍历，然后在回调函数fn中将这个文件删除，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">unlink_cb</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fpath, <span class="hljs-keyword">const</span> struct stat *sb, <span class="hljs-keyword">int</span> typeflag, struct FTW *ftwbuf)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> rv = remove(fpath);<br><br>    <span class="hljs-keyword">if</span> (rv)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;remove(%s) failed, rv: %d, err: %d\n&quot;</span>, fpath, rv, errno);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> rv;<br>&#125;<br><br><span class="hljs-function">e_ret <span class="hljs-title">do_rmdir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> rv = nftw(path, unlink_cb, <span class="hljs-number">64</span>, FTW_DEPTH | FTW_PHYS);<br><br>    <span class="hljs-keyword">if</span> ((rv != <span class="hljs-number">0</span>) &amp;&amp; (errno != ENOENT))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次代码优化</title>
    <link href="/2021/10/24/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    <url>/2021/10/24/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前大部分代码都是写好的，只是偶尔修改一下bug，添加新需求。只要代码不报错，没有语法错误，就能入库，现在新公司提交代码后，CTO也就是技术总监（现在软件部有一个BSP负责驱动和编译，两个嵌入式开发负责写代码，还有一个CTO负责整个团队）会仔细的review代码，并给出修改意见，这才是review的作用，原公司的review感觉只是个形式。</p><p>这第一次代码优化就是根据CTO的意见进行的，非常感谢他，如果没有人提出意见我可能一直不会有新的提升与收获。</p><p>下面就以此记录修改的地方</p><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>由于项目中的类很多，有很多类都使用了同一个文件、程序、字符串、字符长度等，在使用时为了图方便都写到了对应的cpp文件上方，造成了有很多意义重复的宏定义</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>创建一个公有的头文件，里面只放宏定义，有两个及以上的类要用到的宏定义都放到这个头文件中，需要使用时包含这个头文件即可</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="现状-1"><a href="#现状-1" class="headerlink" title="现状"></a>现状</h3><p>代码中有很多绝对数字，让人费解，如下,是判断当前网络设置的代码，对于数字让其他人很难理解：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (mode == <span class="hljs-number">11</span>)<br>&#123;<br>    <span class="hljs-comment">/*TO DO*/</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode == <span class="hljs-number">18</span>)<br>&#123;<br>    <span class="hljs-comment">/*TO DO*/</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode == <span class="hljs-number">19</span>)<br>&#123;<br>    <span class="hljs-comment">/*TO DO*/</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">/*TO DO*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>使用枚举让代码更加便于阅读,更方便维护：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">MS_NETWORK_MODE</span></span><br><span class="hljs-class">&#123;</span><br>    MODE_LTE_ONLY=<span class="hljs-number">11</span>,<br>    MODE_LTE_5GNR=<span class="hljs-number">18</span>,<br>    MODE_5GNR_SA=<span class="hljs-number">19</span>,<br>    MODE_AUTO=<span class="hljs-number">40</span><br>&#125;;<br><br><span class="hljs-keyword">if</span> (mode == MODE_LTE_ONLY)<br>&#123;<br>    <span class="hljs-comment">/*TO DO*/</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode == MODE_LTE_5GNR)<br>&#123;<br>    <span class="hljs-comment">/*TO DO*/</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode == MODE_5GNR_SA)<br>&#123;<br>    <span class="hljs-comment">/*TO DO*/</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">/*TO DO*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h2><p>在代码中经常使用system()完成一些Linux的操作，如复制，移动，删除等。我一直认为这是很正常的，直到CTO给我说了system()的调用过成我才知道为什么要优化他。</p><p>system()的调用过程为：</p><ol><li>当参数为NULL时直接返回，不为NULL时fork()一个子进程</li><li>父进程等待，子进程使用execl 启动shell命令</li><li>shell去执行我们下发的命令</li><li>执行完成，父进程等待结束，返回结果</li></ol><p>第三步是多余的操作，相当于shell又fork了一个进程去执行我们的命令(不知道这样理解是否正确)，完全可以跳过这步，于是有了自己实现的do_system(),也就是上篇服务管理系统的核心函数，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_system</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> wait, <span class="hljs-keyword">int</span> *svc_pid, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *exec_file, <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt; arg_list)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> status;<br>    <span class="hljs-keyword">sigset_t</span> chldmask, savemask;<br>    <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt;::iterator list_iterator;<br><br>    <span class="hljs-keyword">if</span> (exec_file == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* now block SIGCHLD */</span><br>    sigemptyset(&amp;chldmask);<br>    sigaddset(&amp;chldmask, SIGCHLD);<br>    <span class="hljs-keyword">if</span> (sigprocmask(SIG_BLOCK, &amp;chldmask, &amp;savemask))<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-2</span>);<br>    &#125;<br><br>    pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Error. */</span><br>        sigprocmask(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-3</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Child. */</span><br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **argv;<br>        <span class="hljs-keyword">int</span> argc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **p;<br>        n = arg_list.size();<br>        p = argv = (<span class="hljs-keyword">char</span> **)<span class="hljs-built_in">malloc</span>((n + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span> *));<br>        p[argc] = (<span class="hljs-keyword">char</span> *)exec_file;<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (list_iterator = arg_list.begin(); list_iterator != arg_list.end(); list_iterator++)<br>            &#123;<br>                p[++argc] = (<span class="hljs-keyword">char</span>*)(*list_iterator).c_str();<br>                ALOGI(<span class="hljs-string">&quot;param:%s&quot;</span>,p[argc]);<br>            &#125;<br>        &#125;<br><br>        p[++argc] = <span class="hljs-literal">NULL</span>;<br><br>        n = execvp(exec_file, argv);<br>        <span class="hljs-comment">/* on error */</span><br>        <span class="hljs-built_in">free</span>(argv);<br>        <span class="hljs-built_in">exit</span>(n);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">/* Parent. */</span><br>        <span class="hljs-keyword">if</span> (svc_pid)<br>        &#123;<br>            *svc_pid = pid;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (wait)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (waitpid(pid, &amp;status, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (errno != EINTR)<br>                &#123;<br>                    sigprocmask(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>                    <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            sigprocmask(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    sigprocmask(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> WEXITSTATUS(status);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中参数列表list可以换成C语言的多参数，以便在C中使用，关于多参数我后面也会单独记录</p><h2 id="多命令连续使用system"><a href="#多命令连续使用system" class="headerlink" title="多命令连续使用system()"></a>多命令连续使用system()</h2><h3 id="现状-2"><a href="#现状-2" class="headerlink" title="现状"></a>现状</h3><p>在代码中有连续的system()调用，即使换成我们自己实现的system()也会fork很多进程，例如备份文件的代码，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C">system(<span class="hljs-string">&quot;rm -f /usr/www/Backup.zip&quot;</span>);<br>system(<span class="hljs-string">&quot;mkdir /usr/www/backup&quot;</span>);<br>system(<span class="hljs-string">&quot;mkdir /usr/www/backup/etc&quot;</span>);<br>system(<span class="hljs-string">&quot;mkdir /usr/www/backup/data&quot;</span>);<br>system(<span class="hljs-string">&quot;mkdir /usr/www/backup/cgi&quot;</span>);<br>system(<span class="hljs-string">&quot;cp -p /data/cgi/admin_config /usr/www/backup/cgi/admin_config&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">...cp file more</span><br><span class="hljs-comment">*/</span><br>system(<span class="hljs-string">&quot;cp -p /etc/timezone /usr/www/backup/timezone&quot;</span>);<br><br>system(<span class="hljs-string">&quot;tar -zcf /usr/www/Backup.zip /usr/www/backup/*&quot;</span>);<br>system(<span class="hljs-string">&quot;rm -rf /usr/www/backup&quot;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="优化-2"><a href="#优化-2" class="headerlink" title="优化"></a>优化</h3><p>将命令全部写到文件中，然后调用shell命令运行文件，避免多次调用system()，简单实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SHELL_FILE   /tmp/cmd_shell.sh</span><br><br>FILE *fp;<br><span class="hljs-keyword">char</span> line[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">if</span> ((fp = fopen(SHELL_FILE, <span class="hljs-string">&quot;w&quot;</span>)) != <span class="hljs-literal">NULL</span>)<br>&#123;<br>    <span class="hljs-built_in">sprintf</span>(line, <span class="hljs-string">&quot;rm -f /usr/www/Backup.zip\n&quot;</span>);<br>    fwrite(line, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>), <span class="hljs-built_in">strlen</span>(line), fp);<br>    <span class="hljs-built_in">sprintf</span>(line, <span class="hljs-string">&quot;mkdir /usr/www/backup\n&quot;</span>);<br>    fwrite(line, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>), <span class="hljs-built_in">strlen</span>(line), fp);<br>    <span class="hljs-built_in">sprintf</span>(line, <span class="hljs-string">&quot;mkdir /usr/www/backup/etc\n&quot;</span>);<br>    fwrite(line, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>), <span class="hljs-built_in">strlen</span>(line), fp);<br>    <span class="hljs-built_in">sprintf</span>(line, <span class="hljs-string">&quot;mkdir /usr/www/backup/data\n&quot;</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    more sprintf</span><br><span class="hljs-comment">    */</span><br>    fflush(fp);<br>    fclose(fp);<br>&#125;<br>system(<span class="hljs-string">&quot;sh &quot;</span>SHELL_FILE);<br></code></pre></td></tr></table></figure><h2 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf()"></a>fprintf()</h2><h3 id="现状-3"><a href="#现状-3" class="headerlink" title="现状"></a>现状</h3><p>在写文件时，不止上面那种执行命令的情况，包括修改配置文件需要写很多行,使用sprintf()，不仅要多调用一次fwrite，还要担心定义的数组line是否会越界，所以可以直接使用fprintf()</p><h3 id="优化-3"><a href="#优化-3" class="headerlink" title="优化"></a>优化</h3><p>fprintf()我之前也是没有用过的，也是看到建议后才知道，真惭愧，优化后的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SHELL_FILE   /tmp/cmd_shell.sh</span><br><br>FILE *fp;<br><span class="hljs-keyword">if</span> ((fp = fopen(SHELL_FILE, <span class="hljs-string">&quot;w&quot;</span>)) != <span class="hljs-literal">NULL</span>)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;rm -f /usr/www/Backup.zip\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;mkdir /usr/www/backup\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;mkdir /usr/www/backup/etc\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;mkdir /usr/www/backup/data\n&quot;</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    more fprintf</span><br><span class="hljs-comment">    */</span><br>    fflush(fp);<br>    fclose(fp);<br>&#125;<br>system(<span class="hljs-string">&quot;sh &quot;</span>SHELL_FILE);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次优化的点就是这些了，后续有继续优化会及时更新新的文章.</p><p>我买一本 《Effective Modem C++》，抽空阅读后也会将收获（笔记）记录下来</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务管理程序踩坑总结</title>
    <link href="/2021/10/20/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    <url>/2021/10/20/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="闲言碎语"><a href="#闲言碎语" class="headerlink" title="闲言碎语"></a>闲言碎语</h2><p>现在是23:58，因为我写的服务管理程序存在种种问题，今天是第二天加班到十一点半了，今天看样子是解决了问题，原因竟然是让人啼笑皆非的低级问题，在此记录一下</p><h2 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h2><p>为了提升系统性能，便于管理由我们自己启动的服务而写的一个总的管理程序。逻辑为：读取配置文件，killall 配置的服务（防止管理程序重启后多开服务），启动配置中的服务，如果配置文件中的服务被杀死，接收到信号后重启，具体原理如下图：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86.png" alt="服务管理"></p><p>此程序的第一版就如上图，后开考虑到管理程序自己可能出意外，被脚本重启，在读取配置文件后先killall一次配置文件中的程序，然后再去启动，killall的动作和启动调用的是同一个函数，函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_system</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *svc_pid, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *exec_file, list&lt;string&gt; arg_list)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> status;<br>    <span class="hljs-keyword">sigset_t</span> chldmask, savemask;<br>    list&lt;string&gt;::iterator list_iterator;<br><br>    <span class="hljs-keyword">if</span> (exec_file == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* now block SIGCHLD */</span><br>    <span class="hljs-built_in">sigemptyset</span>(&amp;chldmask);<br>    <span class="hljs-built_in">sigaddset</span>(&amp;chldmask, SIGCHLD);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sigprocmask</span>(SIG_BLOCK, &amp;chldmask, &amp;savemask))<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-2</span>);<br>    &#125;<br><br>    pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Error. */</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-3</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Child. */</span><br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **argv;<br>        <span class="hljs-keyword">int</span> argc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **p;<br>        n = arg_list.<span class="hljs-built_in">size</span>();<br>        p = argv = (<span class="hljs-keyword">char</span> **)<span class="hljs-built_in">malloc</span>((n + <span class="hljs-number">2</span>) * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span> *));<br>        p[argc] = (<span class="hljs-keyword">char</span> *)exec_file;<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (list_iterator = arg_list.<span class="hljs-built_in">begin</span>(); list_iterator != arg_list.<span class="hljs-built_in">end</span>(); list_iterator++)<br>            &#123;<br>                p[++argc] = (<span class="hljs-keyword">char</span>*)(*list_iterator).<span class="hljs-built_in">c_str</span>();<br>            &#125;<br>        &#125;<br><br>        p[++argc] = <span class="hljs-literal">NULL</span>;<br><br>        n = <span class="hljs-built_in">execvp</span>(exec_file, argv);<br>        <span class="hljs-comment">/* on error */</span><br>        <span class="hljs-built_in">free</span>(argv);<br>        <span class="hljs-built_in">exit</span>(n);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">/* Parent. */</span><br>        <span class="hljs-keyword">if</span> (svc_pid)<br>        &#123;<br>            *svc_pid = pid;<br>        &#125;<br><br>    <span class="hljs-built_in">sigprocmask</span>(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行killall时：do_system(NULL, “killall”, service_list)</p><p>启动程序时：do_system(NULL, service_name, arg_list)</p><h2 id="第一个坑"><a href="#第一个坑" class="headerlink" title="第一个坑"></a>第一个坑</h2><p>在挂测时发现低概率会有僵尸进程产生，而且总是第一个进程变成僵尸进程，看log发现在killall执行完的信号来之前，就开始启动进程了，因为killall中服务的顺序是启动的逆序，所以很可能启动第一个进程时，正好也在kill他，由于进程在初始化，不能完全杀死，没有信号的返回，导致了僵尸进程的产生，所以修改了函数，可以选择是否等待结果返回：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_system</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> wait, <span class="hljs-keyword">int</span> *svc_pid, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *exec_file, list&lt;string&gt; arg_list)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> status;<br>    <span class="hljs-keyword">sigset_t</span> chldmask, savemask;<br>    list&lt;string&gt;::iterator list_iterator;<br><br>    <span class="hljs-keyword">if</span> (exec_file == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* now block SIGCHLD */</span><br>    <span class="hljs-built_in">sigemptyset</span>(&amp;chldmask);<br>    <span class="hljs-built_in">sigaddset</span>(&amp;chldmask, SIGCHLD);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sigprocmask</span>(SIG_BLOCK, &amp;chldmask, &amp;savemask))<br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-2</span>);<br>    &#125;<br><br>    pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Error. */</span><br>        <span class="hljs-built_in">sigprocmask</span>(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-3</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* Child. */</span><br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **argv;<br>        <span class="hljs-keyword">int</span> argc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> **p;<br>        n = arg_list.<span class="hljs-built_in">size</span>();<br>        p = argv = (<span class="hljs-keyword">char</span> **)<span class="hljs-built_in">malloc</span>((n + <span class="hljs-number">1</span>) * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span> *));<br>        p[argc] = (<span class="hljs-keyword">char</span> *)exec_file;<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (list_iterator = arg_list.<span class="hljs-built_in">begin</span>(); list_iterator != arg_list.<span class="hljs-built_in">end</span>(); list_iterator++)<br>            &#123;<br>                p[++argc] = (<span class="hljs-keyword">char</span>*)(*list_iterator).<span class="hljs-built_in">c_str</span>();<br>                <span class="hljs-built_in">ALOGI</span>(<span class="hljs-string">&quot;param:%s&quot;</span>,p[argc]);<br>            &#125;<br>        &#125;<br><br>        p[++argc] = <span class="hljs-literal">NULL</span>;<br><br>        n = <span class="hljs-built_in">execvp</span>(exec_file, argv);<br>        <span class="hljs-comment">/* on error */</span><br>        <span class="hljs-built_in">free</span>(argv);<br>        <span class="hljs-built_in">exit</span>(n);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">/* Parent. */</span><br>        <span class="hljs-keyword">if</span> (svc_pid)<br>        &#123;<br>            *svc_pid = pid;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (wait)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">waitpid</span>(pid, &amp;status, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (errno != EINTR)<br>                &#123;<br>                    <span class="hljs-built_in">sigprocmask</span>(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>                    <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">sigprocmask</span>(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">sigprocmask</span>(SIG_SETMASK, &amp;savemask, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">WEXITSTATUS</span>(status);<br>&#125;<br></code></pre></td></tr></table></figure><p>当第一个参数传1时，就会一直wait直到执行完成，这样就可以在执行一些shell命令时传1，在启动服务时传0</p><h2 id="第二个坑"><a href="#第二个坑" class="headerlink" title="第二个坑"></a>第二个坑</h2><p>整个程序的结构分为三层，最上面是service，负责和client通讯，保证可以通过client端打开/关闭/刷新配置等操作；最下面是进程的实例类，存放进程的信息包括name，pid，enable，status等；中间层维护一个进程信息的列表，主要逻辑在这一层完成，所以这一层使用了单例</p><p>在终于爬出第一个坑之后，发现程序还是有概率启动进程失败，这次是一个都没启动，使用strace查看后发现是死锁了，为了找到哪里死锁也是耗费了一晚上的时间，最后恍然大悟是单例造成的死锁：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*单例的实现*/</span><br><br><br>function *function:<span class="hljs-built_in">get_instance</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span>(!m_function)<br>    &#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lk</span><span class="hljs-params">(m_mutex)</span></span>;<br>        <span class="hljs-keyword">if</span>(!m_function)<br>        &#123;<br>              m_function = std::shared_ptr&lt;Singleton&gt;(<span class="hljs-keyword">new</span> m_function);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> m_function;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我本意是启动一个线程负责开机的一些操作，包括处理信号，所以有了下面的写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signal_function</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sig)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (sig)<br>    &#123;<br>    <span class="hljs-keyword">case</span> SIGCHLD:<br>        <span class="hljs-comment">/* Serivce Dead? Check It. */</span><br>        function::<span class="hljs-built_in">get_instance</span>()-&gt;<span class="hljs-built_in">check_srv</span>();<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br>function::<span class="hljs-built_in">function</span>()<br>&#123;<br>    <span class="hljs-comment">/*读取配置文件*/</span><br>    <span class="hljs-built_in">read_conf</span>();<br>    <span class="hljs-comment">/*开一个线程并执行run函数*/</span><br>    <span class="hljs-built_in">start</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">function::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">signal</span>(SIGCHLD, signal_function);<br><br>    <span class="hljs-built_in">killall_srv</span>();<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">startall_srv</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在最上层调用get_instance()时，会上锁然后去创建function类，这时注册好信号处理函数后，恰好来了信号，此时单例还没创建完成，锁也还没释放，就又去get_instance()导致又上了一次锁，此问题的解决方法共有三种：</p><h3 id="信号处理函数不使用单例"><a href="#信号处理函数不使用单例" class="headerlink" title="信号处理函数不使用单例"></a>信号处理函数不使用单例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++">function *g_func = <span class="hljs-literal">NULL</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signal_function</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sig)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (sig)<br>    &#123;<br>    <span class="hljs-keyword">case</span> SIGCHLD:<br>        <span class="hljs-comment">/* Serivce Dead? Check It. */</span><br>        g_gunc-&gt;<span class="hljs-built_in">check_srv</span>();<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br>function::<span class="hljs-built_in">function</span>()<br>&#123;<br>    g_gunc = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-comment">/*读取配置文件*/</span><br>    <span class="hljs-built_in">read_conf</span>();<br>    <span class="hljs-comment">/*开一个线程并执行run函数*/</span><br>    <span class="hljs-built_in">start</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不用线程"><a href="#不用线程" class="headerlink" title="不用线程"></a>不用线程</h3><p>不开线程，run()函数只是个普通函数，上层初始化完成后，主动调用run() ：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br>service::<span class="hljs-built_in">service</span>()<br>&#123;<br>    m_function = function::<span class="hljs-built_in">get_instance</span>();<br>    m_function-&gt;<span class="hljs-built_in">run</span>();<br>&#125;<br><br>function::<span class="hljs-built_in">function</span>()<br>&#123;<br>    <span class="hljs-comment">/*读取配置文件*/</span><br>    <span class="hljs-built_in">read_conf</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="在main-中注册信号处理函数"><a href="#在main-中注册信号处理函数" class="headerlink" title="在main()中注册信号处理函数"></a>在main()中注册信号处理函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">signal</span>(SIGCHLD, signal_function);<br>    <span class="hljs-function">service <span class="hljs-title">m_service</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1000</span> * <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>写代码要认真，要提前规划好，不要想到哪写到哪</li><li>使用锁要小心，仔细分析代码走向，防止死锁，或者没有锁住</li><li>不能停止学习，尤其是编程语言的基础数据结构和特性</li></ol><p>其实解决问题并不难，难的是发现问题在哪，两个晚上的时间基本都花在了找原因上了，所以要学习掌握一些基本的调试工具，如gdb, strace, valgrind等，接下来我会抽空学习并总结一下这三个工具的使用方法</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dnsmasq的配置</title>
    <link href="/2021/10/17/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/dnsmasq/"/>
    <url>/2021/10/17/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/dnsmasq/</url>
    
    <content type="html"><![CDATA[<h1 id="dnsmasq的配置"><a href="#dnsmasq的配置" class="headerlink" title="dnsmasq的配置"></a>dnsmasq的配置</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在新的项目中，这个项目就是做一个5G CPE，可以简单的理解为可以插卡的路由器，可以使用SIM卡的网络，这样一个设备需要通过网线或wifi给连接的设备分配IP和解析DNS，我们选择使用dnsmasq来完成这部分功能</p><h2 id="dnsmasq介绍"><a href="#dnsmasq介绍" class="headerlink" title="dnsmasq介绍"></a>dnsmasq介绍</h2><p>DNSmasq是一个小巧且方便地用于配置 DNS 和 DHCP 的工具，适用于小型网络，它提供了DNS功能和可选择的DHCP功能。</p><p>它服务那些只在本地适用的域名，这些域名是不会在全球的DNS服务器中出现的。DHCP服务器和DNS服务器结合，并且允许DHCP分配的地址能在DNS中正常解析，DNSmasq支持静态和动态两种DHCP配置方式。因此如果需要快速搭建一个DNS服务或者DHCP服务，那么可以使用此程序来搭建</p><h2 id="配置项介绍"><a href="#配置项介绍" class="headerlink" title="配置项介绍"></a>配置项介绍</h2><p>dnsmasq的功能非常多，这里只介绍此次用到的功能及其配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta">#</span><span class="bash">监听的端口，dns默认53端口，如果设置为0则禁止DNS功能</span><br>prot=53<br><span class="hljs-meta">#</span><span class="bash">绑定开关</span><br>bind-interfaces<br><span class="hljs-meta">#</span><span class="bash">绑定接口</span><br>interface=eth0<br><span class="hljs-meta">#</span><span class="bash">DHCP地址池和租期</span><br>dhcp-range=192.168.1.100,192.168.200,24<br><span class="hljs-meta">#</span><span class="bash">dhcp配置遵循RFC 2132</span><br><span class="hljs-meta">#</span><span class="bash">option1 为子网掩码</span><br>dhcp-option=1,255.255.255.255<br><span class="hljs-meta">#</span><span class="bash">option3 网关地址</span><br>dhcp-option=3，192.168.1.1<br><span class="hljs-meta">#</span><span class="bash">DNS server的地址列表</span><br>dhcp-option=6,192.168.1.1<br><span class="hljs-meta">#</span><span class="bash">当设备请求不在地址池的地址时主动拒绝</span><br>dhcp-authoritative<br><span class="hljs-meta">#</span><span class="bash">租期文件地址</span><br>dhcp-leasefile=/etc/dnsmasq.leases<br><span class="hljs-meta">#</span><span class="bash">DNS地址文件</span><br>resolv-file=/etc/resolv.conf<br><span class="hljs-meta">#</span><span class="bash">自定义域名解析地址</span><br>address=/carl.myhome.com/192.168.1.1<br></code></pre></td></tr></table></figure><p>这样我们就简单的配置好了拥有DNS和DHCP功能的dnsmasq</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>在项目中，dns和DHCP的配置不是一成不变的，用户可以修改DHCP的配置，DNS也是随着SIM卡驻网而改变，所以我们实现一个配置函数，可以根据用户的配置来更改配置文件，使用C++实现，用户设置的参数已经保存到成员变量，这里实现一个成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//使用到的结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dhcp_info</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> enable;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> lease;<br>    string ipaddr;<br>    string netmask;<br>    string start_ip;<br>    string end_ip;<br>&#125; dhcp_info;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_lan::dnsmasq_config</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE *fp;<br>    <span class="hljs-keyword">char</span> cmd[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-keyword">if</span> ((fp = <span class="hljs-built_in">fopen</span>(DNSMASQ_DHCPS_CONFIG_FILE, <span class="hljs-string">&quot;w&quot;</span>)) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> == mdhcp_info.enable)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;port=53\n&quot;</span>);<br><br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;bind-interfaces\n&quot;</span>);<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;interface=%s\n&quot;</span>, IFNAME);<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;dhcp-range=%s,%s,%dh\n&quot;</span>, mdhcp_info.start_ip.<span class="hljs-built_in">c_str</span>(), mdhcp_info.end_ip.<span class="hljs-built_in">c_str</span>(), mdhcp_info.lease);<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;dhcp-option=1,%s\n&quot;</span>, mdhcp_info.netmask.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;dhcp-option=3,%s\n&quot;</span>, mdhcp_info.ipaddr.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;dhcp-option=6,%s\n&quot;</span>, mdhcp_info.ipaddr.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;dhcp-authoritative\n&quot;</span>);<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;dhcp-leasefile=%s\n&quot;</span>, LEASES_FILE);<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;resolv-file=%s\n&quot;</span>, DNS_FILE);<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;address=/%s/%s\n&quot;</span>, HOSTNAME, mdhcp_info.ipaddr.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-built_in">fflush</span>(fp);<br>            <span class="hljs-built_in">fclose</span>(fp);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;port=53\n&quot;</span>);<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;resolv-file=%s\n&quot;</span>, DNS_FILE);<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;address=/%s/%s\n&quot;</span>, MYNAME, mdhcp_info.ipaddr.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-built_in">fflush</span>(fp);<br>            <span class="hljs-built_in">fclose</span>(fp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open %s failed&quot;</span>, DNSMASQ_DHCPS_CONFIG_FILE);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(cmd, <span class="hljs-number">0x00</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(cmd));<br>    <span class="hljs-built_in">sprintf</span>(cmd, <span class="hljs-string">&quot;ifconfig  %s %s netmask  %s&quot;</span>, IFNAME, mdhcp_info.ipaddr.<span class="hljs-built_in">c_str</span>(), mdhcp_info.netmask.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">system</span>(cmd) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cmd:%s failed&quot;</span>, cmd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;killall dnsmasq&quot;</span>);<br><br>    <span class="hljs-built_in">memset</span>(cmd, <span class="hljs-number">0x00</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(cmd));<br>    <span class="hljs-built_in">sprintf</span>(cmd, <span class="hljs-string">&quot;/usr/bin/dnsmasq -C %s  -k -x %s &amp;&quot;</span>, DNSMASQ_DHCPS_CONFIG_FILE, DNSMASQ_PID_FILE);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">system</span>(cmd) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cmd:%s failed&quot;</span>, cmd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户可以选择是否使用DHCP，配置完成后记得重启才能生效，在项目中是不会这样粗暴的重启，也不会使用printf打印error信息，此处代码仅供参考</p>]]></content>
    
    
    <categories>
      
      <category>linux常用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux常用工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>getprop的坑</title>
    <link href="/2021/10/13/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/getprop%E7%9A%84%E5%9D%91/"/>
    <url>/2021/10/13/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/getprop%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="getprop的坑"><a href="#getprop的坑" class="headerlink" title="getprop的坑"></a>getprop的坑</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>上一篇记录提到，我所在的公司在研发一款5G设备，由于合作公司提供的5G模块存在一些问题（系统BUG），我们决定自己做一个服务管理程序，来控制系统中展讯原生的服务如modem_ctrl，模块厂的服务和我们自己的sdk，以及系统需要的开源服务如dnsmasq，thttpd等。上文也提到了开发人员就三个，主力编程人员两个，所以这个任务落到了我的头上</p><p>我花了一个星期完成了这项工作，把设备上要启动的服务都加到了管理服务的配置文件中，删除了/etc/rc5.d文件夹中对应服务的启动链接文件，第一次测试就成功通过了。于是写了bat脚本进行稳定性测试(检查设备如果驻网成功就重启)，两个小时后，我发现脚本卡住了，一看原来电脑上都不显示设备了！！！</p><h2 id="分析错误原因"><a href="#分析错误原因" class="headerlink" title="分析错误原因"></a>分析错误原因</h2><p>还好之前板子出过问题，已经在芯片上把串口接出来了，连上串口，登陆系统发现一切正常，造成没有adb的原因是USB模式变成了默认的36（我们的设备39才有ADB），查看串口日志发现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">wait for usb ready, idVendor open fail, loop = 3<br>starting FG650 usbmode config<br>wait for usb ready, idVendor open fail, loop = 4<br>property service is not ready !<br>property service is not ready !<br>property service is not ready !<br>39<br>usb default = 36<br>persist.sys.usbmode = default<br></code></pre></td></tr></table></figure><p>明明打印了39说明读到了，为什么又走到了default呢，我找到了usb的脚本,其中获取usb模式的方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">usb_mode_num=36<br>usb_mode_profile=&quot;persist.sys.usbmode&quot;<br><br>echo &quot;starting FG650 usbmode config&quot;<br><br>usb_mode_num=$(getprop $usb_mode_profile)<br><br>echo &quot;$usb_mode_num&quot;<br></code></pre></td></tr></table></figure><p>我怀疑39的后面可能有不显示的特殊字符，导致脚本继续向下运行判断模式的时候匹配不到，于是我加了打印，打印一下usb_mode_num的十六进制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">wait for usb ready, idVendor open fail, loop = 4<br>property service is not ready !<br>property service is not ready !<br>property service is not ready !<br>39<br>00000000  70 72 6f 70 65 72 74 79  20 73 65 72 76 69 63 65  |property service|<br>00000010  20 69 73 20 6e 6f 74 20  72 65 61 64 79 20 21 20  | is not ready ! |<br>00000020  0a 70 72 6f 70 65 72 74  79 20 73 65 72 76 69 63  |.property servic|<br>00000030  65 20 69 73 20 6e 6f 74  20 72 65 61 64 79 20 21  |e is not ready !|<br>00000040  20 0a 70 72 6f 70 65 72  74 79 20 73 65 72 76 69  | .property servi|<br>00000050  63 65 20 69 73 20 6e 6f  74 20 72 65 61 64 79 20  |ce is not ready |<br>00000060  21 20 0a 33 39                                    |! .39|<br></code></pre></td></tr></table></figure><p>原来不是后面多了，上面的提示都被赋给了usb_mode_num，由此可以看出getprop在执行时是被阻塞的，直到执行成功，并得到所有的输出</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>知道getprop会阻塞后，解决就很简单了，执行两次getprop就好了，第一个成功后说明文件已经准备好了，这时第二个就一定可以拿到正确的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">usb_mode_num=36<br>usb_mode_profile=&quot;persist.sys.usbmode&quot;<br><br>echo &quot;starting FG650 usbmode config&quot;<br><br>usb_mode_num=$(getprop $usb_mode_profile)<br>usb_mode_num=$(getprop $usb_mode_profile)<br><br>echo &quot;$usb_mode_num&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="/2021/09/23/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/09/23/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近原公司老板和一家公司合作开了个新公司，派遣了包括我在内的四位程序猿过去做开发，从原公司离职又到新公司报到，结果这刚过一个月就有一位离职又回原公司了，可能是新公司从零开始代码量太大，他不适应的原因吧</p><p>言归正传，在新公司我们在做5G设备，毕竟现在5G比较火，我之前在原公司使用的是高通X55平台，没错就是iphone12使用的基带芯片，突出一个贵字，所以销量惨淡，一直在各种送样送客户，所以新公司直接上国内展讯平台，就是要便宜，完全从零开发实在是痛苦，所以在征得原公司领导的同意后，决定使用我之前部门的base库，这个库包含了C/S通讯，数据库操作，xml操作，上报时间，观察者模式等常用的基类和功能类，在使用这个库的时候出现了double free导致程序dump，一个在高通平台使用了两年的库，为什么拿到展讯平台就出问题呢？</p><h2 id="分析错误原因"><a href="#分析错误原因" class="headerlink" title="分析错误原因"></a>分析错误原因</h2><p>经过gdb 调试定位到了出问题的类，由于版权原因我简单的表达一下这个类及base库中的使用方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">data_uri</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">char</span> *m_uri;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">data_uri</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *uri)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> uri_length = <span class="hljs-number">0</span>;<br><br>        uri_length = <span class="hljs-built_in">strlen</span>(uri);<br>        m_uri = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[uri_length + <span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">strcpy</span>(m_uri, uri);<br>    &#125;;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">data_uri</span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_uri != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">delete</span>[] m_uri;<br>        &#125;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> uri[<span class="hljs-number">128</span>] = <span class="hljs-string">&quot;db:teacher#limei&quot;</span>;<br>    data_uri m_data_uri = <span class="hljs-built_in">data_uri</span>(uri);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个类在构造函数中分配了内存，但是没有定义拷贝构造函数，也没有重写运算描述符，这时会走默认构造函数，只是简单的把指针拷贝过去，即等号右边的 data_uri(uri) 先调用构造函数，然后调用拷贝构造函数，将类拷贝给 m_data_uri，注意两边的类中m_uri指向的是同一片内存，这时等号右边没有用了，会调用析构函数，由于左右两边指向同一块内存，所以当函数运行结束，左边再次析构的时候就会double free</p><p>解决方法：</p><ol><li>写一个拷贝构造函数</li><li>直接使用数组，这样不用再写拷贝构造函数，坏处是不能动态分配内存比较浪费空间</li></ol><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><p>关于这个问题，大多讲的很复杂，我这里说下我的个人见解</p><ol><li>深拷贝和浅拷贝是对于类中有指向堆内存的指针时，不同的拷贝行为的描述</li><li>浅拷贝指简单的赋值，没有新内存的分配，双方指向同一块内存</li><li>深拷贝指开辟新的内存，将前者内存中的内容拷贝到自己的内存中</li></ol><p>这样应该就很好理解上面为什么会出错了，如果不写拷贝构造函数，默认拷贝构造函数可以完成对象的数据成员简单的复制,对象的数据资源是由指针指向的堆时,默认的拷贝构造函数只是将指针复制</p><h2 id="为什么之前不出错"><a href="#为什么之前不出错" class="headerlink" title="为什么之前不出错"></a>为什么之前不出错</h2><p>这个问题就有意思了，为什么这个很容易发现的错误，却在项目中使用了两年呢？经过查看编译过程，发现在高通平台的交叉编译器会优化编译。编译器实现省略创建一个只是为了初始化另一个同类型对象的临时对象，即编译器认为不需要先构造再拷贝再析构，太麻烦了完全没必要，所以就把右边的操作全部优化掉了，直接构造一次就可以了</p><p>展讯平台设置了编译选项：-fno-elide-constructors，这个选项将关闭这种优化，强制编译器在所有情况下都调用拷贝构造函数，man手册描述如下：</p><blockquote><p>The C++ standard allows an implementation to omit creating a temporary that is only used to initialize another object of the same type. Specifying this option disables that optimization, and forces G++ to call the copy constructor in all cases.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包</title>
    <link href="/2021/08/11/CMake/%E6%89%93%E5%8C%85/"/>
    <url>/2021/08/11/CMake/%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>当想要把程序给他人使用时，需要用到打包功能，我们将构建一个安装包，在顶层CMakeLists末尾添加如下信息：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">include</span>(InstallRequiredSystemLibraries)<br><span class="hljs-keyword">set</span>(CPACK_RESOURCE_FILE_LICENSE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/License.txt&quot;</span>)<br><span class="hljs-keyword">set</span>(CPACK_PACKAGE_VERSION_MAJOR <span class="hljs-string">&quot;$&#123;Tutorial_VERSION_MAJOR&#125;&quot;</span>)<br><span class="hljs-keyword">set</span>(CPACK_PACKAGE_VERSION_MINOR <span class="hljs-string">&quot;$&#123;Tutorial_VERSION_MINOR&#125;&quot;</span>)<br><span class="hljs-keyword">include</span>(CPack)<br></code></pre></td></tr></table></figure><p>include(InstallRequiredSystemLibraries)的作用是包含程序在当前系统用到的一些库</p><p>接下来是设置一些包的信息，比如LICENSE和版本号</p><p>include(CPack)就是引入打包功能</p><p>在构建完成后可以执行以下命令进行打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> cpack</span><br>CPack: Create package using STGZ<br>CPack: Install projects<br>CPack: - Run preinstall target for: tutorial<br>CPack: - Install project: tutorial<br>CPack: Create package<br>CPack: - package: /home/carl/test/cmake/build/tutorial-..1-Linux.sh generated.<br>CPack: Create package using TGZ<br>CPack: Install projects<br>CPack: - Run preinstall target for: tutorial<br>CPack: - Install project: tutorial<br>CPack: Create package<br>CPack: - package: /home/carl/test/cmake/build/tutorial-..1-Linux.tar.gz generated.<br>CPack: Create package using TZ<br>CPack: Install projects<br>CPack: - Run preinstall target for: tutorial<br>CPack: - Install project: tutorial<br>CPack: Create package<br>CPack: - package: /home/carl/test/cmake/build/tutorial-..1-Linux.tar.Z generated.<br></code></pre></td></tr></table></figure><p>如果需要指定压缩工具，可以使用-G选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> cpack -G ZIP</span><br>CPack: Create package using ZIP<br>CPack: Install projects<br>CPack: - Run preinstall target for: tutorial<br>CPack: - Install project: tutorial<br>CPack: Create package<br>CPack: - package: /home/carl/test/cmake/build/tutorial-..1-Linux.zip generated.<br></code></pre></td></tr></table></figure><p>如果想要包含源码需要如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> cpack -G ZIP --config CPackSourceConfig.cmake</span><br>CPack: Create package using ZIP<br>CPack: Install projects<br>CPack: - Install directory: /home/carl/test/cmake<br>CPack: Create package<br>CPack: - package: /home/carl/test/cmake/build/tutorial-..1-Source.zip generated.<br></code></pre></td></tr></table></figure><p>注意：在构建源码包时，如果构建目录在代码目录里，就如我一样，会将编译目录也打包进去，所以应该在代码目录之外建立编译目录，这是个坑，现在亲自踩了下</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>CMake的基础教程到此就结束了，基本的编译和测试都已经介绍完成，官方文档的内容不止于此，其最后一章的打包调试和发布，也是挺有用的，后面用到再进行学习</p>]]></content>
    
    
    <categories>
      
      <category>CMake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装与测试</title>
    <link href="/2021/08/11/CMake/%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/08/11/CMake/%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="安装与测试"><a href="#安装与测试" class="headerlink" title="安装与测试"></a>安装与测试</h1><p>安装规则相当简单：MathFunctions我们要安装库和头文件，而对于应用程序，我们要安装可执行文件和配置的头文件</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装使用到的命令是install()，在CMakelists的末尾中添加：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-comment"># MathFunctions/CMakeLists</span><br><span class="hljs-keyword">install</span>(TARGETS MathFunctions DESTINATION lib)<br><span class="hljs-keyword">install</span>(FILES MathFunctions.h DESTINATION <span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-comment"># CMakeLists</span><br><span class="hljs-keyword">install</span>(TARGETS Tutorial DESTINATION bin)<br><span class="hljs-keyword">install</span>(FILES <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span><br>    DESTINATION <span class="hljs-keyword">include</span><br>)<br></code></pre></td></tr></table></figure><p>添加以后在执行cmake和make以后，需要执行安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> sudo make install</span><br>[ 50%] Built target MathFunctions<br><span class="hljs-meta">[100%</span><span class="bash">] Built target Tutorial</span><br>Install the project...<br>-- Install configuration: &quot;&quot;<br>-- Installing: /usr/local/bin/Tutorial<br>-- Installing: /usr/local/include/config.h<br>-- Installing: /usr/local/lib/libMathFunctions.a<br>-- Installing: /usr/local/include/MathFunctions.h<br></code></pre></td></tr></table></figure><p>安装路径默认为/usr/local/ ，如果想要自定义安装路径的话需要在cmake时进行配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> cmake .. -DCMAKE_INSTALL_PREFIX=<span class="hljs-string">&quot;/home/carl/installdir&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> make</span><br><span class="hljs-meta">$</span><span class="bash"> sudo make install</span><br>[ 50%] Built target MathFunctions<br><span class="hljs-meta">[100%</span><span class="bash">] Built target Tutorial</span><br>Install the project...<br>-- Install configuration: &quot;&quot;<br>-- Up-to-date: /home/carl/installdir/bin/Tutorial<br>-- Up-to-date: /home/carl/installdir/include/config.h<br>-- Up-to-date: /home/carl/installdir/lib/libMathFunctions.a<br>-- Up-to-date: /home/carl/installdir/include/MathFunctions.h<br></code></pre></td></tr></table></figure><p>在install()中，可执行文件，库，头文件等都可以使用TARGETS，FILES多用于一些配置文件，脚本等</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试要使用ctest工具，按照官方文档在顶层CMakelists末尾中添加如下信息：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">enable_testing</span>()<br><br><span class="hljs-comment"># does the application run</span><br><span class="hljs-keyword">add_test</span>(NAME Runs <span class="hljs-keyword">COMMAND</span> Tutorial <span class="hljs-number">25</span>)<br><br><span class="hljs-comment"># does the usage message work?</span><br><span class="hljs-keyword">add_test</span>(NAME Usage <span class="hljs-keyword">COMMAND</span> Tutorial)<br><span class="hljs-keyword">set_tests_properties</span>(Usage<br>  PROPERTIES PASS_REGULAR_EXPRESSION <span class="hljs-string">&quot;Usage:.*number&quot;</span><br>  )<br><br><span class="hljs-comment"># define a function to simplify adding tests</span><br><span class="hljs-keyword">function</span>(do_test <span class="hljs-keyword">target</span> arg result)<br>  <span class="hljs-keyword">add_test</span>(NAME Comp<span class="hljs-variable">$&#123;arg&#125;</span> <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;target&#125;</span> <span class="hljs-variable">$&#123;arg&#125;</span>)<br>  <span class="hljs-keyword">set_tests_properties</span>(Comp<span class="hljs-variable">$&#123;arg&#125;</span><br>    PROPERTIES PASS_REGULAR_EXPRESSION <span class="hljs-variable">$&#123;result&#125;</span><br>    )<br><span class="hljs-keyword">endfunction</span>(do_test)<br><br><span class="hljs-comment"># do a bunch of result based tests</span><br>do_test(Tutorial <span class="hljs-number">4</span> <span class="hljs-string">&quot;4 is 2&quot;</span>)<br>do_test(Tutorial <span class="hljs-number">9</span> <span class="hljs-string">&quot;9 is 3&quot;</span>)<br>do_test(Tutorial <span class="hljs-number">5</span> <span class="hljs-string">&quot;5 is 2.236&quot;</span>)<br>do_test(Tutorial <span class="hljs-number">7</span> <span class="hljs-string">&quot;7 is 2.645&quot;</span>)<br>do_test(Tutorial <span class="hljs-number">25</span> <span class="hljs-string">&quot;25 is 5&quot;</span>)<br>do_test(Tutorial -<span class="hljs-number">25</span> <span class="hljs-string">&quot;-25 is [-nan|nan|0]&quot;</span>)<br>do_test(Tutorial <span class="hljs-number">0.0001</span> <span class="hljs-string">&quot;0.0001 is 0.01&quot;</span>)<br></code></pre></td></tr></table></figure><p>enable_testing():使用ctest模块</p><p>add_test():增加一个测试，函数原型为add_test(&lt;name&gt; &lt;command&gt; [&lt;arg&gt;…])，分别是测试名称，可执行文件名称，参数</p><p>set_tests_properties():为add_test()设置属性，原型为set_tests_properties(test1 [test2…] PROPERTIES prop1 value1 prop2 value2)</p><p>PROPERTIES 包括有WILL_FAIL、PASS_REGULAR_EXPRESSION、FAIL_REGULAR_EXPRESSION。代码中用到的是PASS_REGULAR_EXPRESSION，如果设置了这个属性，测试输出将根据指定的正则表达式进行检查，并且至少有一个正则表达式必须匹配，否则测试失败</p><p>为了简化操作，定义了一个名为do_test的函数，函数的功能就是对结果进行检测，看是否符合期望</p><p>重新构建项目，并到可执行文件下执行ctest，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> ctest</span><br>Test project /home/carl/test/cmake/build<br>    Start 1: Runs<br>1/9 Test #1: Runs .............................   Passed    0.00 sec<br>    Start 2: Usage<br>2/9 Test #2: Usage ............................   Passed    0.00 sec<br>    Start 3: Comp4<br>3/9 Test #3: Comp4 ............................   Passed    0.00 sec<br>    Start 4: Comp9<br>4/9 Test #4: Comp9 ............................   Passed    0.00 sec<br>    Start 5: Comp5<br>5/9 Test #5: Comp5 ............................   Passed    0.00 sec<br>    Start 6: Comp7<br>6/9 Test #6: Comp7 ............................   Passed    0.00 sec<br>    Start 7: Comp25<br>7/9 Test #7: Comp25 ...........................   Passed    0.00 sec<br>    Start 8: Comp-25<br>8/9 Test #8: Comp-25 ..........................   Passed    0.00 sec<br>    Start 9: Comp0.0001<br>9/9 Test #9: Comp0.0001 .......................   Passed    0.00 sec<br><span class="hljs-meta"></span><br><span class="hljs-meta">100%</span><span class="bash"> tests passed, 0 tests failed out of 9</span><br><br>Total Test time (real) =   0.01 sec<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CMake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加库</title>
    <link href="/2021/08/11/CMake/%E6%B7%BB%E5%8A%A0%E5%BA%93/"/>
    <url>/2021/08/11/CMake/%E6%B7%BB%E5%8A%A0%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="添加库"><a href="#添加库" class="headerlink" title="添加库"></a>添加库</h1><p>我们可以将平方根函数重写并编译成库，用来代替数学库中的函数</p><h2 id="添加并使用MathFunctions库"><a href="#添加并使用MathFunctions库" class="headerlink" title="添加并使用MathFunctions库"></a>添加并使用MathFunctions库</h2><p>首先创建一个名为MathFunctions的文件夹，先写好函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* MathFunctions.h */</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">mysqrt</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* mysqrt.c */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// a hack square root calculation using simple operations</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">mysqrt</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">double</span> result = x;<br><br>  <span class="hljs-comment">// do ten iterations</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (result &lt;= <span class="hljs-number">0</span>) &#123;<br>      result = <span class="hljs-number">0.1</span>;<br>    &#125;<br>    <span class="hljs-keyword">double</span> delta = x - (result * result);<br>    result = result + <span class="hljs-number">0.5</span> * delta / result;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接着写CMakeLists，因为这个编译生成库属于子项目，相关语言参数都会从上一层的CMakeLists传过来，所以我们只用写一行，这行的作用就是通过mysqrt.c生成一个名为MathFunctions的库：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">add_library</span>(MathFunctions mysqrt.c)<br></code></pre></td></tr></table></figure><p>编写主CMakeLists，添加子项目目录，以及使用MathFunctions库：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-comment"># set the cmake version</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-comment"># set the project name</span><br><span class="hljs-keyword">project</span>(tutorial VERSION <span class="hljs-number">0.0</span>.<span class="hljs-number">1</span> LANGUAGES C)<br><br><span class="hljs-comment"># The set is used to set the value of a parameter</span><br><span class="hljs-keyword">set</span> (MAJOR_VERSION <span class="hljs-number">0</span>)<br><span class="hljs-keyword">set</span> (MINOR_VERSION <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># set the configure file</span><br><span class="hljs-keyword">configure_file</span>(<br>    <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/config.h.in&quot;</span><br>    <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span><br>)<br><br><span class="hljs-comment"># add subdirectory</span><br><span class="hljs-keyword">add_subdirectory</span>(MathFunctions)<br><br><span class="hljs-comment"># add the executable</span><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.c)<br><br><span class="hljs-comment"># set link libraries</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial PUBLIC MathFunctions m)<br><br><span class="hljs-comment"># set include directories</span><br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br>                          <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                          <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/MathFunctions&quot;</span><br>                          )<br></code></pre></td></tr></table></figure><p>指定了子项目的目录以后，会自动寻找子目录的CMakeLists，可以看到除了之前的math库，多加了一个MathFunctions库，最后指定了头文件夹的目录</p><p>再修改下程序代码，添加头文件并将函数sqrt()改为mysqrt():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">double</span> outputValue = mysqrt(inputValue);<br></code></pre></td></tr></table></figure><p>到此就完成了库的添加工作</p><h2 id="添加编译条件"><a href="#添加编译条件" class="headerlink" title="添加编译条件"></a>添加编译条件</h2><p>既然有两个库都可以提供相同的功能，那么把选择使用哪个交给用户选择。这个功能在多平台的代码中比较常见，因为平台的不同，一些函数的使用方式或是参数类型也可能不同。CMakeLists如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-comment"># set the cmake version</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-comment"># set the project name</span><br><span class="hljs-keyword">project</span>(tutorial VERSION <span class="hljs-number">0.0</span>.<span class="hljs-number">1</span> LANGUAGES C)<br><br><span class="hljs-comment"># The set is used to set the value of a parameter</span><br><span class="hljs-keyword">set</span> (MAJOR_VERSION <span class="hljs-number">0</span>)<br><span class="hljs-keyword">set</span> (MINOR_VERSION <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># add option USE_MYMATH ,default value is ON</span><br><span class="hljs-keyword">option</span>(USE_MYMATH <span class="hljs-string">&quot;Use tutorial provided math implementation&quot;</span> <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-comment"># set the configure file</span><br><span class="hljs-keyword">configure_file</span>(<br>    <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/config.h.in&quot;</span><br>    <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span><br>)<br><br><span class="hljs-keyword">if</span>(USE_MYMATH)<br>  <span class="hljs-comment"># add subdirectory</span><br>  <span class="hljs-keyword">add_subdirectory</span>(MathFunctions)<br>  <span class="hljs-keyword">list</span>(APPEND EXTRA_LIBS MathFunctions)<br>  <span class="hljs-keyword">list</span>(APPEND EXTRA_INCLUDES <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/MathFunctions&quot;</span>)<br><span class="hljs-keyword">else</span>()<br><span class="hljs-keyword">list</span>(APPEND EXTRA_LIBS m)<br><span class="hljs-keyword">endif</span>()<br><br><br><span class="hljs-comment"># add the executable</span><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.c)<br><br><span class="hljs-comment"># set link libraries</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial PUBLIC <span class="hljs-variable">$&#123;EXTRA_LIBS&#125;</span>)<br><br><span class="hljs-comment"># set include directories</span><br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br>                          <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                          <span class="hljs-variable">$&#123;EXTRA_INCLUDES&#125;</span><br>                          )<br></code></pre></td></tr></table></figure><p>option参数即为选项，可以设置默认为，当前设置为ON，同时使用变量EXTRA_LIBS来存所有需要链接的库，使用EXTRA_INCLUDES来存用到的头文件的目录，最后使用变量替代之前的绝对路径</p><p>更新配置文件，以及代码，添加宏和宏判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* config.h.in */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAJOR_VERSION @MAJOR_VERSION@</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MINOR_VERSION @MINOR_VERSION@</span><br><span class="hljs-meta">#cmakedefine USE_MYMATH</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* tutorial.c */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;config.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> USE_MYMATH</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;MathFunctions.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Usage: %s number\nversion is %d.%d\n&quot;</span>, argv[<span class="hljs-number">0</span>], MAJOR_VERSION, MINOR_VERSION);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">double</span> inputValue = atof (argv[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> USE_MYMATH</span><br>    <span class="hljs-keyword">double</span> outputValue = <span class="hljs-built_in">sqrt</span>(inputValue);<br>    <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;The square root of %g is %g\n&quot;</span>, inputValue, outputValue);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-keyword">double</span> outputValue = mysqrt(inputValue);<br>    <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;The mysqrt root of %g is %g\n&quot;</span>, inputValue, outputValue);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>使用USE_MYMATH选项的默认值，在build目录中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> cmake ..</span><br>-- The C compiler identification is GNU 5.4.0<br>-- Check for working C compiler: /usr/bin/cc<br>-- Check for working C compiler: /usr/bin/cc -- works<br>-- Detecting C compiler ABI info<br>-- Detecting C compiler ABI info - done<br>-- Detecting C compile features<br>-- Detecting C compile features - done<br>-- Configuring done<br>-- Generating done<br>-- Build files have been written to: /home/carl/test/cmake/build<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> make</span><br>-- Configuring done<br>-- Generating done<br>-- Build files have been written to: /home/carl/test/cmake/build<br>Scanning dependencies of target Tutorial<br>[ 50%] Building C object CMakeFiles/Tutorial.dir/tutorial.c.o<br><span class="hljs-meta">[100%</span><span class="bash">] Linking C executable Tutorial</span><br><span class="hljs-meta">[100%</span><span class="bash">] Built target Tutorial</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ./Tutorial 100</span><br>The square root of 100 is 10<br></code></pre></td></tr></table></figure><p>设置USE_MYMATH选项为ON，在build目录中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> cmake .. -DUSE_MYMATH=ON</span><br>-- Configuring done<br>-- Generating done<br>-- Build files have been written to: /home/carl/test/cmake/build<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> make</span><br>Scanning dependencies of target MathFunctions<br>[ 25%] Building C object MathFunctions/CMakeFiles/MathFunctions.dir/mysqrt.c.o<br>[ 50%] Linking C static library libMathFunctions.a<br>[ 50%] Built target MathFunctions<br>Scanning dependencies of target Tutorial<br>[ 75%] Building C object CMakeFiles/Tutorial.dir/tutorial.c.o<br><span class="hljs-meta">[100%</span><span class="bash">] Linking C executable Tutorial</span><br><span class="hljs-meta">[100%</span><span class="bash">] Built target Tutorial</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ./Tutorial 100</span><br>The mysqrt root of 100 is 10<br></code></pre></td></tr></table></figure><p>可以明显的看出在make时多编译了一个我们自己写的库</p><h2 id="添加库的使用要求"><a href="#添加库的使用要求" class="headerlink" title="添加库的使用要求"></a>添加库的使用要求</h2><p>为了更好的控制库的链接和头文件之间的关系，我们将头文件与库进行关联，规定使用库的时候也要使用它的头文件，即在MathFunctions文件夹的CMakelists末尾添加：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Cmake"><span class="hljs-keyword">target_include_directories</span>(MathFunctions<br>          INTERFACE <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span><br>          )<br></code></pre></td></tr></table></figure><p>INTERFACE意味着使用者需要但制造者可能不需要的东西</p><p>这样只要使用这个库就会默认包含它的头文件，如果不使用则不包含。</p><p>接着删除顶层CMakelists对库MathFunctions的头文件的引用：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">if</span>(USE_MYMATH)<br>  <span class="hljs-comment"># add subdirectory</span><br>  <span class="hljs-keyword">add_subdirectory</span>(MathFunctions)<br>  <span class="hljs-keyword">list</span>(APPEND EXTRA_LIBS MathFunctions)<br><span class="hljs-comment">#  list(APPEND EXTRA_INCLUDES &quot;$&#123;PROJECT_SOURCE_DIR&#125;/MathFunctions&quot;)</span><br><span class="hljs-keyword">else</span>()<br><span class="hljs-keyword">list</span>(APPEND EXTRA_LIBS m)<br><span class="hljs-keyword">endif</span>()<br><br><br><span class="hljs-comment"># add the executable</span><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.c)<br><br><span class="hljs-comment"># set link libraries</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial PUBLIC <span class="hljs-variable">$&#123;EXTRA_LIBS&#125;</span>)<br><br><span class="hljs-comment"># set include directories</span><br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br><span class="hljs-comment">#                          &quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                          <span class="hljs-variable">$&#123;EXTRA_INCLUDES&#125;</span><br>                          )<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CMake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开始编写CMake</title>
    <link href="/2021/08/08/CMake/%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99CMake/"/>
    <url>/2021/08/08/CMake/%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99CMake/</url>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>CMake是用来生成Makefile的一个工具，一般编写在名为CMakeLists.txt的文件中</p><h2 id="第一个CMakeLists-txt"><a href="#第一个CMakeLists-txt" class="headerlink" title="第一个CMakeLists.txt"></a>第一个CMakeLists.txt</h2><p>此用于记录CMake的学习，和官方文档的内容大同小异,所有内容都是经过亲自实践，并记录实践过程</p><p>首先是一个示例程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Usage: %s number\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">double</span> inputValue = atof (argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">double</span> outputValue = <span class="hljs-built_in">sqrt</span>(inputValue);<br>    <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;The square root of %g is %g\n&quot;</span>, inputValue, outputValue);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着创建一个CMakeLists.txt文件，对于简单的项目只需三行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CMAKE"><span class="hljs-comment"># set the cmake version</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-comment"># set the project name</span><br><span class="hljs-keyword">project</span>(Tutorial)<br><br><span class="hljs-comment"># add the executable</span><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.c)<br></code></pre></td></tr></table></figure><p>官方文档上的cmake版本是3.10，我不清楚是否是因为我的版本过低所以出现了一些错误，首先执行CMake报错(直接在目录下执行cmake即可)：</p><blockquote><p>–The CXX compiler identification is unknown<br>CMake Error at CMakeLists.txt:4 (project):<br>No CMAKE_CXX_COMPILER could be found.<br>Tell CMake where to find the compiler by setting either the environment<br>variable “CXX” or the CMake cache entry CMAKE_CXX_COMPILER to the full path to the compiler, or to the compiler name if it is in the PATH.<br>–Configuring incomplete, errors occurred!</p></blockquote><p>根据信息可以看到错误原因，找不到编译器，解决方法有两个，第一可以安装g++，第二在指定项目名时指定语言即可：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMAKE"><span class="hljs-keyword">project</span>(tutorial LANGUAGES C)<br></code></pre></td></tr></table></figure><p>CMake运行成功以后，生成了Makefile，但在执行make时又报错了：</p><blockquote><p>Scanning dependencies of target Tutorial<br>[ 50%] Building C object CMakeFiles/Tutorial.dir/tutorial.c.o<br>[100%] Linking C executable Tutorial<br>CMakeFiles/Tutorial.dir/tutorial.c.o: In function ‘main’:<br>tutorial.c:(.text+0x66): undefined reference to ‘sqrt’<br>collect2: error: ld returned 1 exit status<br>CMakeFiles/Tutorial.dir/build.make:94: recipe for target ‘Tutorial’ failed</p></blockquote><p>可以清晰的看到是链接时出错，我们代码使用了&lt;math.h&gt;，所以还需要链接它的库：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Cmake"><span class="hljs-comment"># link libraries</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial m)<br></code></pre></td></tr></table></figure><p>还可以添加版本号，所以第一个完整的可以运行的CMakeLists.txt如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Cmake"><span class="hljs-comment"># set the cmake version</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-comment"># set the project name</span><br><span class="hljs-keyword">project</span>(tutorial VERSION <span class="hljs-number">0.0</span>.<span class="hljs-number">1</span> LANGUAGES C)<br><br><span class="hljs-comment"># add the executable</span><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.c)<br><br><span class="hljs-comment"># link libraries</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial m)<br></code></pre></td></tr></table></figure><p>好吧，我发现官方文档是以C++为例，所以没有遇到我遇到的这些问题，我也不想改了，我就以C语言为例完成CMake的学习吧</p><h2 id="添加配置头文件"><a href="#添加配置头文件" class="headerlink" title="添加配置头文件"></a>添加配置头文件</h2><p>引入配置头文件，使用CMake生成头文件，通过头文件中的宏为项目写入版本号：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Cmake"><span class="hljs-comment"># set the cmake version</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-comment"># set the project name</span><br><span class="hljs-keyword">project</span>(tutorial VERSION <span class="hljs-number">0.0</span>.<span class="hljs-number">1</span> LANGUAGES C)<br><br><span class="hljs-comment"># The set is used to set the value of a parameter</span><br><span class="hljs-keyword">set</span> (MAJOR_VERSION <span class="hljs-number">0</span>)<br><span class="hljs-keyword">set</span> (MINOR_VERSION <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># set the configure file</span><br><span class="hljs-keyword">configure_file</span>(<br>    <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/config.h.in&quot;</span><br>    <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span><br>)<br><br><span class="hljs-comment"># set include dir</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)<br><br><span class="hljs-comment"># add the executable</span><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.c)<br><br><span class="hljs-comment"># link libraries</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial m)<br></code></pre></td></tr></table></figure><p>在代码目录中新建config.h.in文件，并写入两个宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAJOR_VERSION @MAJOR_VERSION@</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MINOR_VERSION @MINOR_VERSION@</span><br></code></pre></td></tr></table></figure><p>在CMake中set就相当于是给变量赋值，即MAJOR_VERSION的值为0，MINOR_VERSION的值为1，在config.h.in中使用@MAJOR_VERSION@就是说这是一个变量，在执行CMake时会将相应的值进行替换。例如生成的config.h为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAJOR_VERSION 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MINOR_VERSION 1</span><br></code></pre></td></tr></table></figure><p>在源代码中包含config.h的都文件，就可以使用CMake来控制版本号了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;config.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Usage: %s number\nversion is %d.%d\n&quot;</span>, argv[<span class="hljs-number">0</span>], MAJOR_VERSION, MINOR_VERSION);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">double</span> inputValue = atof (argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">double</span> outputValue = <span class="hljs-built_in">sqrt</span>(inputValue);<br>    <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;The square root of %g is %g\n&quot;</span>, inputValue, outputValue);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置C-版本"><a href="#设置C-版本" class="headerlink" title="设置C++版本"></a>设置C++版本</h2><p>设置C++版本，这是官方手册上的内容，但是我用的C似乎不用设置，还是在这里介绍一下吧，设置版本很简单，用上面提到的set为CMake本身自带的环境变量设置就可以：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-comment"># specify the C++ standard</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">True</span>)<br></code></pre></td></tr></table></figure><h2 id="使用CMake编译项目"><a href="#使用CMake编译项目" class="headerlink" title="使用CMake编译项目"></a>使用CMake编译项目</h2><p>上面也简单提到过怎么进行编译，这里详细说一下我进行编译的步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 创建编译目录并进入</span></span><br>mkdir build<br>cd build<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 运行cmake生成Makefile到编译目录</span></span><br>cmake ..<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 执行Makefile</span></span><br>make<br></code></pre></td></tr></table></figure><p>这样我们就可以执行我编译出来的程序了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">./Tutorial 100<br>The square root of 100 is 10<br><br>./Tutorial<br>Usage: ./Tutorial number<br>version is 0.1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CMake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用MyString</title>
    <link href="/2021/07/28/%E9%80%A0%E8%BD%AE%E5%AD%90/%E4%BD%BF%E7%94%A8MyString/"/>
    <url>/2021/07/28/%E9%80%A0%E8%BD%AE%E5%AD%90/%E4%BD%BF%E7%94%A8MyString/</url>
    
    <content type="html"><![CDATA[<h1 id="使用MyString"><a href="#使用MyString" class="headerlink" title="使用MyString"></a>使用MyString</h1><p>在使用我们写的函数时，首先要有头文件，方便其他函数调用,其中宏定义是防止重复调用头文件，如果想让C++程序使用我们的函数，可以加上#ifdef __cplusplus</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _MYSTRING_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _MYSTRING_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strlen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strncmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2, <span class="hljs-keyword">int</span> size)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strcmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">startwith</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">endwith</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strcpy</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strncpy</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2,<span class="hljs-keyword">int</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strcat</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strncat</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2,<span class="hljs-keyword">int</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strstr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strnstr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2, <span class="hljs-keyword">int</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strchr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str1, <span class="hljs-keyword">int</span> c)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strrchr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str1, <span class="hljs-keyword">int</span> c)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strpbrk</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strspn</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="使用MyString的方式"><a href="#使用MyString的方式" class="headerlink" title="使用MyString的方式"></a>使用MyString的方式</h2><h3 id="将代码添加进项目"><a href="#将代码添加进项目" class="headerlink" title="将代码添加进项目"></a>将代码添加进项目</h3><p>想要使用自己造的轮子最简单的方法就是直接将其放到要使用的项目中，在项目中添加头文件和源码</p><p>自己使用的话当然没问题，但是其他人想使用呢？我只想让他用，但是我不想让他直到我的轮子是怎么造的，这要怎么做呢？</p><h3 id="提供编译好的库"><a href="#提供编译好的库" class="headerlink" title="提供编译好的库"></a>提供编译好的库</h3><p>我们直接给他成品(库文件)，和说明书(头文件)。他只能按照说明书使用，但是不知道具体的制造过程。就像是我们写程序时第一行下意识的就会写一个#include &lt;stdio.h&gt; 这就是使用了标准库，我们一直在使用一些库，只是没有在意这件事而已</p><h2 id="编译生成库"><a href="#编译生成库" class="headerlink" title="编译生成库"></a>编译生成库</h2><p>在这里使用CMake生成Makefile，然后编译安装到系统目录</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CMAKE"><span class="hljs-comment">## 编译此项目所需cmake的最低版本</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><span class="hljs-comment">## 设置安装路径</span><br><span class="hljs-keyword">set</span>(CMAKE_INSTALL_PREFIX /usr)<br><span class="hljs-comment">## 设置项目名称，版本，编程语言</span><br><span class="hljs-keyword">project</span>(mystrlib VERSION <span class="hljs-number">0.0</span>.<span class="hljs-number">1</span> LANGUAGES C)<br><span class="hljs-comment">## 设置编译目标的类型及源码</span><br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> SHARED<br>        mystring.c<br>        )<br><span class="hljs-comment">## 设置编译目标的属性</span><br><span class="hljs-keyword">set_target_properties</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES<br>        SOVERSION <span class="hljs-number">0.0</span>.<span class="hljs-number">1</span><br>        PUBLIC_HEADER <span class="hljs-string">&quot;mystring.h&quot;</span><br>)<br><span class="hljs-comment">## 设置安装路径</span><br><span class="hljs-keyword">install</span>(TARGETS mystrlib<br>        LIBRARY DESTINATION lib<br>        PUBLIC_HEADER DESTINATION <span class="hljs-keyword">include</span>/mystr<br>)<br></code></pre></td></tr></table></figure><p>将上述内容存进CMakeList.txt，并和代码同级，执行一下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta">$</span><span class="bash"> mkdir build</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> build</span><br><span class="hljs-meta">$</span><span class="bash"> cmake ..</span><br><span class="hljs-meta">$</span><span class="bash"> make &amp;&amp; make install</span><br><br>输出：<br>-- Configuring done<br>-- Generating done<br>-- Build files have been written to: /home/carl/test/startwith/build<br>[ 50%] Building C object CMakeFiles/mystrlib.dir/mystring.c.o<br><span class="hljs-meta">[100%</span><span class="bash">] Linking C shared library libmystrlib.so</span><br><span class="hljs-meta">[100%</span><span class="bash">] Built target mystrlib</span><br><br>Install the project...<br>-- Install configuration: &quot;&quot;<br>-- Installing: /usr/lib/libmystrlib.so.0.0.1<br>-- Installing: /usr/lib/libmystrlib.so<br>-- Installing: /usr/include/mystr/mystring.h<br></code></pre></td></tr></table></figure><p>到此，我们已经成功的编译出来了库文件，并安装到了系统目录中，现在就可以使用它了</p><h2 id="使用编译好的库文件"><a href="#使用编译好的库文件" class="headerlink" title="使用编译好的库文件"></a>使用编译好的库文件</h2><p>简单的测试代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mystr/mystring.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> str1[] = <span class="hljs-string">&quot;hello world!&quot;</span>;<br>    <span class="hljs-keyword">char</span> str2[] = <span class="hljs-string">&quot;h&quot;</span>;<br>    <span class="hljs-keyword">char</span> str3[] = <span class="hljs-string">&quot;!&quot;</span>;<br><br>    <span class="hljs-keyword">int</span> ret = startwith (str1, str2);<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;ret = %d\n&quot;</span>, ret);<br>    ret = endwith (str1, str3);<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;ret = %d\n&quot;</span>, ret);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用gcc编译:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcc test.c</span><br>报错：<br>/tmp/ccAAlrV0.o: In function &#x27;main&#x27;:<br>test.c:(.text+0x4b): undefined reference to &#x27;startwith&#x27;<br>test.c:(.text+0x75): undefined reference to &#x27;endwith&#x27;<br>collect2: error: ld returned 1 exit status<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> gcc test.c -lmystrlib</span><br>别忘了链接上我们的库才能编译成功<br></code></pre></td></tr></table></figure><p>编译出来以后执行一下，看看结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta">$</span><span class="bash">./a.out</span><br>ret = 0<br>ret = 0<br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>写到这里我愈发觉得自己的Makefile和CMake底子太弱，需要好好学习一下同时需要对编译原理进行深入的学习，库和可执行文件的区别在哪里，它在编译的第几阶段，如果程序出了问题怎么找到问题原因并解决？</p><p>问题太多需要一个一个解决，下一篇，我会先学习并整理CMake相关的知识，后面会学习编译与链接的理论知识并分享出来</p><p>愈发觉得这个系列的没有章法，想到哪写到哪，惭愧惭愧</p>]]></content>
    
    
    <categories>
      
      <category>造轮子</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一个轮子MyString</title>
    <link href="/2021/07/21/%E9%80%A0%E8%BD%AE%E5%AD%90/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%BD%AE%E5%AD%90MyString/"/>
    <url>/2021/07/21/%E9%80%A0%E8%BD%AE%E5%AD%90/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%BD%AE%E5%AD%90MyString/</url>
    
    <content type="html"><![CDATA[<h1 id="MyString"><a href="#MyString" class="headerlink" title="MyString"></a>MyString</h1><p>本篇将自己重新实现&lt;string.h&gt;中常用的一些函数，虽然strlen()、strcmp()、strcmp()以及不存在的startwith()和endwith()已经在开篇写过了，但还是在此做一个整理</p><h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h2><p>获取字符串的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strlen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        i++;<br>    &#125;<span class="hljs-keyword">while</span> (str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="strcmp-和strncmp"><a href="#strcmp-和strncmp" class="headerlink" title="strcmp()和strncmp()"></a>strcmp()和strncmp()</h2><p>字符串匹配函数，如果相同则返回0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">匹配前size个字符</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strncmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2, <span class="hljs-keyword">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = my_strlen (str1);<br>    str2_len = my_strlen (str2);<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> == str1_len &amp;&amp; <span class="hljs-number">0</span> == str2_len) || <span class="hljs-number">0</span> == str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (str1_len &lt; size || str2_len &lt; size)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] == str2[i])<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str1[i] &gt; str2[i])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">完全匹配</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strcmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = my_strlen (str1);<br>    str2_len = my_strlen (str2);<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> == str1_len &amp;&amp; <span class="hljs-number">0</span> == str2_len) || <span class="hljs-number">0</span> == str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (str1_len &lt; str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str2_len; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] == str2[i])<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str1[i] &gt; str2[i])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="strcat-和strncat"><a href="#strcat-和strncat" class="headerlink" title="strcat()和strncat()"></a>strcat()和strncat()</h2><p>字符串连接函数，将第二个字符串追加到第一个字符串结尾</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">将str2完整的追加到str1的末尾</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strcat</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = my_strlen (str1);<br>    str2_len = my_strlen (str2);<br><br>    <span class="hljs-keyword">if</span> (str2_len &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == str2_len )<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; i &lt; str2_len; i++)<br>    &#123;<br>        str1[str1_len + i] = str2[i];<br>    &#125;<br><br>    str1[str1_len + i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">将str2的前length个字符追加到str1的末尾</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strncat</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2,<span class="hljs-keyword">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = my_strlen (str1);<br>    str2_len = my_strlen (str2);<br><br>    <span class="hljs-keyword">if</span> (str2_len &lt;= <span class="hljs-number">0</span> || str2_len &lt; length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; i &lt; length; i++)<br>    &#123;<br>        str1[str1_len + i] = str2[i];<br>    &#125;<br><br>    str1[str1_len + i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="strcpy-和strncpy"><a href="#strcpy-和strncpy" class="headerlink" title="strcpy()和strncpy()"></a>strcpy()和strncpy()</h2><p>字符串拷贝函数，将第二个字符串拷贝到第一个字符串中，我给字符串末尾加了结束符，防止出现一些异常</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">将str2拷贝到str1中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strcpy</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str2_len = my_strlen (str2);<br>    <span class="hljs-keyword">if</span> (str2_len &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == str2_len )<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; i&lt; str2_len; i++)<br>    &#123;<br>        str1[i] = str2[i];<br>    &#125;<br>    str1[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">将str2的前length个字符拷贝到str1中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strncpy</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2,<span class="hljs-keyword">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str2_len = my_strlen (str2);<br>    <span class="hljs-keyword">if</span> (str2_len &lt; <span class="hljs-number">0</span> || str2_len &lt; length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == str2_len )<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; i&lt; length; i++)<br>    &#123;<br>        str1[i] = str2[i];<br>    &#125;<br>    str1[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="strstr-和strnstr"><a href="#strstr-和strnstr" class="headerlink" title="strstr()和strnstr()"></a>strstr()和strnstr()</h2><p>字符串查找函数，查找在第一个字符串中出现第二个字符串的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">查找在str1中出现str2的位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strstr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *tmp = (<span class="hljs-keyword">char</span>*)str1;<br>    <span class="hljs-keyword">char</span> *s1, *s2;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str2)<br>        <span class="hljs-keyword">return</span>((<span class="hljs-keyword">char</span> *)str1);<br><br>    <span class="hljs-keyword">while</span> (*tmp)<br>    &#123;<br>        s1 = tmp;<br>        s2 = (<span class="hljs-keyword">char</span> *)str2;<br><br>        <span class="hljs-keyword">while</span> (*s1 &amp;&amp; *s2 &amp;&amp; (*s1 == *s2))<br>        &#123;<br>            s1++;<br>            s2++;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!*s2)<br>        &#123;<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br><br>        tmp++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">查找在str1中出现str2前length个字符的位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strnstr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2, <span class="hljs-keyword">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str2_len = my_strlen (str2);<br>    <span class="hljs-keyword">char</span> *tmp = (<span class="hljs-keyword">char</span>*)str1;<br>    <span class="hljs-keyword">char</span> str2_tmp[length+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">char</span> *s1, *s2;<br>    <br>    <span class="hljs-keyword">if</span> (str2_len &lt; length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        my_strncpy(str2_tmp, str2, length);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str2_tmp)<br>        <span class="hljs-keyword">return</span>((<span class="hljs-keyword">char</span> *)str1);<br><br>    <span class="hljs-keyword">while</span> (*tmp)<br>    &#123;<br>        s1 = tmp;<br>        s2 = (<span class="hljs-keyword">char</span> *)str2_tmp;<br><br>        <span class="hljs-keyword">while</span> (*s1 &amp;&amp; *s2 &amp;&amp; (*s1 == *s2))<br>        &#123;<br>            s1++;<br>            s2++;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!*s2)<br>        &#123;<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br><br>        tmp++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="strchr-和strrchr"><a href="#strchr-和strrchr" class="headerlink" title="strchr()和strrchr()"></a>strchr()和strrchr()</h2><p>字符查找函数，分别查找在字符串中第一次出现字符的位置和最后一次出现字符的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">查找str1中第一次出现c的位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strchr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str1, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *tmp = (<span class="hljs-keyword">char</span> *)str1;<br>    <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (*tmp)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (*tmp == c)<br>        &#123;<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tmp++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">查找str1中最后一次出现c的位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strrchr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str1, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *tmp = (<span class="hljs-keyword">char</span> *)str1;<br>    <span class="hljs-keyword">char</span> *s1 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (*tmp)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (*tmp == c)<br>        &#123;<br>            s1 = tmp;<br>        &#125;<br><br>        tmp++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> s1;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="strpbrk-和strspn"><a href="#strpbrk-和strspn" class="headerlink" title="strpbrk()和strspn()"></a>strpbrk()和strspn()</h2><p>strpbrk()函数为依次检测第一个字符串中的字符，如果字符在第二个字符串中也存在，返回字符的位置</p><p>strspn()函数为依次检测第一个字符串中的字符，如果字符在第二个字符串中不存在，返回字符所在的下标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">找到str1和str2中都有的第一个字符，返回其在str1中的位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">my_strpbrk</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *tmp = (<span class="hljs-keyword">char</span>*)str2;<br>    <span class="hljs-keyword">char</span> *s1, *s2;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str2)<br>        <span class="hljs-keyword">return</span>((<span class="hljs-keyword">char</span> *)str1);<br><br>    <span class="hljs-keyword">while</span> (*tmp)<br>    &#123;<br>        s1 = (<span class="hljs-keyword">char</span> *)str1;<br>        s2 = tmp;<br><br>        <span class="hljs-keyword">for</span> (; *s1; s1++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (*s1 == *s2)<br>            &#123;<br>                <span class="hljs-keyword">return</span> s1;<br>            &#125;<br>        &#125;<br>        tmp++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">找到第一个str1中存在，str2中不存在的字符，返回其在str1中的下标</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strspn</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *tmp = (<span class="hljs-keyword">char</span>*)str1;<br>    <span class="hljs-keyword">char</span> *s1, *s2;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str2)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">while</span> (*tmp)<br>    &#123;<br>        s1 = tmp;<br>        s2 = (<span class="hljs-keyword">char</span> *)str2;<br><br>        <span class="hljs-keyword">for</span> (; *s2; s2++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (*s1 == *s2)<br>            &#123;<br>                tmp++;<br>                i++;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            flag = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!flag)<br>        &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="startwith-和endwith"><a href="#startwith-和endwith" class="headerlink" title="startwith()和endwith()"></a>startwith()和endwith()</h2><p>自己实现的检查字符串是以某个子串开头或结尾的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">startwith</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = <span class="hljs-built_in">strlen</span> (str1);<br>    str2_len = <span class="hljs-built_in">strlen</span> (str2);<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> == str1_len &amp;&amp; <span class="hljs-number">0</span> == str2_len) || <span class="hljs-number">0</span> == str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (str1_len &lt; str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strncmp</span>(str1,str2,str2_len))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">endwith</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> *tmp = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = <span class="hljs-built_in">strlen</span> (str1);<br>    str2_len = <span class="hljs-built_in">strlen</span> (str2);<br>    tmp = (<span class="hljs-keyword">char</span> *)str1;<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> == str1_len &amp;&amp; <span class="hljs-number">0</span> == str2_len) || <span class="hljs-number">0</span> == str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (str1_len &lt; str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    tmp += str1_len-str2_len;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(tmp,str2))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>造轮子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>造轮子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开始造轮子</title>
    <link href="/2021/07/21/%E9%80%A0%E8%BD%AE%E5%AD%90/%E5%BC%80%E5%A7%8B%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    <url>/2021/07/21/%E9%80%A0%E8%BD%AE%E5%AD%90/%E5%BC%80%E5%A7%8B%E9%80%A0%E8%BD%AE%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h1 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h1><p>在最近的学习中，感觉C库好像缺少了检查字符串是以某个子串开头或结尾的函数，于是自己手动实现了一个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">startwith</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = <span class="hljs-built_in">strlen</span> (str1);<br>    str2_len = <span class="hljs-built_in">strlen</span> (str2);<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> == str1_len &amp;&amp; <span class="hljs-number">0</span> == str2_len) || <span class="hljs-number">0</span> == str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (str1_len &lt; str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strncmp</span>(str1,str2,str2_len))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">endwith</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> *tmp = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = <span class="hljs-built_in">strlen</span> (str1);<br>    str2_len = <span class="hljs-built_in">strlen</span> (str2);<br>    tmp = (<span class="hljs-keyword">char</span> *)str1;<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> == str1_len &amp;&amp; <span class="hljs-number">0</span> == str2_len) || <span class="hljs-number">0</span> == str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (str1_len &lt; str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    tmp += str1_len-str2_len;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(tmp,str2))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看着这两个函数我陷入了沉思，既然缺少的我可以自己实现，那么已存在的我按照自己的想法重写，应该会对这些函数有一个更深的理解，于是便有了‘造轮子’这个专题</p><p>今天先将函数中用到的strlen()、strcmp()以及strcmp()进行重写</p><h2 id="my-strlen"><a href="#my-strlen" class="headerlink" title="my_strlen()"></a>my_strlen()</h2><p>strlen()的作用就是算出字符串的长度，很好理解逐，字符检查直到检查到结束即可算出总长度，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strlen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        i++;<br>    &#125;<span class="hljs-keyword">while</span> (str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="my-strcmp-和-my-strncmp"><a href="#my-strcmp-和-my-strncmp" class="headerlink" title="my_strcmp() 和 my_strncmp()"></a>my_strcmp() 和 my_strncmp()</h2><p>strcmp()和strncmp()是进行字符串比较的函数，如果完全相同则返回0，如果出现不同字符，前字符串的字符大就返回1，否则返回-1.如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strncmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2, <span class="hljs-keyword">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = my_strlen (str1);<br>    str2_len = my_strlen (str2);<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> == str1_len &amp;&amp; <span class="hljs-number">0</span> == str2_len) || <span class="hljs-number">0</span> == str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (str1_len &lt; size || str2_len &lt; size)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] == str2[i])<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str1[i] &gt; str2[i])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strcmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> str1_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> str2_len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == str1 || <span class="hljs-literal">NULL</span> == str2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    str1_len = my_strlen (str1);<br>    str2_len = my_strlen (str2);<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> == str1_len &amp;&amp; <span class="hljs-number">0</span> == str2_len) || <span class="hljs-number">0</span> == str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (str1_len &lt; str2_len)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str2_len; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] == str2[i])<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str1[i] &gt; str2[i])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先我会抽时间慢慢实现各个字符串操作函数，其次选一些我感兴趣的函数进行实现，希望我能坚持下去</p>]]></content>
    
    
    <categories>
      
      <category>造轮子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>造轮子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CGI</title>
    <link href="/2021/07/21/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/cgi/"/>
    <url>/2021/07/21/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/cgi/</url>
    
    <content type="html"><![CDATA[<h1 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h1><p>一个网关协议，按照CGI协议规定的数据格式，进行数据的处理（接收数据，输出数据)。存在目的是为了使web能够有动态页面的处理能力。是网站上实现动态页面的最简单和常用的方法</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>CGI程序其实就是HTTP请求中的一种请求资源的类型，所以需要简单的了解一下HTTP协议</p><h2 id="客户端（浏览器）与web服务器的交互流程"><a href="#客户端（浏览器）与web服务器的交互流程" class="headerlink" title="客户端（浏览器）与web服务器的交互流程"></a>客户端（浏览器）与web服务器的交互流程</h2><p>WEB服务器是使用TCP/IP协议搭建的一个服务器，获取静态资源的流程如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%8E%B7%E5%8F%96.png" alt="静态资源获取"></p><p>下面是大学期间写的一个web服务器的demo：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/select.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 初始化监听socket描述符</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init_listen_socket</span><span class="hljs-params">(<span class="hljs-keyword">short</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> listen_fd;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><br><br>    listen_fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (listen_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fail to socket : %s\n&quot;</span>, strerror(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> on = <span class="hljs-number">1</span>;<br>    ret = setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="hljs-keyword">sizeof</span>(on));<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;set sock reuse addr:&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(&amp;server_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server_addr));<br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_port = htons(port);<br>    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<br><br>    ret = bind(listen_fd, (struct sockaddr *) &amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;fail to bind&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    listen(listen_fd, <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> listen_fd;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_filetype</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *filename, <span class="hljs-keyword">char</span> *filetype)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(filename, <span class="hljs-string">&quot;.html&quot;</span>))<br>        <span class="hljs-built_in">strcpy</span>(filetype, <span class="hljs-string">&quot;text/html&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(filename, <span class="hljs-string">&quot;.gif&quot;</span>))<br>        <span class="hljs-built_in">strcpy</span>(filetype, <span class="hljs-string">&quot;image/gif&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(filename, <span class="hljs-string">&quot;.png&quot;</span>))<br>        <span class="hljs-built_in">strcpy</span>(filetype, <span class="hljs-string">&quot;image/png&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(filename, <span class="hljs-string">&quot;.jpg&quot;</span>))<br>        <span class="hljs-built_in">strcpy</span>(filetype, <span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">strcpy</span>(filetype, <span class="hljs-string">&quot;text/plain&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> listen_fd;<br>    <span class="hljs-keyword">int</span> new_fd;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">char</span> head[<span class="hljs-number">1024</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> *<span class="hljs-title">file</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">char</span> *date = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">char</span> filetype[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> ret;<br>    FILE *fp;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> port = <span class="hljs-number">8888</span>;<br><br>    <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">2</span>) &#123;<br>        port = strtoul(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>    &#125;<br><br>    listen_fd = init_listen_socket(port);<br>    <span class="hljs-keyword">if</span> (listen_fd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;listen %d port...\n&quot;</span>, port);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        new_fd = accept(listen_fd, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">if</span> (new_fd &lt; <span class="hljs-number">0</span>) &#123;<br>            perror(<span class="hljs-string">&quot;fail to accept&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Have a new connection!\n&quot;</span>);<br><br><br>        <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>        ret = recv(new_fd, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(ret&lt;<span class="hljs-number">0</span>)&#123;<br>            perror(<span class="hljs-string">&quot;recv&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;recv:%s&quot;</span> ,buf);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">4</span>;;i++)<br>            <span class="hljs-keyword">if</span>(buf[i] == <span class="hljs-string">&#x27;H&#x27;</span>&amp;&amp; buf[i+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;T&#x27;</span> &amp;&amp; buf[i+<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;T&#x27;</span> &amp;&amp; buf[i+<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;P&#x27;</span>)&#123;<br>            buf[i<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">char</span> *filename = buf + <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(filename)==<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">strcpy</span>(filename, <span class="hljs-string">&quot;index.html&quot;</span>);<br><br>        <span class="hljs-built_in">memset</span>(head,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(head));<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(filename,<span class="hljs-string">&quot;health&quot;</span>)==<span class="hljs-number">0</span>)<br>        &#123;<br>            filename=<span class="hljs-string">&quot;health.html&quot;</span>;<br>        &#125;<br>        fp = fopen(filename ,<span class="hljs-string">&quot;rb&quot;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> == fp)&#123;<br>            <span class="hljs-built_in">strcpy</span>(filename, <span class="hljs-string">&quot;404.html&quot;</span>);<br>            <span class="hljs-built_in">sprintf</span>(head, <span class="hljs-string">&quot;HTTP/1.0 404 NOT FOUND\r\n&quot;</span>);<span class="hljs-comment">//应该为404</span><br>            fp = fopen(filename ,<span class="hljs-string">&quot;rb&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">sprintf</span>(head, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>);<br>        fseek(fp, <span class="hljs-number">0</span>, SEEK_END);<br>        <span class="hljs-keyword">int</span> len = ftell(fp);<br>        <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            fclose(fp);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        fseek(fp, <span class="hljs-number">0</span>, SEEK_SET);<br><br>        date =(<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>( <span class="hljs-number">0x01</span> &lt;&lt; <span class="hljs-number">24</span>);<br><br>        len = fread(date, <span class="hljs-number">1</span>, len, fp);<br><br>        get_filetype(filename, filetype);<br><br>        <span class="hljs-built_in">sprintf</span>(head, <span class="hljs-string">&quot;%sServer: Tiny Web Server\r\n&quot;</span>, head);<br>        <span class="hljs-built_in">sprintf</span>(head, <span class="hljs-string">&quot;%sConnection: close\r\n&quot;</span>, head);<br>        <span class="hljs-built_in">sprintf</span>(head, <span class="hljs-string">&quot;%sContent-length: %d\r\n&quot;</span>, head,len);<span class="hljs-comment">//file-&gt;st_size</span><br>        <span class="hljs-built_in">sprintf</span>(head, <span class="hljs-string">&quot;%sContent-type: %s\r\n\r\n&quot;</span>, head, filetype);<br>        <span class="hljs-comment">//write(new_fd, head , strlen(head));</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Response headers:\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, head);<br><br>        ret = send(new_fd, head ,<span class="hljs-built_in">strlen</span>(head) , <span class="hljs-number">0</span>) ;<br>        <span class="hljs-keyword">if</span>(ret &lt;<span class="hljs-number">0</span>)&#123;<br>            perror(<span class="hljs-string">&quot;send head&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        ret = send(new_fd, date ,len , <span class="hljs-number">0</span>) ;<br>        <span class="hljs-keyword">if</span>(ret &lt;<span class="hljs-number">0</span>)&#123;<br>            perror(<span class="hljs-string">&quot;send date&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">free</span>(date);<br>        close(new_fd);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;close connection!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取动态资源(CGI)如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%8A%A8%E6%80%81%E8%AF%B7%E6%B1%82.png" alt="静态资源获取"></p><h2 id="CGI程序"><a href="#CGI程序" class="headerlink" title="CGI程序"></a>CGI程序</h2><h3 id="输出头部"><a href="#输出头部" class="headerlink" title="输出头部"></a>输出头部</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTTP">Content-type：text/html\r\n\r\n<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json\r\n\r\n<br></code></pre></td></tr></table></figure><p>头部实际不是文本的一部分，是服务器与浏览器之间的信息协议,常见头部为：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/20210312160819.png" alt="头部"></p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><ol><li>通过环境变量(GET方式)</li><li>stdin(POST方式)</li></ol><p><strong>GET方式</strong>：</p><ol><li>通过环境变量：REQUEST_METHOD来判断是否是GET方式</li><li>从环境变量：QUERY_STRING获取数据</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">char</span> *pQuery = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> *pMethod = <span class="hljs-literal">NULL</span>;<br>pMethod = getenv(<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(pMethod, <span class="hljs-string">&quot;GET&quot;</span>))<br>&#123;<br>    pQuery = getenv(<span class="hljs-string">&quot;QUERY_STRING&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>POST方式</strong>：</p><ol><li>通过环境变量：REQUEST_METHOD 来判断是否是POST方式</li><li>从环境变量：CONTENT_LENGTH 获取数据长度n</li><li>从stdin中读取n个字节的数据</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">char</span> *pQuery = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> *pMethod = <span class="hljs-literal">NULL</span>;<br>pMethod = getenv(<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(pMethod, <span class="hljs-string">&quot;POST&quot;</span>))&#123;<br>    len = atoi(getenv(<span class="hljs-string">&quot;CONTENT_LENGTH&quot;</span>));<br>    fgets(pQuery，len+<span class="hljs-number">1</span>,<span class="hljs-built_in">stdin</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><table><thead><tr><th>环境变量</th><th>意义</th></tr></thead><tbody><tr><td>SERVER_NAME</td><td>CGI脚本运行时的主机名和IP地址.</td></tr><tr><td>SERVER_SOFTWARE</td><td>你的服务器的类型如： CERN/3.0 或 NCSA/1.3.</td></tr><tr><td>GATEWAY_INTERFACE</td><td>运行的CGI版本. 对于UNIX服务器, 这是CGI/1.1.</td></tr><tr><td>SERVER_PROTOCOL</td><td>服务器运行的HTTP协议. 这里当是HTTP/1.0.</td></tr><tr><td>SERVER_PORT</td><td>服务器运行的TCP口，通常Web服务器是80.</td></tr><tr><td>REQUEST_METHOD</td><td>POST 或 GET, 取决于你的表单是怎样递交的.</td></tr><tr><td>HTTP_ACCEPT</td><td>浏览器能直接接收的Content-types, 可以有HTTP Accept header定义.</td></tr><tr><td>HTTP_USER_AGENT</td><td>递交表单的浏览器的名称、版本 和其他平台性的附加信息。</td></tr><tr><td>HTTP_REFERER</td><td>递交表单的文本的 URL，不是所有的浏览器都发出这个信息，不要依赖它</td></tr><tr><td>PATH_INFO</td><td>附加的路径信息, 由浏览器通过GET方法发出.</td></tr><tr><td>PATH_TRANSLATED</td><td>在PATH_INFO中系统规定的路径信息.</td></tr><tr><td>SCRIPT_NAME</td><td>指向这个CGI脚本的路径, 是在URL中显示的(如, /cgi-bin/thescript).</td></tr><tr><td>QUERY_STRING</td><td>脚本参数或者表单输入项(如果是用GET递交). QUERY_STRING 包含URL中问号后面的参数.</td></tr><tr><td>REMOTE_HOST</td><td>递交脚本的主机名，这个值不能被设置.</td></tr><tr><td>REMOTE_ADDR</td><td>递交脚本的主机IP地址.</td></tr><tr><td>REMOTE_USER</td><td>递交脚本的用户名. 如果服务器的authentication被激活，这个值可以设置。</td></tr><tr><td>REMOTE_IDENT</td><td>如果Web服务器是在ident (一种确认用户连接你的协议)运行, 递交表单的系统也在运行ident, 这个变量就含有ident返回值.</td></tr><tr><td>CONTENT_TYPE</td><td>如果表单是用POST递交, 这个值将是 application/x-www-form-urlencoded. 在上载文件的表单中, content-type 是个 multipart/form-data.</td></tr><tr><td>CONTENT_LENGTH</td><td>对于用POST递交的表单, 标准输入口的字节数.</td></tr></tbody></table><h3 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h3><p>1、输出数据要和输出头部相匹配</p><p>2、通过标准输出stdout进行数据的输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">sprintf</span>(output_buff, <span class="hljs-string">&quot;Content-Type: application/json\r\n\r\n&quot;</span> \<br>                                 <span class="hljs-string">&quot;&#123;&quot;</span> \<br>                                 <span class="hljs-string">&quot;\r\&quot;status\&quot;:0,&quot;</span> \<br>                                 <span class="hljs-string">&quot;\r\&quot;msg\&quot;:username or password incorrect&quot;</span> \<br>                                 <span class="hljs-string">&quot;\r&#125;&quot;</span>);<br><br>websWrite(<span class="hljs-built_in">stdout</span>, T(<span class="hljs-string">&quot;%s&quot;</span>), output_buff);<br></code></pre></td></tr></table></figure><h2 id="CGI实现原理"><a href="#CGI实现原理" class="headerlink" title="CGI实现原理"></a>CGI实现原理</h2><p>在lighttpd中是cgi_create_env函数中进行实现，实现步骤如下：</p><ol><li>创建管道</li><li>Fork（）子进程</li><li>在子进程中设置管道一端为标准输入和标准输出</li><li>在子进程中添加环境变量</li><li>启动CGI进程</li><li>父进程负责向管道中写数据</li></ol>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETWS地震海啸预警</title>
    <link href="/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/ETWS%E5%9C%B0%E9%9C%87%E6%B5%B7%E5%95%B8%E9%A2%84%E8%AD%A6/"/>
    <url>/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/ETWS%E5%9C%B0%E9%9C%87%E6%B5%B7%E5%95%B8%E9%A2%84%E8%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="Earthquake-and-Tsunami-Warning-System"><a href="#Earthquake-and-Tsunami-Warning-System" class="headerlink" title="Earthquake and Tsunami Warning System"></a>Earthquake and Tsunami Warning System</h1><p>ETWS即地震海啸预警系统，是为了在地震和海啸发生时提醒用户做好防护准备</p><h2 id="ETWS简介"><a href="#ETWS简介" class="headerlink" title="ETWS简介"></a>ETWS简介</h2><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/ETWSeg.png" alt="etws"></p><p>ETWS会向设备发送两种信息：</p><p>1.快速预警信息（Primary Notification）</p><p>ETWS一直在强调唯快不破，在地震、海啸等重大灾难发生后，几秒最慢几分钟  后就会殃及到整个受灾区域。因此，此预警通知应迅速送达受紧急影响地区的用户，使其能够采取任何行动逃离危险，所以此预警信息携带数据较小，主要告诉用户灾害类型</p><p>2.准确的警告通知（Secondary Notification）</p><p>在已经发送了快速预警信息后，需要给用户提供更准确的信息，如逃生路线，安全区域，政府政策，灾害持续时间等。因此，此条信息应准确送达，负载更多信息，并且可以让多种类型的用户理解（如多语言显示）</p><h3 id="ETWS的时效性"><a href="#ETWS的时效性" class="headerlink" title="ETWS的时效性"></a>ETWS的时效性</h3><p>Primary Notification 要求是迅速发送到UE，即使在拥堵的情况下，也要保证在4秒内送达UE</p><p>Secondary Notification 要求一定要送达到UE，即使在拥堵的情况下，也要保证送达UE，Secondary Notification没有要求送达时间，只要求准确性</p><p>备注：</p><ol><li>不在范围内或者关机的设备不需要考虑</li><li>在Primary Notification后面不一定总是有Secondary Notification</li><li>可能没有Primary Notification而只有Secondary Notification，完全依赖ETWS消息提供方策略</li></ol><h2 id="ETWS-数据"><a href="#ETWS-数据" class="headerlink" title="ETWS 数据"></a>ETWS 数据</h2><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/etws_data.png" alt="data"></p><h3 id="Primary-Notification"><a href="#Primary-Notification" class="headerlink" title="Primary Notification"></a>Primary Notification</h3><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/primary_ctws.png" alt="Primary"></p><h3 id="Serial-Number"><a href="#Serial-Number" class="headerlink" title="Serial Number"></a>Serial Number</h3><ul><li>GS:00 (GS 是CBS的发送方填充的，00优先级最高，代表基站发送)</li><li>Emergency Uset Alert: 1 （1：enable   0：disable）</li><li>Popup：1（1：enable   0：disable）</li><li>Upadte Number： 0 （相当于CBS信息版本，每更新一次+1）</li></ul><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/SN.png" alt="sn"></p><h3 id="Message-Identifier"><a href="#Message-Identifier" class="headerlink" title="Message Identifier"></a>Message Identifier</h3><p>顾名思义代表消息id，此id的范围如下</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/etws_mi.png" alt="mi"></p><h3 id="Warning-Type"><a href="#Warning-Type" class="headerlink" title="Warning Type"></a>Warning Type</h3><p>warning type主要存放在这部分的前7个字节</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/warn_typ.png" alt="Warning"></p><p>具体意义如下图</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/warning_typ.png" alt="Warning"></p><h2 id="Secondary-Notification"><a href="#Secondary-Notification" class="headerlink" title="Secondary Notification"></a>Secondary Notification</h2><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/secondary_etws.png" alt="Secondary"></p><h3 id="Message-Type"><a href="#Message-Type" class="headerlink" title="Message Type"></a>Message Type</h3><p>消息类型如下图</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/message_type.png" alt="Message"></p><h3 id="Data-Coding-Scheme"><a href="#Data-Coding-Scheme" class="headerlink" title="Data Coding Scheme"></a>Data Coding Scheme</h3><p>编码方案，此编码和短信一样共有三种，7BIT,8BIT和USC2</p><p>具体参考文档ETSI TS 123 038，文档部分截图如下</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/codingscheme.png" alt="Scheme"></p><h3 id="CB-Data"><a href="#CB-Data" class="headerlink" title="CB Data"></a>CB Data</h3><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/etwa_cb_data.png" alt="Data"></p><p>最后的CB Data部分就按页数分割，以指定的长度解析即可</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CBS小区广播</title>
    <link href="/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/CBS%E5%B0%8F%E5%8C%BA%E5%B9%BF%E6%92%AD/"/>
    <url>/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/CBS%E5%B0%8F%E5%8C%BA%E5%B9%BF%E6%92%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="Cell-Broadcast-Service"><a href="#Cell-Broadcast-Service" class="headerlink" title="Cell Broadcast Service"></a>Cell Broadcast Service</h1><p>小区广播服务是一种远程服务，它使信息提供者能够向PLMN内的指定区域提交用于广播的短消息。</p><h2 id="CBS简介"><a href="#CBS简介" class="headerlink" title="CBS简介"></a>CBS简介</h2><p>小区广播业务具有以下特点:</p><ul><li>终端不发送确认信息。</li><li>小区广播消息在一个有限的区域内发送，该区域由消息的发起者定义，并与PLMN达成协议。</li><li>每个消息都有一个标识符。终端接收该标识符，用于终端不存储不需要或已经接收到的广播消息的短信功能。</li><li>一般情况下，小区广播报文会连续发送，依次发送，重复发送。周期时间必须足够短，以便在一组单元中移动的游者能够接收到重要的信息。</li><li>小区广播消息仅为MT。这些消息的产生超出了3GPP规范的范围。</li><li>每个小区广播消息的最大长度为93个字符。</li><li>如果终端连接CS域，则不需要接收CBS消息。如果终端连接在PS域中且当前没有传输数据，那么终端应该可以接收消息。</li></ul><p>一条CBS消息最多由15个CBS page构成，每个CBS page至多82个字节，如果采用GSM7位编码的话，82*8/7=93个字符，并且每个CBS page拥有相同的Message ID和SN号</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/cbs_description.png" alt="description"></p><h2 id="CBS-数据"><a href="#CBS-数据" class="headerlink" title="CBS 数据"></a>CBS 数据</h2><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/cbs_data.png" alt="CBS data"></p><p>此数据为十进制，但是我们解析时是按位解析的</p><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><h3 id="CBS"><a href="#CBS" class="headerlink" title="CBS"></a>CBS</h3><p>CBS就是由下图部分组分</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/cbs_decode.png" alt="cbs"></p><h3 id="Serial-Number"><a href="#Serial-Number" class="headerlink" title="Serial Number"></a>Serial Number</h3><ul><li>GS:00 (GS 是CBS的发送方填充的，00优先级最高，代表基站发送)</li><li>Emergency Uset Alert: 1 （1：enable   0：disable）</li><li>Popup：1（1：enable   0：disable）</li><li>Upadte Number： 0 （相当于CBS信息版本，每更新一次+1）</li></ul><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/SN.png" alt="sn"></p><h3 id="Message-Identifier"><a href="#Message-Identifier" class="headerlink" title="Message Identifier"></a>Message Identifier</h3><p>顾名思义代表消息id，此id的范围如下</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/MI.png" alt="mi"></p><h3 id="Data-Coding-Scheme"><a href="#Data-Coding-Scheme" class="headerlink" title="Data Coding Scheme"></a>Data Coding Scheme</h3><p>编码方案，此编码和短信一样共有三种，7BIT,8BIT和USC2</p><p>具体参考文档ETSI TS 123 038，文档部分截图如下</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/codingscheme.png" alt="Scheme"></p><p>最后的CB Data部分就按指定的编码方式解析即可</p>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sms信息编码</title>
    <link href="/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/sms%E4%BF%A1%E6%81%AF%E7%BC%96%E7%A0%81/"/>
    <url>/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/sms%E4%BF%A1%E6%81%AF%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="信息编码"><a href="#信息编码" class="headerlink" title="信息编码"></a>信息编码</h1><p>信息编码共有三种方式，按所携带信息的大小排序可分为：7bit编码、8bit编码、UCS2编码</p><h2 id="7bit编码"><a href="#7bit编码" class="headerlink" title="7bit编码"></a>7bit编码</h2><p>7位编码是种压缩算法，因为，ASCII码（不包括扩展ASCII），其值小于0x80，最高位bit8是0，被忽略了；而7bit编码就利用了这一位来存储数据；其编码时，依次将下一7位编码的后几位逐次移至前面，形成新的8位编码。</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/7bit.png" alt="7bit编码"></p><p>根据上图可得到7bit编码解码算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HIGH_8BIT_MASK(N) (0xFF &lt;&lt; (N))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LOW_8BIT_MASK(N) (~HIGH_8BIT_MASK(N))</span><br><br><span class="hljs-keyword">int</span> _7bit_to_asscii(<span class="hljs-keyword">char</span> *p_dst, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *src, <span class="hljs-keyword">int</span> src_size)<br>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> high_part, low_part;<br>    left = <span class="hljs-number">8</span>;<br><br>    <span class="hljs-keyword">if</span> (src == <span class="hljs-literal">NULL</span> || p_dst == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    n = (src_size * <span class="hljs-number">8</span>) / <span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">8</span> == left)<br>        &#123;<br>            p_dst[i] = src[pos] &amp; LOW_8BIT_MASK(<span class="hljs-number">7</span>);<br>            left = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">7</span> == left)<br>        &#123;<br>            p_dst[i] = (src[pos] &amp; HIGH_8BIT_MASK(<span class="hljs-number">8</span> - left)) &gt;&gt; (<span class="hljs-number">8</span> - left);<br>            left = <span class="hljs-number">8</span>;<br>            pos++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            high_part = low_part = <span class="hljs-number">0</span>;<br>            low_part = (src[pos] &amp; HIGH_8BIT_MASK(<span class="hljs-number">8</span> - left)) &gt;&gt; (<span class="hljs-number">8</span> - left);<br>            high_part = (src[pos+<span class="hljs-number">1</span>] &amp; LOW_8BIT_MASK(<span class="hljs-number">7</span> - left)) &lt;&lt; left;<br>            p_dst[i] = low_part | high_part;<br>            left = <span class="hljs-number">8</span> - (<span class="hljs-number">7</span> - left);<br>            pos++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">asscii_to_7bit</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_dst, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *p_src, <span class="hljs-keyword">int</span> src_size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;   <span class="hljs-comment">//当前字节还能放多少个元素</span><br>    <span class="hljs-keyword">int</span> high_part, low_part;<br>    <span class="hljs-keyword">char</span> p_usrc[src_size + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">memcpy</span>(p_usrc, p_src, src_size);<br>    left = <span class="hljs-number">8</span>;<span class="hljs-comment">//初始时候为8位，这是从低位开始算的</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; src_size ; i++)&#123;<br>        <span class="hljs-keyword">if</span>(left == <span class="hljs-number">8</span>)&#123;<br>            p_dst[pos] |= p_usrc[i] &lt;&lt; (<span class="hljs-number">8</span> - left);<br>            left -= <span class="hljs-number">7</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left == <span class="hljs-number">7</span>)&#123;<br>            p_dst[pos] |= p_usrc[i] &lt;&lt; (<span class="hljs-number">8</span> - left);<br>            left = <span class="hljs-number">8</span>;<br>            pos++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-comment">//需要分割，分为两部分，一部分是 低left位, 另一部分是 高7-left位</span><br>            high_part = low_part = <span class="hljs-number">0</span>;<br>            low_part = p_usrc[i] &amp; LOW_8BIT_MASK(left);<br>            high_part = (p_usrc[i] &amp; HIGH_8BIT_MASK(left)) &gt;&gt; left;<br><br>            p_dst[pos] |= low_part &lt;&lt; (<span class="hljs-number">8</span> - left);<br>            pos++;<br>            p_dst[pos] |= high_part;<br>            left = <span class="hljs-number">8</span> - (<span class="hljs-number">7</span> - left);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ((src_size * <span class="hljs-number">7</span> + <span class="hljs-number">7</span>) / <span class="hljs-number">8</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8bit编码"><a href="#8bit编码" class="headerlink" title="8bit编码"></a>8bit编码</h2><p>8bit编码，顾名思义就是一个char型数据代表一个字符，所以他的编解码是一模一样的，甚至都不叫编解码，直接拿来用即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">decode_8bit</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_length, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> *out_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (in == <span class="hljs-literal">NULL</span> || in_length &lt;= <span class="hljs-number">0</span> || out == <span class="hljs-literal">NULL</span> || out_length == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; in_length; index++)<br>    &#123;<br>        out[length++] = in[index];<br>    &#125;<br>    *out_length = length;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">encode_8bit</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_length, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> *out_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (in == <span class="hljs-literal">NULL</span> || in_length &lt;= <span class="hljs-number">0</span> || out == <span class="hljs-literal">NULL</span> || out_length == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; in_length; index++)<br>    &#123;<br>        out[length++] = in[index];<br>    &#125;<br>    *out_length = length;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="UCS2编码"><a href="#UCS2编码" class="headerlink" title="UCS2编码"></a>UCS2编码</h2><p>UCS2就是标准的unicode编码， 它是某国际组织设计的一种文字符号编码表，包括了世界上绝大多数文字和符号，包括中文，每个字符使用2字节编码，因此叫ucs2。</p><p>对于这种标准编码有现成的函数iconv()可以使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iconv.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">iconv_t</span> <span class="hljs-title">iconv_open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *tocode, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fromcode)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">iconv</span><span class="hljs-params">(<span class="hljs-keyword">iconv_t</span> cd,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">char</span> **inbuf, <span class="hljs-keyword">size_t</span> *inbytesleft,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">char</span> **outbuf, <span class="hljs-keyword">size_t</span> *outbytesleft)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">iconv_close</span><span class="hljs-params">(<span class="hljs-keyword">iconv_t</span> cd)</span></span>;<br></code></pre></td></tr></table></figure><p>iconv_open：</p><p>tocode:目标编码；fromcode:当前编码；返回值为iconv的句柄</p><p>iconv：</p><p>cd:iconv_open获取的句柄；inbuf，inbytesleft:输入的字符串及其大小；outbuf，outbytesleft:输出的字符串及其大小</p><p>iconv_close：</p><p>cd:iconv_open获取的句柄</p><p>UCS2编码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">encode_ucs2</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_length, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> *out_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">iconv_t</span> icon_handler = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> out_buffer_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> *out_buffer = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">char</span> temp = <span class="hljs-number">0x00</span>;<br><br>    <span class="hljs-keyword">if</span> (in == <span class="hljs-literal">NULL</span> || in_length &lt;= <span class="hljs-number">0</span> || out == <span class="hljs-literal">NULL</span> || out_length == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((icon_handler = iconv_open(<span class="hljs-string">&quot;ucs-2&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>)) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    out_buffer_length = *out_length;<br>    out_buffer = out;<br>    <span class="hljs-keyword">if</span> (iconv(icon_handler, &amp;in, (<span class="hljs-keyword">size_t</span> *)&amp;in_length, &amp;out_buffer, (<span class="hljs-keyword">size_t</span> *)&amp;out_buffer_length) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        *out_length = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;encode_ucs2 errno = %d.&quot;</span>, errno);<br>        iconv_close(icon_handler);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    *out_length -= out_buffer_length;<br>    iconv_close(icon_handler);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; *out_length ; index += <span class="hljs-number">2</span>)<br>    &#123;<br>        temp = out[index];<br>        out[index] = out[index + <span class="hljs-number">1</span>];<br>        out[index + <span class="hljs-number">1</span>] = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">decode_ucs2</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_length, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> *out_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">iconv_t</span> icon_handler = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> out_buffer_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> *out_buffer = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">char</span> temp = <span class="hljs-number">0x00</span>;<br><br>    <span class="hljs-keyword">if</span> (in == <span class="hljs-literal">NULL</span> || in_length &lt;= <span class="hljs-number">0</span> || in_length % <span class="hljs-number">2</span> != <span class="hljs-number">0</span> || out == <span class="hljs-literal">NULL</span> || out_length == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; in_length; index += <span class="hljs-number">2</span>)<br>    &#123;<br>        temp = in[index];<br>        in[index] = in[index + <span class="hljs-number">1</span>];<br>        in[index + <span class="hljs-number">1</span>] = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((icon_handler = iconv_open(<span class="hljs-string">&quot;utf-8&quot;</span>, <span class="hljs-string">&quot;ucs-2&quot;</span>)) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    out_buffer_length = *out_length;<br>    out_buffer = out;<br>    <span class="hljs-keyword">if</span> (iconv(icon_handler, &amp;in, (<span class="hljs-keyword">size_t</span> *)&amp;in_length, &amp;out_buffer, (<span class="hljs-keyword">size_t</span> *)&amp;out_buffer_length) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        *out_length = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;decode_ucs2 errno = %d.&quot;</span>, errno);<br>        iconv_close(icon_handler);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    *out_length -= out_buffer_length;<br>    iconv_close(icon_handler);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sms信息</title>
    <link href="/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/sms%E4%BF%A1%E6%81%AF/"/>
    <url>/2021/07/17/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/sms%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="短信"><a href="#短信" class="headerlink" title="短信"></a>短信</h1><h2 id="短信概述"><a href="#短信概述" class="headerlink" title="短信概述"></a>短信概述</h2><h3 id="SMS（Short-Messaging-Service）"><a href="#SMS（Short-Messaging-Service）" class="headerlink" title="SMS（Short Messaging Service）"></a>SMS（Short Messaging Service）</h3><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/sms.jpg" alt="sms"></p><p>SMS协议就是短信协议的一种，目前短信协议有SMS短信、EMS短信和MMS彩信。</p><p>SMS，短信服务是最早的短消息业务，也是现在普及率最高的一种短消息业务，通过它移动电话之间可以互相收发短信，内容以文本、数字或二进制非文本数据为主，目前，这种短消息的长度被限定在140字节之内。SMS以简单方便的使用功能受到广大用户的欢迎，迅速普及，但却始终是属于第一代的无线数据服务。</p><p>SMS 是一种存储和转发服务。也就是说，短消息并不是直接从发送人发送到接收人，而始终通过 SMS 中心进行转发。如果接收人处于未连接状态（可能电话已关闭），则消息将在接收人再次连接时发送。</p><h3 id="PDU编码"><a href="#PDU编码" class="headerlink" title="PDU编码"></a>PDU编码</h3><p>共有三种方式来发送和接收SMS信息：Block Mode, Text Mode和PDU Mode。其中PDU Mode被所有手机支持，可以使用任何字符集，这也是手机默认的编码方式。</p><p>PDU相当于一个数据包、数据单元，它由构成短消息（SMS）的信息组成。</p><p>GSM和CDMA的PDU又有着很大的区别。</p><hr><h2 id="GSM短信编码"><a href="#GSM短信编码" class="headerlink" title="GSM短信编码"></a>GSM短信编码</h2><p>短信包含很多的类型，如短信交付(SMS-DELIVER)、短信提交(SMS -SUBMIT)、短信命令(SMS-DELIVER)等。这里主要讲短信交付。</p><p>SMS-DELIVER (Mobile Terminated):手机接受的短信，由短信中心到终端。SMS-SUBMIT (Mobile Originated):由手机发起的短信，由终端到短信中心。</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E7%9F%AD%E4%BF%A1%E4%BA%A4%E4%BB%98%E6%B5%81%E7%A8%8B.png" alt="短信交付流程"></p><h3 id="PDU的组成"><a href="#PDU的组成" class="headerlink" title="PDU的组成"></a>PDU的组成</h3><p>PDU主要由以下部分组成：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/pdu.png" alt="pdu"></p><p>例如：</p><p>240D91688102200982F601<strong>08</strong>21800381602423<strong>064F60597D0021</strong></p><p>240D91688102200982F601<strong>04</strong>21800381602423<strong>0b68656c6c6f20776f726c64</strong></p><p>240D91688102200982F601<strong>00</strong>21800381602423<strong>0bc8329bfd065ddf72363904</strong></p><p>字段含义如下表</p><table><thead><tr><th>元素</th><th>名称</th><th>长度</th><th>描述</th></tr></thead><tbody><tr><td>SCA</td><td>Service Center Address</td><td>1-12</td><td>短消息服务中心号码</td></tr><tr><td>PDU-Type</td><td>Protocol Data Unit</td><td>1</td><td>协议数据单元类型</td></tr><tr><td>MR</td><td>Message Reference</td><td>1</td><td>所有成功的短信发送参考数目（0..255）</td></tr><tr><td>OA</td><td>Originator Address</td><td>2-12</td><td>发送方地址（手机号码）</td></tr><tr><td>PID</td><td>Protocol Identifer</td><td>1</td><td>参数显示消息中心以何种方式处理消息内容</td></tr><tr><td>DCS</td><td>Data Coding Scheme</td><td>1</td><td>参数显示用户数据编码方案</td></tr><tr><td>SCTS</td><td>Service Center Time Stamp</td><td>7</td><td>消息中心收到消息时的时间戳</td></tr><tr><td>UDL</td><td>User Data Lenghth</td><td>1</td><td>用户数据长度</td></tr><tr><td>UD</td><td>User Data</td><td>1</td><td>用户数据</td></tr></tbody></table><p>短信信息的解码主要关注红色的元素</p><h3 id="GSM短信解析流程"><a href="#GSM短信解析流程" class="headerlink" title="GSM短信解析流程"></a>GSM短信解析流程</h3><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/sms_gsm%E6%B5%81%E7%A8%8B.png" alt="GSM短信解析流程"></p><h3 id="PDU-Type"><a href="#PDU-Type" class="headerlink" title="PDU-Type"></a>PDU-Type</h3><p>PDU-Type包含了MTI具体信息如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/pdu_type.png" alt="PDU-Type"></p><p>其中2bit MTI如下：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/mti.png" alt="MTI"></p><h3 id="OA"><a href="#OA" class="headerlink" title="OA"></a>OA</h3><p>OA 发送方地址(Originator Address)例如：0D 91 688102200982F6</p><table><thead><tr><th>1 Octet</th><th>0-1 Octet</th><th>0-10 Octet</th></tr></thead><tbody><tr><td>Len</td><td>Type</td><td>Addr</td></tr></tbody></table><ul><li>Len:地址长度。如果Length为0D，后面的字节数是[2+(Length+1)]/2=8，后面8个字节是发送方的地址；</li><li>Type：短消息中心地址的类型，一般为91，代表“+”。</li><li>Addr:地址长度为奇数时，最后一个需要填充”F”</li></ul><h3 id="DCS"><a href="#DCS" class="headerlink" title="DCS"></a>DCS</h3><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/gsm_dcs.png" alt="DCS"></p><p>2-3bit代表用户数据的编码方式，0-1bit代表了短信的储存方式</p><ul><li>Class0：短消息直接显示到用户终端</li><li>Class1：短消息存储在SIM卡上</li><li>Class2：短消息必须存储在SIM卡上，禁止直接传输到中断</li><li>Class3：短消息存贮在用户设备上</li></ul><h3 id="SCTS"><a href="#SCTS" class="headerlink" title="SCTS"></a>SCTS</h3><p>1bit-7bit分别代表年 月 日 时 分 秒 时区</p><p>例如：</p><p>21 80 03 81 60 24 23代表12年8月30号18时6分24秒</p><h3 id="UDL"><a href="#UDL" class="headerlink" title="UDL"></a>UDL</h3><p>UDL用户数据长度，包含用户数据和用户数据头的长度</p><ol><li><p>如果用户用默认7位编码。表示的是编码前的字符串长度，而不是编码后的8位组个数！</p></li><li><p>如果用户用8位编码表示用户数据区的字节数，有数据头信息，包括在内。</p></li><li><p>如果为UCS2编码，则是用户数据区的字节数</p></li></ol><h3 id="UD"><a href="#UD" class="headerlink" title="UD"></a>UD</h3><p>用户数据</p><p>例如：<br>1、04 4F60597D（不包含用户头部信息）</p><p>用户数据长度：4</p><p>用户数据：4F60597D</p><p>2、08 050003000201 C834 （包含用户头部信息)</p><p>用户数据长度：8</p><p>用户数据：C834</p><p>用户头部长度：5</p><p>用户头部信息：0003000201</p><h3 id="UDH"><a href="#UDH" class="headerlink" title="UDH"></a>UDH</h3><p>050003000201</p><ul><li>05表示消息头后续长度</li><li>00表示消息类型为长短信拆分</li><li>03表示剩余短信消息头标识长度</li><li>00表示短信ID，范围0~255</li><li>02表示短信拆分总包数</li><li>01表示当前短信是拆分短信的第几条</li></ul><hr><h2 id="CDMA短信编码"><a href="#CDMA短信编码" class="headerlink" title="CDMA短信编码"></a>CDMA短信编码</h2><h3 id="CDMA-PDU"><a href="#CDMA-PDU" class="headerlink" title="CDMA PDU"></a>CDMA PDU</h3><p>pdu如下：</p><blockquote><p>00 00 02 10 02 02 07 02 c5 4c e2 25 a8 a8 06 01 4c 08 4d 00 03 10 01 f8 01 3e 20 f0 01 90 01 78 01 90 01 62 df ca 70 04 b1 ac b1 ab b4 23 96 14 c6 70 01 62 96 3b 2b 12 b9 82 7a e3 10 c0 01 72 9f 54 4c 0b 10 8b b4 23 91 8a 75 d0 01 63 31 7a 70 02 9f 52 e0 7c f0 f8 03 06 08 12 29 19 26 16</p></blockquote><p>CDMA PDU总体分为两部分：消息类型 + 字段</p><ul><li>0x00：点对点消息</li><li>0x00：字段类型</li><li>0x02：字段长度</li></ul><p>字段类型分为：0x00：Teleservice id；0x02：Originating addr；0x06：Bearer reply opt；0x08：Bearer data</p><h3 id="CDMA短信解析流程"><a href="#CDMA短信解析流程" class="headerlink" title="CDMA短信解析流程"></a>CDMA短信解析流程</h3><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/cdma%E7%9F%AD%E4%BF%A1%E6%B5%81%E7%A8%8B.png" alt="CDMA短信解析流程"></p><h3 id="Originating-addr"><a href="#Originating-addr" class="headerlink" title="Originating addr"></a>Originating addr</h3><blockquote><p>02 07 02 c5 4c e2 25 a8 a8</p></blockquote><ul><li>0x02：addr</li><li>0x07：长度</li><li>0x02，0xc5：0000 0010 1100 0101</li><li>第一个bit表示地址编码方式：</li><li>0 : 4bit压缩;</li><li>1 : 8bit压缩</li><li>第二个bit表示NUMBER_MODE</li><li>0：RIL_CDMA_SMS_NUMBER_MODE_NOT_DATA_NETWORK</li><li>接着8bit表示号码长度</li><li>0000 1011：11位号码</li></ul><h3 id="Bearer-data"><a href="#Bearer-data" class="headerlink" title="Bearer data"></a>Bearer data</h3><blockquote><p>08 4d 00 03 10 01 f8 01 3e 20 f0 01 90 01 78 01 90 01 62 df ca 70 04 b1 ac b1 ab b4 23 96 14 c6 70 01 62 96 3b 2b 12 b9 82 7a e3 10 c0 01 72 9f 54 4c 0b 10 8b b4 23 91 8a 75 d0 01 63 31 7a 70 02 9f 52 e0 7c f0 f8 03 06 08 12 29 19 26 16</p></blockquote><ul><li>0x08：data</li><li>0x4d：长度77</li></ul><p>Data的内容也是由字段组成:</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/sms_cdma_data.png" alt="Data"></p><h3 id="IDENTIFER"><a href="#IDENTIFER" class="headerlink" title="IDENTIFER"></a>IDENTIFER</h3><p>00 03 10 01 f8</p><ul><li>0x03：长度</li><li>0xf8：最后一个8bit中的第5个bit代表header_ind</li></ul><h3 id="USR-DATA"><a href="#USR-DATA" class="headerlink" title="USR DATA"></a>USR DATA</h3><blockquote><p>01 3e 20 f0 01 90 01 78 01 90 01 62 df ca 70 04 b1 ac b1 ab b4 23 96 14 c6 70 01 62 96 3b 2b 12 b9 82 7a e3 10 c0 01 72 9f 54 4c 0b 10 8b b4 23 91 8a 75 d0 01 63 31 7a 70 02 9f 52 e0 7c f0</p></blockquote><p>0x3e：长度</p><blockquote><p>20 f0 01: 0010 0000 1111 0000 0000 0001</p></blockquote><ul><li>前5个bit表示编码方式： 7bit（0x02） 、8bit （其他）、UCS2（0x04）</li><li>接着8个bit表示字符长度,剩余部分为数据</li></ul><h3 id="TIME-STAMP"><a href="#TIME-STAMP" class="headerlink" title="TIME_STAMP"></a>TIME_STAMP</h3><blockquote><p>03 06 08 12 29 19 26 16</p></blockquote><ul><li>0x06：长度</li><li>08 12 29 19 26 16：08年12月29号19时26分16秒</li></ul><h2 id="短信解码示例"><a href="#短信解码示例" class="headerlink" title="短信解码示例"></a>短信解码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iconv.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HIGH_8BIT_MASK(N) (0xFF &lt;&lt; (N))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LOW_8BIT_MASK(N) (~HIGH_8BIT_MASK(N))</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gsmpdu_decode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *pdu)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ascii_to_hex</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *ascii, <span class="hljs-keyword">int</span> ascii_length, <span class="hljs-keyword">char</span> *hex, <span class="hljs-keyword">int</span> *hex_length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hex_to_ascii</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *hex, <span class="hljs-keyword">int</span> hex_length, <span class="hljs-keyword">char</span> *ascii, <span class="hljs-keyword">int</span> *ascii_length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dencode_ucs2</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_length, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> *out_length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_time</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *pdu, <span class="hljs-keyword">int</span> length, <span class="hljs-keyword">char</span> *timer)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_number</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *pdu_hex, <span class="hljs-keyword">int</span> number_length, <span class="hljs-keyword">char</span> *number)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">decode_8bit</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_length, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> *out_length)</span></span>;<br><span class="hljs-keyword">int</span> _7bit_to_ascii(<span class="hljs-keyword">char</span> *p_dst, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *p_src, <span class="hljs-keyword">int</span> src_size);<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gsmpdu_decode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *pdu)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pdu_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> number_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pdu_hex_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pdu_type = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> code_mode = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pdu_udl = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pdu_udhl = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> number[<span class="hljs-number">64</span>];<br>    <span class="hljs-keyword">char</span> timer[<span class="hljs-number">64</span>];<br>    <span class="hljs-keyword">char</span> usrdata[<span class="hljs-number">640</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> datalength = <span class="hljs-number">0</span>;<br><br>    pdu_length = <span class="hljs-built_in">strlen</span>(pdu);<br>    <span class="hljs-keyword">char</span> m_pdu[pdu_length + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strncpy</span>(m_pdu, pdu, pdu_length);<br><br>    pdu_hex_length = pdu_length / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">char</span> pdu_hex[pdu_hex_length];<br>    ascii_to_hex(pdu, pdu_length, pdu_hex, &amp;pdu_hex_length);<br><br>    pdu_type = pdu_hex[offset++];<br>    <span class="hljs-keyword">if</span> (pdu_type &amp; <span class="hljs-number">0x02</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;status!\n no this faction!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;message!\n&quot;</span>);<br>    &#125;<br><br>    number_length = pdu_hex[offset++] &amp; <span class="hljs-number">0xff</span>;<br>    <span class="hljs-keyword">if</span> (number_length &amp; <span class="hljs-number">0x01</span>)<br>        number_length++;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;number_length!\n&quot;</span>);<br>    &#125;<br><br>    number_length = number_length / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> num = get_number(pdu_hex + offset, number_length, number);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Call Number : %s\tNumber Length :%d\n&quot;</span>, number, num);<br>    offset += number_length;<br>    offset++; <span class="hljs-comment">/*PID*/</span><br><br>    code_mode = pdu_hex[offset++] &amp; <span class="hljs-number">0xff</span>; <span class="hljs-comment">/*dcs*/</span><br><br>    get_time(pdu_hex + offset, <span class="hljs-number">7</span>, timer);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Send Time : %s\n&quot;</span>, timer);<br>    offset += <span class="hljs-number">7</span>;<br><br>    pdu_udl = pdu_hex[offset++] &amp; <span class="hljs-number">0xff</span>; <span class="hljs-comment">/*udl*/</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, pdu_udl);<br><br>    <span class="hljs-keyword">if</span> (pdu_type &amp; <span class="hljs-number">0x40</span>)<br>    &#123;<br>        pdu_udhl = pdu_hex[offset] &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;do not decode UDH&quot;</span>);<br>        offset += pdu_udhl;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (code_mode &amp; <span class="hljs-number">0x08</span>)<br>    &#123;<br>        dencode_ucs2(pdu_hex + offset, pdu_udl, usrdata, &amp;datalength);<br>        <span class="hljs-comment">//ucs-2</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, usrdata);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code_mode &amp; <span class="hljs-number">0x04</span>)<br>    &#123;<br>        decode_8bit(pdu_hex + offset + pdu_udhl, pdu_udl - pdu_udhl, usrdata, &amp;datalength);<br>        <span class="hljs-comment">//8-bit</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, usrdata);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        _7bit_to_ascii(usrdata, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)(pdu_hex + offset), pdu_udl);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, usrdata);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ascii_to_hex</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *ascii, <span class="hljs-keyword">int</span> ascii_length, <span class="hljs-keyword">char</span> *hex, <span class="hljs-keyword">int</span> *hex_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (ascii == <span class="hljs-literal">NULL</span> || hex == <span class="hljs-literal">NULL</span> || hex_length == <span class="hljs-literal">NULL</span> || ascii_length &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; index &lt; ascii_length; index++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (index % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        &#123;<br>            hex[index / <span class="hljs-number">2</span>] = <span class="hljs-number">0x00</span>;<br>            length++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            hex[index / <span class="hljs-number">2</span>] = hex[index / <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">4</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ascii[index] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ascii[index] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        &#123;<br>            hex[index / <span class="hljs-number">2</span>] |= ascii[index] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ascii[index] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; ascii[index] &lt;= <span class="hljs-string">&#x27;f&#x27;</span>)<br>        &#123;<br>            hex[index / <span class="hljs-number">2</span>] |= ascii[index] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ascii[index] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; ascii[index] &lt;= <span class="hljs-string">&#x27;F&#x27;</span>)<br>        &#123;<br>            hex[index / <span class="hljs-number">2</span>] |= ascii[index] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    *hex_length = length;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hex_to_ascii</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *hex, <span class="hljs-keyword">int</span> hex_length, <span class="hljs-keyword">char</span> *ascii, <span class="hljs-keyword">int</span> *ascii_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> temp = <span class="hljs-number">0x00</span>;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (hex == <span class="hljs-literal">NULL</span> || hex_length &lt;= <span class="hljs-number">0</span> || ascii == <span class="hljs-literal">NULL</span> || ascii_length == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; index &lt; hex_length; index++)<br>    &#123;<br>        temp = (hex[index] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>;<br><br>        <span class="hljs-keyword">if</span> (temp &gt;= <span class="hljs-number">0x00</span> &amp;&amp; temp &lt;= <span class="hljs-number">0x09</span>)<br>        &#123;<br>            ascii[length] = temp + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp &gt;= <span class="hljs-number">0x0A</span> &amp;&amp; temp &lt;= <span class="hljs-number">0x0F</span>)<br>        &#123;<br>            ascii[length] = temp - <span class="hljs-number">0x0A</span> + <span class="hljs-string">&#x27;A&#x27;</span>;<br>        &#125;<br>        length++;<br><br>        temp = hex[index] &amp; <span class="hljs-number">0x0F</span>;<br>        <span class="hljs-keyword">if</span> (temp &gt;= <span class="hljs-number">0x00</span> &amp;&amp; temp &lt;= <span class="hljs-number">0x09</span>)<br>        &#123;<br>            ascii[length] = temp + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp &gt;= <span class="hljs-number">0x0A</span> &amp;&amp; temp &lt;= <span class="hljs-number">0x0F</span>)<br>        &#123;<br>            ascii[length] = temp - <span class="hljs-number">0x0A</span> + <span class="hljs-string">&#x27;A&#x27;</span>;<br>        &#125;<br>        length++;<br>    &#125;<br><br>    *ascii_length = length;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">decode_8bit</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_length, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> *out_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (in == <span class="hljs-literal">NULL</span> || in_length &lt;= <span class="hljs-number">0</span> || out == <span class="hljs-literal">NULL</span> || out_length == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; in_length; index++)<br>    &#123;<br>        out[length++] = in[index];<br>    &#125;<br>    *out_length = length;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dencode_ucs2</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_length1, <span class="hljs-keyword">char</span> *out, <span class="hljs-keyword">int</span> *out_length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">iconv_t</span> icon_handler = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> in_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> *inbuff;<br>    <span class="hljs-keyword">int</span> out_buffer_length;<br>    <span class="hljs-keyword">char</span> *out_buffer;<br>    <span class="hljs-keyword">char</span> temp = <span class="hljs-number">0x00</span>;<br>    in_length = in_length1;<br>    out_buffer_length = *out_length;<br><br>    <span class="hljs-keyword">if</span> (in == <span class="hljs-literal">NULL</span> || in_length &lt;= <span class="hljs-number">0</span> || in_length % <span class="hljs-number">2</span> != <span class="hljs-number">0</span> || out == <span class="hljs-literal">NULL</span> || out_length == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; in_length; index += <span class="hljs-number">2</span>)<br>    &#123;<br>        temp = in[index];<br>        in[index] = in[index + <span class="hljs-number">1</span>];<br>        in[index + <span class="hljs-number">1</span>] = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((icon_handler = iconv_open(<span class="hljs-string">&quot;utf-8&quot;</span>, <span class="hljs-string">&quot;ucs-2&quot;</span>)) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    out_buffer = out;<br>    inbuff = in;<br>    <span class="hljs-keyword">if</span> (iconv(icon_handler, &amp;inbuff, (<span class="hljs-keyword">size_t</span> *)&amp;in_length, &amp;out_buffer, (<span class="hljs-keyword">size_t</span> *)&amp;out_buffer_length) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;decode_ucs2 errno = %d.\n&quot;</span>, errno);<br>        iconv_close(icon_handler);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    iconv_close(icon_handler);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> _7bit_to_ascii(<span class="hljs-keyword">char</span> *p_dst, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *p_src, <span class="hljs-keyword">int</span> src_size)<br>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> high_part, low_part;<br>    left = <span class="hljs-number">8</span>;<br><br>    n = (src_size * <span class="hljs-number">8</span>) / <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-number">8</span>)<br>        &#123;<br><br>            p_dst[i] = p_src[pos] &amp; LOW_8BIT_MASK(<span class="hljs-number">7</span>);<br>            left -= <span class="hljs-number">7</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (left == <span class="hljs-number">7</span>)<br>        &#123;<br>            p_dst[i] = (p_src[pos] &amp; HIGH_8BIT_MASK(<span class="hljs-number">8</span> - left)) &gt;&gt; (<span class="hljs-number">8</span> - left);<br>            left = <span class="hljs-number">8</span>;<br>            pos++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            low_part = high_part = <span class="hljs-number">0</span>;<br>            low_part = (p_src[pos] &amp; HIGH_8BIT_MASK(<span class="hljs-number">8</span> - left)) &gt;&gt; (<span class="hljs-number">8</span> - left);<br>            high_part = (p_src[pos + <span class="hljs-number">1</span>] &amp; LOW_8BIT_MASK(<span class="hljs-number">7</span> - left)) &lt;&lt; left;<br>            p_dst[i] = high_part | low_part;<br>            left = <span class="hljs-number">8</span> - (<span class="hljs-number">7</span> - left);<br>            pos++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_number</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *pdu_hex, <span class="hljs-keyword">int</span> number_length, <span class="hljs-keyword">char</span> *number)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num_length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">int</span> type = pdu_hex[offset++] &amp; <span class="hljs-number">0xff</span>;<br>    <span class="hljs-keyword">if</span> (type == <span class="hljs-number">145</span>)<br>    &#123;<br>        number[index++] = <span class="hljs-string">&#x27;+&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error!\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; i &lt; number_length; i++)<br>    &#123;<br>        pdu_hex[offset + i] = ((pdu_hex[offset + i] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0f</span>) | ((pdu_hex[offset + i] &lt;&lt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xf0</span>);<br>    &#125;<br><br>    hex_to_ascii(pdu_hex + offset, number_length - <span class="hljs-number">1</span>, number + index, &amp;num_length);<br>    <span class="hljs-keyword">if</span> (number[num_length + index - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;f&#x27;</span> || number[num_length + index - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;F&#x27;</span>)<br>    &#123;<br>        number[num_length + index - <span class="hljs-number">1</span>] = <span class="hljs-number">0x00</span>;<br>        num_length--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num_length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_time</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *pdu, <span class="hljs-keyword">int</span> length, <span class="hljs-keyword">char</span> *timer)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*int offset = 0;</span><br><span class="hljs-comment">    int timer_length = 0;</span><br><span class="hljs-comment">    int i = 0;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    for(;i&lt;length;i++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        pdu_hex[offset+i] = ((pdu_hex[offset+i]&gt;&gt;4)&amp;0x0f)|((pdu_hex[offset+i]&lt;&lt;4)&amp;0xf0);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    return hex_to_ascii(pdu_hex+offset, length-1, timer, &amp;timer_length);*/</span><br><br>    <span class="hljs-keyword">int</span> year = <span class="hljs-number">2000</span>;<br>    <span class="hljs-keyword">int</span> mouth = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> day = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> hour = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> minute = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> second = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> zone = <span class="hljs-number">0</span>;<br><br>    year += ((pdu[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>) + (pdu[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x0F</span>) * <span class="hljs-number">10</span>;<br>    mouth += ((pdu[<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>) + (pdu[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x0F</span>) * <span class="hljs-number">10</span>;<br>    day += ((pdu[<span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>) + (pdu[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x0F</span>) * <span class="hljs-number">10</span>;<br>    hour += ((pdu[<span class="hljs-number">3</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>) + (pdu[<span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x0F</span>) * <span class="hljs-number">10</span>;<br>    minute += ((pdu[<span class="hljs-number">4</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>) + (pdu[<span class="hljs-number">4</span>] &amp; <span class="hljs-number">0x0F</span>) * <span class="hljs-number">10</span>;<br>    second += ((pdu[<span class="hljs-number">5</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>) + (pdu[<span class="hljs-number">5</span>] &amp; <span class="hljs-number">0x0F</span>) * <span class="hljs-number">10</span>;<br>    zone += ((pdu[<span class="hljs-number">6</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>) + (pdu[<span class="hljs-number">6</span>] &amp; <span class="hljs-number">0x0F</span>) * <span class="hljs-number">10</span>;<br><br>    <span class="hljs-built_in">sprintf</span>(timer, <span class="hljs-string">&quot;%04d-%02d-%02d %02d:%02d:%02d&quot;</span>, year, mouth, day, hour, minute, second);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*DCS:08*/</span><br>    <span class="hljs-keyword">char</span> *p = <span class="hljs-string">&quot;240D91687113988853F90000126080916090230F31D98C56B3FD403FD00FF403&quot;</span>;<br>    <span class="hljs-keyword">char</span> *q = <span class="hljs-string">&quot;240D91688102200982F60104218003816024230b68656c6c6f20776f726c64&quot;</span>;<br>    <span class="hljs-keyword">char</span> *b = <span class="hljs-string">&quot;240D91688102200982F60100218003816024230bc8329bfd065ddf72363904&quot;</span>;<br>    <span class="hljs-keyword">char</span> *test = <span class="hljs-string">&quot;240D91688102200982F601002180038160242304D4F29C0E&quot;</span>;<br>    gsmpdu_decode(p);<br>    gsmpdu_decode(q);<br>    gsmpdu_decode(b);<br>    gsmpdu_decode(test);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlite3</title>
    <link href="/2021/06/30/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/sqlite3/"/>
    <url>/2021/06/30/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/sqlite3/</url>
    
    <content type="html"><![CDATA[<h1 id="sqlite3"><a href="#sqlite3" class="headerlink" title="sqlite3"></a>sqlite3</h1><p>最近工作中用到了数据库，具体使用是，打开数据库-&gt;进行数据库操作-&gt;关闭数据库</p><h2 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h2><p>sqlite3有三个打开数据库的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sqlite3_open</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename,   <span class="hljs-comment">/* Database filename (UTF-8) */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    sqlite3 **ppDb          <span class="hljs-comment">/* OUT: SQLite db handle */</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sqlite3_open16</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *filename,   <span class="hljs-comment">/* Database filename (UTF-16) */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    sqlite3 **ppDb          <span class="hljs-comment">/* OUT: SQLite db handle */</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sqlite3_open_v2</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename,   <span class="hljs-comment">/* Database filename (UTF-8) */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    sqlite3 **ppDb,         <span class="hljs-comment">/* OUT: SQLite db handle */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> flags,              <span class="hljs-comment">/* Flags */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *zVfs        <span class="hljs-comment">/* Name of VFS module to use */</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>其中sqlite3_open()和sqlite3_open16()都是可读可写打开数据库，如果数据库不存在，则创建数据库；它们的区别在于数据库名称的编码，前者是UTF-8，后者是UTF-16</p><p>sqlite3_open_v2()则是sqlite3_open()的升级，它可以通过flags参数，指定打开数据库的模式</p><h2 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h2><p>关闭数据库比较简单直接使用sqlite3_close(sqlite3 *db)就可以了，关于sqlite3_close_v2()我没有深入了解</p><p>关于打开和关闭数据库，我在在项目中是这样使用的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> result;<br>sqlite3 *db;<br><br><span class="hljs-keyword">if</span> (access(FILE, F_OK) != <span class="hljs-number">0</span>)<br>&#123;<br>    result = sqlite3_open_v2(FILE, &amp;db, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, <span class="hljs-literal">NULL</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    result = sqlite3_open_v2(FILE, &amp;db, SQLITE_OPEN_READWRITE, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (result != SQLITE_OK)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error:%s\n&quot;</span>, sqlite3_errmsg(db));<br>    sqlite3_close(db);<br>&#125;<br></code></pre></td></tr></table></figure><p>判断数据库是否存在，如果不存在则创建，并以可读可写模式打开；如果存在则直接以可读可写模式打开(注：由于我有一个全局变量保存SQLite db handle所以没有直接关闭数据库)</p><h2 id="执行SQLite语句"><a href="#执行SQLite语句" class="headerlink" title="执行SQLite语句"></a>执行SQLite语句</h2><p>执行SQL语句需要用到sqlite3_exec()函数，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sqlite3_exec</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    sqlite3* pDB,        <span class="hljs-comment">/* sqlite3句柄 */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* sql,    <span class="hljs-comment">/* 被执行的 SQL 语句 */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> (*callback)(<span class="hljs-keyword">void</span>*,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">char</span>**,<span class="hljs-keyword">char</span>**),  <span class="hljs-comment">/* 执行/查询回调函数 */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">void</span>* pvoid,    <span class="hljs-comment">/* 传递给回调函数的第一个参数 */</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span>**errmsg    <span class="hljs-comment">/* 错误输出信息 */</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>sqlite3_exec()接口执行多条以”; “分隔的SQL语句。如果回调函数不为 NULL, 则它对每一个行查询结果都会调用该回调函数. 如果没有回调函数被指定, sqlite3_exec() 只是简单地忽略查询结果</p><p>当在执行该SQL语句发生错误时, 执行将发生中断, 并且后面的语句也全部被忽略</p><p>如果 errmsg 参数不为空任何错误信息将会被写进由 sqlite3_malloc() 得到的的内存空间中, 即 errmsg 指向的内存。为了避免内存泄漏, 应用程序应该在不需要该错误信息后立即调用 sqlite3_free() 释放该内存空间。如果 errmsg 参数不为 NULL, 并且没有错误发生, errmsg 被设置为 NULL</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">do</span><br>&#123;<br>    result = sqlite3_exec(db, db_cmd_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">while</span> (result == SQLITE_BUSY);<br><br><span class="hljs-keyword">if</span> (result == SQLITE_OK)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error:%s\n&quot;</span>, sqlite3_errmsg(db));<br>&#125;<br></code></pre></td></tr></table></figure><p>db_cmd_buf里放的就是我们需要执行的SQL语句</p><h2 id="SQLite语句"><a href="#SQLite语句" class="headerlink" title="SQLite语句"></a>SQLite语句</h2><p>SQLite 是不区分大小写的，但也有一些命令是大小写敏感的，比如 GLOB 和 glob 在 SQLite 的语句中有不同的含义</p><p>下面是在C/C++ 中传递给sqlite3_exec()函数的几类SQLite语句：</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>创建表的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqlite3">CREATE TABLE table_name<br>(<br>   column1 datatype  PRIMARY KEY(one or more columns),<br>   column2 datatype,<br>   column3 datatype,<br>   .....<br>   columnN datatype,<br>);<br></code></pre></td></tr></table></figure><p>CREATE TABLE 是告诉数据库系统创建一个新表的关键字。CREATE TABLE 语句后跟着表的唯一的名称或标识</p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>删除表的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite3">DROP TABLE table_name;<br></code></pre></td></tr></table></figure><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>添加数据语句有两种基本语法，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqlite3">INSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)] VALUES (value1, value2, value3,...valueN);<br><br>INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);<br></code></pre></td></tr></table></figure><p>在这里，column1, column2,…columnN 是要插入数据的表中的列的名称。如果要为表中的所有列添加值，您也可以不需要在 SQLite 查询中指定列名称。但要确保值的顺序与列在表中的顺序一致</p><h3 id="WHERE-AND-OR"><a href="#WHERE-AND-OR" class="headerlink" title="WHERE AND OR"></a>WHERE AND OR</h3><p>SQLite的 WHERE 子句用于指定从一个表或多个表中获取数据的条件。</p><p>如果满足给定的条件，即为真（true）时，则从表中返回特定的值。您可以使用 WHERE 子句来过滤记录，只获取需要的记录。</p><p>WHERE 子句不仅可用在 SELECT 语句中，它也可用在 UPDATE、DELETE 语句中，等等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sqlite3">SQLite 语句 WHERE [condition1] AND [condition2]...AND [conditionN];<br>SQLite 语句 WHERE [condition1] OR [condition2]...OR [conditionN];<br></code></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>SQLite 的 DELETE 查询用于删除表中已有的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqlite3">DELETE FROM table_name<br><br>DELETE FROM table_name WHERE [condition];<br></code></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>SQLite 的 UPDATE 查询用于修改表中已有的记录。可以使用带有 WHERE 子句的 UPDATE 查询来更新选定行，否则所有的行都会被更新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite3">UPDATE table_name SET column1 = value1, column2 = value2...., columnN = valueN WHERE [condition];<br></code></pre></td></tr></table></figure><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><p>SQLite 的 SELECT 语句用于从 SQLite 数据库表中获取数据，以结果表的形式返回数据。这些结果表也被称为结果集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">SELECT column1, column2, columnN FROM table_name;<br><br>SELECT * FROM table_name;<br><br>SELECT * FROM table_name WHERE [condition];<br></code></pre></td></tr></table></figure><ul><li>column1, column2…是表的字段，他们的值即是要获取的</li><li>*代表所有字段</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此次完成的工作是完成Traffic service：从modem获取lte流量，创建定时器计算每天每月每年的数据，并保存到数据库中</p><p>数据库部分，主要完成一个traffic_db_new_command_buffer()函数来根据不同的需求返回不同的语句，然后调用sqlite3_exec()函数执行，最后在回调函数中查询结果</p><p>贴出traffic_db_new_command_buffer()函数部分代码仅供参考：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">traffic_db_new_command_buffer</span><span class="hljs-params">(COMMAND_TYPE traffic_cmd_type, TABLE_TYPE table, ITEM_INFO *traffic_info, <span class="hljs-keyword">char</span> *select_tag, <span class="hljs-keyword">char</span> *where_tag)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *db_cmd_buff;<br>    <span class="hljs-keyword">size_t</span> cmd_buff_sizes = <span class="hljs-number">512</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    TABLE_INFO *ptaffic_table_info;<br>    db_cmd_buff = <span class="hljs-built_in">malloc</span>(cmd_buff_sizes + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">if</span> (db_cmd_buff != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">switch</span> (traffic_cmd_type)<br>        &#123;<br>        <span class="hljs-keyword">case</span> SELECT_COUNT_FROM:<br>            <span class="hljs-built_in">sprintf</span>(db_cmd_buff, <span class="hljs-string">&quot;SELECT count(*) FROM %s&quot;</span>, ptaffic_table_info-&gt;table_name);<br>            <span class="hljs-keyword">return</span> db_cmd_buff;<br><br>        <span class="hljs-keyword">case</span> ELECT_COUNT_FROM_WHERE:<br>            <span class="hljs-built_in">sprintf</span>(db_cmd_buff, <span class="hljs-string">&quot;SELECT count(*) FROM %s WHERE %s;&quot;</span>, ptaffic_table_info-&gt;table_name, where_tag);<br>            <span class="hljs-keyword">return</span> db_cmd_buff;<br><br>        <span class="hljs-keyword">case</span> SELECT_FROM_WHERE:<br>            <span class="hljs-built_in">sprintf</span>(db_cmd_buff, <span class="hljs-string">&quot;SELECT * FROM %s WHERE %s;&quot;</span>, ptaffic_table_info-&gt;table_name, where_tag);<br>            <span class="hljs-keyword">return</span> db_cmd_buff;<br><br>        <span class="hljs-keyword">case</span> SELECT_FROM:<br>            <span class="hljs-built_in">sprintf</span>(db_cmd_buff, <span class="hljs-string">&quot;SELECT * FROM %s ;&quot;</span>, ptaffic_table_info-&gt;table_name);<br>            <span class="hljs-keyword">return</span> db_cmd_buff;<br><br>        <span class="hljs-keyword">case</span> DELETE_FROM:<br>            <span class="hljs-built_in">sprintf</span>(db_cmd_buff, <span class="hljs-string">&quot;DELETE from %s;&quot;</span>, ptaffic_table_info-&gt;table_name);<br>            <span class="hljs-keyword">return</span> db_cmd_buff;<br><br>        <span class="hljs-keyword">case</span> DELETE_FROM_WHERE:<br>            <span class="hljs-built_in">sprintf</span>(db_cmd_buff, <span class="hljs-string">&quot;DELETE from %s WHERE %s;&quot;</span>, ptaffic_table_info-&gt;table_name, where_tag);<br>            <span class="hljs-keyword">return</span> db_cmd_buff;<br><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">free</span>(db_cmd_buff);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>套接字2</title>
    <link href="/2021/06/30/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%A5%97%E6%8E%A5%E5%AD%972/"/>
    <url>/2021/06/30/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%A5%97%E6%8E%A5%E5%AD%972/</url>
    
    <content type="html"><![CDATA[<h1 id="socket套接字（2）"><a href="#socket套接字（2）" class="headerlink" title="socket套接字（2）"></a>socket套接字（2）</h1><h2 id="socket编程基本函数"><a href="#socket编程基本函数" class="headerlink" title="socket编程基本函数"></a>socket编程基本函数</h2><p>socket编程的基本函数有socket()、bind()、listen()、accept()、send()、sendto()、recv()以及recvfrom()等，函数说明如下：</p><ul><li>socket() ：该函数用于建立一个socket连接，可指定socket类型等信息。在建立了socket连接后，可对sockaddr或sockaddr_in结构体进行初始化，以保存所建立的socket地址信息</li><li>bind()：该函数是用于将本地IP地址绑定到端口号，若绑定其他IP地址则不成成功，主要用于TCP的连接</li><li>listen()：在服务端程序建立套接字和地址绑定之后，还需要准备在该套接字上接收新的连接请求。此时调用listen()函数来创建一个等待队列，在其中存放未处理的客户端连接请求</li><li>accept()：服务端程序调用listen()函数创建等待队列之后，调用accept()函数等待并接收客户端的连接请求。它通常在bind()所创建的等待队列中取出第一个未处理的连接请求</li><li>send()和recv()：分别用于发送和接收数据</li><li>sendto()和recvfrom()：和send()和recv()类似，UDP时可以用在没有使用connect()的情况</li></ul><h2 id="socket编程流程"><a href="#socket编程流程" class="headerlink" title="socket编程流程"></a>socket编程流程</h2><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/sockettcp.png" alt="tcp"></p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/socketudp.png" alt="udp"></p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">socket</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> family, <span class="hljs-keyword">int</span> type, <span class="hljs-keyword">int</span> protocol)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bind</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sockfd, struct sockaddr *my_addr, <span class="hljs-keyword">int</span> addrlen)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">listen</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sockfd, <span class="hljs-keyword">int</span> backlog)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">accept</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sockfd, struct sockaddr *addr, <span class="hljs-keyword">socklen_t</span> *addrlen)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">connect</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sockfd, struct sockaddr *serv_addr, <span class="hljs-keyword">int</span> addrlen)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">send</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sockfd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *msg, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> flags)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">recv</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sockfd, <span class="hljs-keyword">void</span> *buff, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PORT            4321</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFF_SIZE       1024</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_QUE_CONN_NM 5</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_sockaddr</span>, <span class="hljs-title">client_sockaddr</span>;</span><br>    <span class="hljs-keyword">int</span> sin_size, recvbytes;<br>    <span class="hljs-keyword">int</span> sockfd, client_fd;<br>    <span class="hljs-keyword">char</span> buf[BUFF_SIZE];<br><br>    <span class="hljs-comment">/*建立socket连接*/</span><br>    <span class="hljs-keyword">if</span> ((sockfd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;socket fd = %d\n&quot;</span>, sockfd);<br><br>    server_sockaddr.sin_family = AF_INET;<br>    server_sockaddr.sin_port = htons(PORT);<br>    server_sockaddr.sin_addr.s_addr = INADDR_ANY;<br>    <span class="hljs-built_in">memset</span>(&amp;(server_sockaddr.sin_zero), <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;i, <span class="hljs-keyword">sizeof</span> (i));<br>    <span class="hljs-keyword">if</span> (bind(sockfd, (struct sockaddr *)&amp;server_sockaddr, <span class="hljs-keyword">sizeof</span> (struct sockaddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;bind&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Bind success!\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (listen (sockfd, MAX_QUE_CONN_NM) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;listen&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Listening.....\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> ((client_fd = accept (sockfd, (struct sockaddr *)&amp;client_sockaddr, &amp;sin_size)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;accept&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span> (buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>    <span class="hljs-keyword">if</span> ((recvbytes = recv (client_fd, buf, BUFF_SIZE, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;recv&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Recv : %s\n&quot;</span>, buf);<br>    close (sockfd);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PORT            4321</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFF_SIZE       1024</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> sockfd, sendbytes;<br>    <span class="hljs-keyword">char</span> buf[BUFF_SIZE];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span> *<span class="hljs-title">host</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">serv_addr</span>;</span><br><br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;USAGE: ./client Hostname(or ip address) Text\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((host = gethostbyname(argv[<span class="hljs-number">1</span>])) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;gethostbyname&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span> (buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> (buf));<br>    <span class="hljs-built_in">sprintf</span> (buf, <span class="hljs-string">&quot;%s&quot;</span>, argv[<span class="hljs-number">2</span>]);<br><br>    <span class="hljs-keyword">if</span> ((sockfd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;socket fd = %d\n&quot;</span>, sockfd);<br><br>    serv_addr.sin_family = AF_INET;<br>    serv_addr.sin_port = htons(PORT);<br>    serv_addr.sin_addr.s_addr = INADDR_ANY;<br>    <span class="hljs-built_in">memset</span>(&amp;(serv_addr.sin_zero), <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br><br>    <span class="hljs-keyword">if</span> (connect(sockfd, (struct sockaddr *)&amp;serv_addr, <span class="hljs-keyword">sizeof</span> (struct sockaddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;connect&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;connect success!\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> ((sendbytes = send (sockfd, buf, BUFF_SIZE, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;send&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//printf (&quot;Send : %s\n&quot;, buf);</span><br>    close (sockfd);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>套接字1</title>
    <link href="/2021/06/30/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%A5%97%E6%8E%A5%E5%AD%971/"/>
    <url>/2021/06/30/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%A5%97%E6%8E%A5%E5%AD%971/</url>
    
    <content type="html"><![CDATA[<h1 id="socket套接字（1）"><a href="#socket套接字（1）" class="headerlink" title="socket套接字（1）"></a>socket套接字（1）</h1><p>在Linux中的网络编程是通过socket接口来进行的，它也是一种文件描述符。socket是一种常用的进程之间通信机制，通过它不仅能实现本地机器上的进程之间的通信，而且通过网络能够在不同机器上的进程之间进行通信。</p><p>每一个Socket 都用一个半相关描述：</p><p>{协议，本地地址，本地端口}</p><p>一个完整的Socket 则用一个相关描述：</p><p>{协议，本地地址，本地端口，远程地址，远程端口}</p><h2 id="socket类型"><a href="#socket类型" class="headerlink" title="socket类型"></a>socket类型</h2><p>常见的socket有3种类型：</p><ol><li><p>流式socket(SOCK_STREAM) : 流式套接字提供可靠的、面向连接的通信流；它使用TCP协议，从而保证了数据传输的正确性和顺序性</p></li><li><p>数据报socket(SOCK_DGRAM) : 数据报套接字定义了一种无连接的服务，数据通过相互独立的报文进行传输，是无需并且不保证可靠、无差错的。它使用数据报协议UDP</p></li><li><p>原始socket(SOCK_RAW) : 原始套接字允许对底层协议进行直接访问，它功能强大，但使用较为复杂，主要用于协议的开发</p></li></ol><h2 id="地址结构相关处理"><a href="#地址结构相关处理" class="headerlink" title="地址结构相关处理"></a>地址结构相关处理</h2><p>地址相关的数据类型有以下两个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C">struck sockaddr<br>&#123;<br>    <span class="hljs-comment">/*地址族*/</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> sa_family;<br>    <span class="hljs-comment">/*14字节的协议地址，包含该socket的IP地址和端口号*/</span><br>    <span class="hljs-keyword">char</span> sa_data[<span class="hljs-number">14</span>];<br>&#125;;<br><br>struck sockaddr_in<br>&#123;<br>    <span class="hljs-comment">/*地址族*/</span><br>    <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> sa_family;<br>    <span class="hljs-comment">/*端口号*/</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> sin_port;<br>    <span class="hljs-comment">/*IP地址*/</span><br>    struck in_addr sin_addr;<br>    <span class="hljs-comment">/*填充0，以保持与struck sockaddr同样大小*/</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> sin_zero[<span class="hljs-number">8</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个数据类型是等效的，可以互相妆化，通常sockaddr_in使用更加方便</p><p>sa_family可选值有：</p><ul><li>AF_INET : IPv4协议</li><li>AF_INET6 : IPv6协议</li><li>AF_LOCAL : UNIX域协议</li><li>AF_LINK : 链路地址协议</li><li>AF_KEY : 密钥套接字</li></ul><h2 id="数据存储有点顺序"><a href="#数据存储有点顺序" class="headerlink" title="数据存储有点顺序"></a>数据存储有点顺序</h2><p>计算机数据存储有两种字节优先顺序：高位字节优先（大端模式）和低位字节优先（小端模式）,Internet上数据以高字节优先顺序在网络上传输，因此在有些情况下需要对这两个字节存储优先顺序进行相互转化。这里用到了4个函数：htons()、ntohs()、htonl()、ntohl()。这四个函数分别实现网络字节序和主机字节序的转化。h代表host，n代表network，s代表short，l代表long。通常16位的IP端口号用s代表，而IP地址用l代表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">uint16_t</span> <span class="hljs-title">htons</span> <span class="hljs-params">(<span class="hljs-keyword">unit16_t</span> host16bit)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">uint16_t</span> <span class="hljs-title">ntohs</span> <span class="hljs-params">(<span class="hljs-keyword">unit16_t</span> net16bit)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">uint16_t</span> <span class="hljs-title">htonl</span> <span class="hljs-params">(<span class="hljs-keyword">unit32_t</span> host32bit)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">uint16_t</span> <span class="hljs-title">ntohl</span> <span class="hljs-params">(<span class="hljs-keyword">unit32_t</span> net32bit)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="地址格式转化"><a href="#地址格式转化" class="headerlink" title="地址格式转化"></a>地址格式转化</h2><p>通常用户在表达地址时采用的是点分十进制表示的数值，而在socket编程中使用的是二进制值，这就需要将这两个值进行转换。IPv4中用到的函数有inet_aton()、inet_addr()和inet_ntoa()，IPv4和IPv6兼容的有inet_pton()和inet_ntop()。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-comment">//字符串转in_addr的函数：</span><br><span class="hljs-function"><span class="hljs-keyword">int_addr_t</span> <span class="hljs-title">inet_addr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *strptr)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">inet_aton</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* strptr,struct in_addr *addrptr)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">inet_pton</span><span class="hljs-params">(<span class="hljs-keyword">int</span> family,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* strptr,<span class="hljs-keyword">void</span> *addrptr)</span></span>;<br><br><span class="hljs-comment">//in_addr转字符串的函数：</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">inet_ntoa</span><span class="hljs-params">(struct in_addr inaddr)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">inet_ntop</span><span class="hljs-params">(<span class="hljs-keyword">int</span> famliy,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>*addrptr,<span class="hljs-keyword">char</span> *strptr,<span class="hljs-keyword">size_t</span> len)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="名字地址转换"><a href="#名字地址转换" class="headerlink" title="名字地址转换"></a>名字地址转换</h2><p>在Linux中实现主机名和地址的转换函数有：gethostbyname()、gethostbyaddr()和getaddrinfo()等。其中gethostbyname()是将主机名转化为IP地址，gethostbyaddr()则是逆操作</p><p>gethostbyname()、gethostbyaddr()都涉及一个hostent的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> *h_name; <span class="hljs-comment">/*正式主机名*/</span><br>    <span class="hljs-keyword">char</span> **h_aliases; <span class="hljs-comment">/*主机别名*/</span><br>    <span class="hljs-keyword">int</span> h_addrtype; <span class="hljs-comment">/*地址类型*/</span><br>    <span class="hljs-keyword">int</span> h_length; <span class="hljs-comment">/*地址长度*/</span><br>    <span class="hljs-keyword">char</span> **h_addr_list; <span class="hljs-comment">/*指向地址的指针数组*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>getaddrinfo()涉及一个addrinfo的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> ai_flags; <span class="hljs-comment">/*AI_PASSIVE, AI_CANONNAME*/</span><br>    <span class="hljs-keyword">int</span> ai_famuly; <span class="hljs-comment">/*地址族*/</span><br>    <span class="hljs-keyword">int</span> ai_socketype; <span class="hljs-comment">/*socket类型*/</span><br>    <span class="hljs-keyword">int</span> ai_protocol; <span class="hljs-comment">/*协议类型*/</span><br>    <span class="hljs-keyword">size_t</span> ai_addrlen; <span class="hljs-comment">/*地址字节长度*/</span><br>    <span class="hljs-keyword">char</span> *ai_canonname; <span class="hljs-comment">/*主机名*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> *<span class="hljs-title">ai_addr</span>;</span> <span class="hljs-comment">/*socket结构体*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ai_next</span>;</span> <span class="hljs-comment">/*下一个指针链表*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="gethostbyname"><a href="#gethostbyname" class="headerlink" title="gethostbyname()"></a>gethostbyname()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-function">struct hostent *<span class="hljs-title">gethostbyname</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *hostname)</span></span>;<br></code></pre></td></tr></table></figure><p>hostname : 主机名</p><p>成功返回hostent结构体指针，出错返回-1</p><h3 id="getaddrinfo"><a href="#getaddrinfo" class="headerlink" title="getaddrinfo()"></a>getaddrinfo()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getaddrinfo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *node, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *service, <span class="hljs-keyword">const</span> struct addrinfo *hints, struct addrinfo **result)</span></span>;<br></code></pre></td></tr></table></figure><p>node : 网络地址或网络主机名</p><p>service : 服务名或十进制的端口号字串</p><p>hints : 服务线索</p><p>result : 返回结果</p><p>成功返回0，出错返回-1</p><p>在调用之前，首先要对hints服务器线索进行设置，下面给出addrinfo常见的选项值</p><p>ai_flags:</p><ul><li>AI_PASSIVE 该套接口是用作被动打开</li><li>AI_CANONNAME 通知getaddrinfo函数返回主机的名字</li></ul><p>ai_family:</p><ul><li>AF_INET IPv4协议</li><li>AF_INET6 IPv6协议</li><li>AF_UNSPEC IPv4或IPv6协议</li></ul><p>ai_socktype :</p><ul><li>SOCK_STREAM 字节流套接字socket（TCP）</li><li>SOCK_DGRAM 数据报套接字spcket（UDP）</li></ul><p>ai_protocol:</p><ul><li>IPPROTO_IP IP协议</li><li>IPPROTO_IPV4 IPv4协议</li><li>IPPROTO_IPV6 IPv6协议</li><li>IPPROTO_UDP UDP</li><li>IPPROTO_TCP TCP</li></ul><blockquote><ul><li>通常服务端在调用getaddrinfo()之前，ai_flag设置AI_PASSIVE，用于bind()函数，主机名会设置为NULL</li><li>客户端调用getaddrinfo()时，ai_flags一般不设置AI_PASSIVE，但是主机名和服务名不应该为空</li></ul></blockquote><h3 id="getaddrinfo-用法"><a href="#getaddrinfo-用法" class="headerlink" title="getaddrinfo()用法"></a>getaddrinfo()用法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hints</span>, *<span class="hljs-title">res</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">int</span> rc;<br><br>    <span class="hljs-built_in">memset</span> (&amp;hints, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> (hints));<br>    hints.ai_flags = AI_CANONNAME;<br>    hints.ai_family = AF_UNSPEC;<br>    hints.ai_socktype = SOCK_DGRAM;<br>    hints.ai_protocol = IPPROTO_UDP;<br><br>    rc = getaddrinfo(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-literal">NULL</span>, &amp;hints, &amp;res);<br>    <span class="hljs-keyword">if</span> (rc != <span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;getaddrinfo&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Host name is %s\n&quot;</span>, res-&gt;ai_canonname);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号量</title>
    <link href="/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    <url>/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p>信号量是用来解决进程之间的同步与互斥问题的一种进程之间通信机制，包括一个称为信号量的变量和在该信号量下等待资源的进程等待队列，以及对信号量进行的两个原子操作（PV操作)。</p><p>信号量对应于某一种资源，去一个非负的整型值。信号量值指的是当前可用的资源的数量，若等于0则说明没有可用的资源。PV原子操作的具体定义如下：</p><ul><li>P操作：如果有可用资源（信号量值&gt;0），则占用一个资源（信号值减一，进入临界区代码）；如果没有可用资源（信号量值=0），则被阻塞，直到系统将资源分配给该进程。</li><li>V操作：如果在该信号量的等待队列中有进程在等待资源，则唤醒一个阻塞进程。如果没有进程等待它，则释放一个资源（信号量值加一）。</li></ul><p>最简单的信号量只能取0和1，叫做二维信号量。</p><h2 id="使用信号量的步骤"><a href="#使用信号量的步骤" class="headerlink" title="使用信号量的步骤"></a>使用信号量的步骤</h2><ol><li>创建信号量或获得在系统已存在的信号量，此时需要调用semget()函数。不同进程通过使用同一个信号量键值来获得同一个信号量</li><li>初始化信号量，此时使用semctl()函数的SETVAL操作。当使用二维信号量时，通常将信号量初始化为1</li><li>进行信号量的PV操作，此时调用semop()函数。这一步是实现进程之间的同步和互斥的核心工作部分</li><li>如果不需要信号量，则从系统中删除它，此时使用semctl()函数的IPC_RMID操作</li></ol><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="semget"><a href="#semget" class="headerlink" title="semget()"></a>semget()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/sem.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">semget</span> <span class="hljs-params">(<span class="hljs-keyword">key_t</span> ket, <span class="hljs-keyword">int</span> semflag)</span></span>;<br></code></pre></td></tr></table></figure><p>key:信号量的键值，多个进程可以通过它访问同一个信号量，其中有个特殊值IPC_PRIVATE。它用于创建当前进程的私有信号量</p><p>name:需要创建的信号量数目，通常取值为1</p><p>semflg:同open()函数的权限位，也可以用八进制表示法，其中使用IPC_CREAT标志创建新的信号量，即使该信号量已经存在，也不会出错。如果同时使用IPC_EXCL标志可以创建一个新的唯一的信号量，如果该信号量已经存在，该函数会出错</p><p>成功时，返回信号量标识符；出错时返回-1</p><h3 id="semctl"><a href="#semctl" class="headerlink" title="semctl()"></a>semctl()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/sem.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">semctl</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> semid, <span class="hljs-keyword">int</span> semnum, <span class="hljs-keyword">int</span> cmd, <span class="hljs-keyword">union</span> semun arg)</span></span>;<br></code></pre></td></tr></table></figure><p>semid:semget()函数返回的信号量标识</p><p>semnum:信号量编号，当使用信号量集时才会被用到，通常取值为0</p><p>cmd:指定对信号量的各种操作，使用单个信号量时通常有以下几种：</p><ul><li>IPC_STAT:获得该信号量的semid_ds结构，并存放在由第四个参数arg的buf指向的semid_ds结构中。semid_ds是系统中描述信号量的数据结构</li><li>IPC_SETVAL:将信号量值设置为arg的val值</li><li>IPC_GETVAL:返回信号量的当前值</li><li>IPC_RMID:从系统中删除信号量</li></ul><p>arg:是union semun结构，该结构可能在某些系统中并不给出定义，此时必须由自己定义:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">semun</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> val;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> *<span class="hljs-title">buf</span>;</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> *<span class="hljs-built_in">array</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>cmd为IPC_STAT、IPC_SETVAL、IPC_RMID时返回0，为IPC_GETVAL时返回信号量的当前值；出错返回-1</p><h3 id="semop"><a href="#semop" class="headerlink" title="semop()"></a>semop()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/sem.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">semop</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> semid, struct sembuf *sops, <span class="hljs-keyword">size_t</span> naops)</span></span>;<br></code></pre></td></tr></table></figure><p>semid:semget()函数返回的信号量标识</p><p>sops:指向信号量操作数组，一个数组包含以下成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">short</span> sem_num; <span class="hljs-comment">//信号量编号，使用单个信号量时，通常为0</span><br>    <span class="hljs-keyword">short</span> sem_op;  <span class="hljs-comment">//信号量操作-1表示P操作，+1表示V操作</span><br>    <span class="hljs-keyword">short</span> sem_flag;<span class="hljs-comment">//通常设置为SEM_UNDO。这样在进程没释放信号量而退出时会自动释放该信号量</span><br>&#125;<br></code></pre></td></tr></table></figure><p>成功返回信号量标识符，失败返回+1</p><h2 id="信号量的使用"><a href="#信号量的使用" class="headerlink" title="信号量的使用"></a>信号量的使用</h2><h3 id="信号量封装"><a href="#信号量封装" class="headerlink" title="信号量封装"></a>信号量封装</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;sem_com.h&quot;</span></span><br><br><span class="hljs-comment">/*信号量初始化*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init_sem</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id, <span class="hljs-keyword">int</span> init_value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">semun</span> <span class="hljs-title">sem_union</span>;</span><br>    sem_union.val = init_value;<br>    <span class="hljs-keyword">if</span> (semctl (sem_id, <span class="hljs-number">0</span>, SETVAL, sem_union) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;Initialize semaphore&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*删除信号量*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del_sem</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">semun</span> <span class="hljs-title">sem_union</span>;</span><br>    <span class="hljs-keyword">if</span> (semctl (sem_id, <span class="hljs-number">0</span>, IPC_RMID, sem_union) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;Delete semaphore&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*P操作*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_P</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sem_b</span>;</span><br>    sem_b.sem_num = <span class="hljs-number">0</span>;<br>    sem_b.sem_op = <span class="hljs-number">-1</span>;<br>    sem_b.sem_flg = SEM_UNDO;<br>    <span class="hljs-keyword">if</span> (semop(sem_id, &amp;sem_b, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;P operation&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*V操作*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_V</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sem_b</span>;</span><br>    sem_b.sem_num = <span class="hljs-number">0</span>;<br>    sem_b.sem_op = <span class="hljs-number">1</span>;<br>    sem_b.sem_flg = SEM_UNDO;<br>    <span class="hljs-keyword">if</span> (semop(sem_id, &amp;sem_b, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;V operation&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用封装"><a href="#使用封装" class="headerlink" title="使用封装"></a>使用封装</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;sem_com.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DELAY_TIME 3</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> result;<br>    <span class="hljs-keyword">int</span> sem_id;<br>    <span class="hljs-keyword">int</span> status;<br><br>    sem_id = semget (ftok (<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>), <span class="hljs-number">1</span>, <span class="hljs-number">0666</span>|IPC_CREAT);<br>    init_sem (sem_id, <span class="hljs-number">1</span>);<br><br>    result = fork ();<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;fork&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>)<br>    &#123;<br>        sem_P (sem_id);<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;child process will wait for som seconds...\n&quot;</span>);<br>        sleep (DELAY_TIME);<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;the returned value is %d in the child process (PID = %d)\n&quot;</span>, result, getpid());<br>        sem_V (sem_id);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        sem_P (sem_id);<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;the returned value is %d in the parent process (PID = %d)\n&quot;</span>, result, getpid());<br>        sem_V (sem_id);<br>        <br>    &#125;<br>    <span class="hljs-keyword">if</span> (waitpid (result, &amp;status, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFEXITED (status))<br>    &#123;<br>        del_sem (sem_id);<br>        <span class="hljs-keyword">return</span> WEXITSTATUS (status);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>共享内存</title>
    <link href="/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
    <url>/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h1><p>共享内存是一种最为高效的进程间通信方式。因为进程可以直接读写内存，不需要任何数据的复制。为了在多个进程间交换信息，内核专门留出了一块内存区。这段内存区可以由需要访问的进程将其映射到自己的私有地址空间。因此，进程就可以直接读写这一块内存区而不需要要进行数据的复制，从而大大提高了效率。</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/shmat.png" alt="共享内存"></p><h2 id="共享内存使用"><a href="#共享内存使用" class="headerlink" title="共享内存使用"></a>共享内存使用</h2><h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><p>共享内存的实现分为两个步骤：</p><ul><li>第一步是创建共享内存，这里用到的函数是shmget()，也就是从内存中获取一段共享内存区域</li><li>第二步映射共享内存，也就是把这段创建的共享内存映射到具体的进程空间中，这里使用的函数是shmat()</li><li>最后还有一个撤销映射的函数，shmdt()</li></ul><h3 id="函数格式"><a href="#函数格式" class="headerlink" title="函数格式"></a>函数格式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shmget</span> <span class="hljs-params">(<span class="hljs-keyword">key_t</span> key, <span class="hljs-keyword">int</span> size, <span class="hljs-keyword">int</span> shmflg)</span></span>;<br></code></pre></td></tr></table></figure><p>key:共享内存的键值，多个进程可以通过它访问同一个共享内存，IPC_PRIVATE用于创建当前进程的私有共享内存</p><p>size:共享内存的大小</p><p>shmflg:同open()函数的权限位，也可以使用八进制表示法</p><p>成功返回共享内存段标识符，出错返回-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">shmat</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> shmid, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *shmaddr, <span class="hljs-keyword">int</span> shmflg)</span></span>;<br></code></pre></td></tr></table></figure><p>shmid:要映射的共享内存区标识符</p><p>shmaddr:将共享内存映射到指定地址（0表示系统自动分配）</p><p>shmflg:默认0可读可写，SHM_RDONLY只读</p><p>成功返回被映射的段地址，出错返回-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shmdt</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *shmaddr)</span></span>;<br></code></pre></td></tr></table></figure><p>shmaddr:被映射的共享内存段地址</p><p>成功返回0，出错返回-1</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 2048</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> shmid;<br>    <span class="hljs-keyword">char</span> *shm_addr;<br>    <span class="hljs-keyword">char</span> flag[] = <span class="hljs-string">&quot;WROTE&quot;</span>;<br>    <span class="hljs-keyword">char</span> buff[BUFFER_SIZE] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-keyword">if</span> ((shmid = shmget (IPC_PRIVATE, BUFFER_SIZE, <span class="hljs-number">0666</span>)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;shmget&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Creat shared-memory: %d\n&quot;</span>, shmid);<br>    &#125;<br><br>    system (<span class="hljs-string">&quot;ipcs -m&quot;</span>);<br><br>    pid = fork ();<br><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;fork&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ( (shm_addr = shmat (shmid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) == (<span class="hljs-keyword">void</span>*) <span class="hljs-number">-1</span>)<br>        &#123;<br>            perror (<span class="hljs-string">&quot;Child: shmat&quot;</span>);<br>            <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Child: Attach shared-memory: %p\n&quot;</span>, shm_addr);<br>        &#125;<br>        system (<span class="hljs-string">&quot;ipcs -m&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strncmp</span> (shm_addr, flag, <span class="hljs-built_in">strlen</span> (flag)))<br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Child: Wait for enable data...\n&quot;</span>);<br>            sleep (<span class="hljs-number">5</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">strcpy</span> (buff, shm_addr + <span class="hljs-built_in">strlen</span> (flag));<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Child: Shared-memory : %s\n&quot;</span>, buff);<br><br>        <span class="hljs-keyword">if</span> ((shmdt (shm_addr)) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            perror (<span class="hljs-string">&quot;Child: shmdt&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Child: Deattach shared-memory\n&quot;</span>);<br>        &#125;<br>        system (<span class="hljs-string">&quot;ipcs -m&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> ( (shm_addr = shmat (shmid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) == (<span class="hljs-keyword">void</span>*) <span class="hljs-number">-1</span>)<br>        &#123;<br>            perror (<span class="hljs-string">&quot;Parent: shmat&quot;</span>);<br>            <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Parent: Attach shared-memory: %p\n&quot;</span>, shm_addr);<br>        &#125;<br>        sleep (<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\nInput some string:\n&quot;</span>);<br>        fgets (buff, BUFFER_SIZE, <span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-built_in">strncpy</span> (shm_addr + <span class="hljs-built_in">strlen</span> (flag), buff, <span class="hljs-built_in">strlen</span> (buff));<br>        <span class="hljs-built_in">strncpy</span> (shm_addr, flag, <span class="hljs-built_in">strlen</span> (flag));<br><br>        <span class="hljs-keyword">if</span> ((shmdt (shm_addr)) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            perror (<span class="hljs-string">&quot;Parent: shmdt&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Parent: Deattach shared-memory\n&quot;</span>);<br>        &#125;<br>        system (<span class="hljs-string">&quot;ipcs -m&quot;</span>);<br><br>        waitpid(pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">if</span> (shmctl (shmid, IPC_RMID, <span class="hljs-literal">NULL</span>) == <span class="hljs-number">-1</span>)<br>        &#123;<br>            perror (<span class="hljs-string">&quot;shmctl&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Delete shared-memory\n&quot;</span>);<br>        &#125;<br>        system (<span class="hljs-string">&quot;ipcs -m&quot;</span>);<br><br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Finished\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">exit</span> (<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列</title>
    <link href="/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <url>/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p>消息队列就是一些消息的列表。用户可以从消息队列中添加消息和读取消息等。从这点看，消息队列具有一定的FIFO特性，但是它可以实现消息的随即查询，比FIFO具有更大的优势。同时这些消息又是存在于内核中的，有“队列ID”来标识</p><h2 id="消息队列使用"><a href="#消息队列使用" class="headerlink" title="消息队列使用"></a>消息队列使用</h2><h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><p>消息队列的实现包括打开消息队列、添加消息、读取消息和控制消息队列这四种操作:</p><ul><li>创建和打开消息队列使用msggget()，创建消息队列的数量会受到系统消息队列数量的限制</li><li>添加消息使用msgsnd()，它把消息添加到已经打开的消息队列末尾</li><li>读取消息使用msgrcv()，它把消息从消息队列中取走，与FIFO不同它可以指定取走的消息</li><li>控制消息队列是以哦那个msgctl()，它可以完成多项功能</li></ul><h3 id="函数格式"><a href="#函数格式" class="headerlink" title="函数格式"></a>函数格式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msgget</span> <span class="hljs-params">(<span class="hljs-keyword">key_t</span> key, <span class="hljs-keyword">int</span> msgflg)</span></span>;<br></code></pre></td></tr></table></figure><p>key:消息队列的键值，多个进程可以通过它访问同一个消息队列，IPC_PRIVATE用于创建当前进程的私有消息队列</p><p>msgflg:权限标志位</p><p>成功返回消息队列ID，出错返回-1</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msgsnd</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> msqid, <span class="hljs-keyword">const</span> *msgp, <span class="hljs-keyword">size_t</span> msgsz, <span class="hljs-keyword">int</span> msgflg)</span></span>;<br></code></pre></td></tr></table></figure><p>msgid:消息队列的队列ID</p><p>msgp:指向消息结构的指针</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msgbuf</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">long</span> mtype; <span class="hljs-comment">//消息类型</span><br>    <span class="hljs-keyword">char</span> mtext[<span class="hljs-number">1</span>]; <span class="hljs-comment">//消息正文</span><br>&#125;<br></code></pre></td></tr></table></figure><p>msgsz:消息正文字节数</p><p>msgflg:0阻塞直到发送成功，IPC_NOWAIT消息无法立即发送则返回</p><p>成功返回0，出错返回1</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msgrcv</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> msqid, <span class="hljs-keyword">const</span> *msgp, <span class="hljs-keyword">size_t</span> msgsz, <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> msgtyp, <span class="hljs-keyword">int</span> msgflg)</span></span>;<br></code></pre></td></tr></table></figure><p>这个函数和msgsnd()差不多这里介绍两个不同的参数：</p><p>msgtyp:</p><ul><li>0 接收消息队列中的第一个消息</li><li>大于0 接收第一个类型为msgtyp的消息</li><li>小于0 接收第一个类型值不小于msgtyp绝对值且类型值又最小的消息</li></ul><p>msgflg:</p><ul><li>MSG_NOERROR 若返回的消息比msgsz字节多，则被截断到msgsz且不通知消息发送进程</li><li>IPC_NOWAIT 若没有相应类型的消息则立即返回</li><li>0 阻塞直到接收一条相应类型的消息</li></ul><p>成功返回0，出错返回-1</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msgctl</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> msqid, <span class="hljs-keyword">int</span> cmd, struct msgid_ds *buf)</span></span><br></code></pre></td></tr></table></figure><p>cmd:</p><ul><li>IPC_STAT 读取消息队列的数据结构msgid_ds，并将其存储在buf指定的地址中</li><li>IPC_SET 设置消息队列的数据结构msgid_ds中的ipc_perm域值，这个值取自buff</li><li>IPC_RMID 删除消息队列</li></ul><p>成功返回0，出错返回-1</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 512</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">long</span> msg_type;<br>    <span class="hljs-keyword">char</span> msg_text[BUFFER_SIZE];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> qid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">key_t</span> key;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message</span> <span class="hljs-title">msg</span>;</span><br><br>    <span class="hljs-keyword">if</span> ((key = ftok (<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;ftok&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((qid = msgget (key, IPC_CREAT|<span class="hljs-number">0666</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;msgget&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Open queue %d\n&quot;</span>, qid);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Enter some message to the queue:&quot;</span>);<br>        <span class="hljs-keyword">if</span> ((fgets (msg.msg_text, BUFFER_SIZE, <span class="hljs-built_in">stdin</span>)) == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-built_in">puts</span> (<span class="hljs-string">&quot;no message&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        msg.msg_type = getpid ();<br><br>        <span class="hljs-keyword">if</span> ((msgsnd (qid, &amp;msg, <span class="hljs-built_in">strlen</span> (msg.msg_text), <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            perror (<span class="hljs-string">&quot;message posted&quot;</span>);<br>            <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span> (msg.msg_text, <span class="hljs-string">&quot;quit&quot;</span>, <span class="hljs-number">4</span>) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">exit</span> (<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 512</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">long</span> msg_type;<br>    <span class="hljs-keyword">char</span> msg_text[BUFFER_SIZE];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> qid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">key_t</span> key;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message</span> <span class="hljs-title">msg</span>;</span><br><br>    <span class="hljs-keyword">if</span> ((key = ftok (<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;ftok&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((qid = msgget (key, IPC_CREAT|<span class="hljs-number">0666</span>)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;msgget&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Open queue %d\n&quot;</span>, qid);<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-built_in">memset</span> (msg.msg_text, <span class="hljs-number">0</span>, BUFFER_SIZE);<br><br>        <span class="hljs-keyword">if</span> ((msgrcv (qid, (<span class="hljs-keyword">void</span> *)&amp;msg, BUFFER_SIZE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            perror (<span class="hljs-string">&quot;msgrcv&quot;</span>);<br>            <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;The message from process %ld : %s&quot;</span>, msg.msg_type, msg.msg_text);<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strncmp</span> (msg.msg_text, <span class="hljs-string">&quot;quit&quot;</span>, <span class="hljs-number">4</span>));<br><br>    <span class="hljs-keyword">if</span> ((msgctl (qid, IPC_RMID, <span class="hljs-literal">NULL</span>)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;msgctl&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">exit</span> (<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号</title>
    <link href="/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E4%BF%A1%E5%8F%B7/"/>
    <url>/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h1><p>信号是UNIX中所使用的进程通信的一种最古老的方法，它是在软件层次上对中断机制的模拟，是一种异步通信方式。信号可以直接进行用户空间进程和内核空间进程之间的交互，内核进程也可以利用它来通知用户进程发生了哪些系统事件。它可以在任何时候发给某一进程而无需知道该进程的状态</p><p>一个完整的信号生命周期可分为三个重要阶段，三个重要阶段由四个重要事件刻画，如下图所示：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86.png" alt="信号处理"></p><blockquote><p>相邻的两个事件的间隔就是一个重要阶段</p></blockquote><p>一个不可靠的信号处理过程是这样的：如果发现该信号已经注册，那么忽略该信号。因此，若前一个信号还未注销又产生了相同的信号就会产生信号丢失。而当可靠信号发送给一个进程时，不管该信号是否已经在进程中注册，都会被再注册一次，因此信号不会丢失</p><p>用户进程对信号的相应有三种方式：</p><ul><li>忽略信号：即对信号不做任何处理，有两个信号不能被忽略，SIGKILL和SIGSTOP</li><li>捕捉信号：定义信号处理函数，当信号发生时，执行相应的自定义处理函数</li><li>执行默认操作：Linux对每种信号都规定了默认操作</li></ul><p>常见的信号及其默认操作如下：</p><table><thead><tr><th>信号</th><th>含义</th><th>默认操作</th></tr></thead><tbody><tr><td>SIGHUP</td><td>该信号在用户终端连接结束时发出，通常是在中端的控制进程结束时，通知同一会话内的各个作业与控制中断不再关联</td><td>终止</td></tr><tr><td>SIGINT</td><td>该信号在用户键入INTR字符(通常是Ctrl-C)时发出，终端驱动程序发送此信号并送到前台进程中的每一个进程</td><td>终止</td></tr><tr><td>SIGQUT</td><td>此信号与SIGINT类似，由QUIT字符(通常是Ctrl-\)来控制</td><td>终止</td></tr><tr><td>SIGILL</td><td>该信号在一个进程企图执行一条非法指令时(可执行文件本身出现错误，或者试图执行数据段、堆栈溢出时)发出</td><td>终止</td></tr><tr><td>SIGFPE</td><td>该信号在发生致命的运算错误时发出，这里不仅包括浮点运算错误，还包括溢出及除数为0等其他所有的算数错误</td><td>终止</td></tr><tr><td>SIGKILL</td><td>该信号用来立即结束程序的运行，并且不能被阻塞、处理或忽略</td><td>终止</td></tr><tr><td>SIGALRM</td><td>该信号当一个定时器到时的时候发出</td><td>终止</td></tr><tr><td>SIGSTOP</td><td>该信号用于暂停一个进程，并且不能被阻塞、处理或忽略</td><td>暂停进程</td></tr><tr><td>SIGTSTP</td><td>该信号用于交互停止进程，用户键入SUSP字符时(通常是Ctrl-Z)发出</td><td>停止进程</td></tr><tr><td>SIGCHLD</td><td>子进程改变状态时，父进程会收到这个信号</td><td>忽略</td></tr><tr><td>SIGABORT</td><td>进程异常终止时发出</td><td></td></tr></tbody></table><h2 id="信号发送和捕捉"><a href="#信号发送和捕捉" class="headerlink" title="信号发送和捕捉"></a>信号发送和捕捉</h2><h3 id="kill-和raise"><a href="#kill-和raise" class="headerlink" title="kill()和raise()"></a>kill()和raise()</h3><p>kill()函数可以发送信号给进程或进程组，raise函数向自身发送信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kill</span> <span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid, <span class="hljs-keyword">int</span> sig)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">raise</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sig)</span></span>;<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> ret;<br><br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>         <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Fork error!\n&quot;</span>);<br>         <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Child (pid:%d) is waiting for any signal\n&quot;</span>, getpid());<br><br>        raise(SIGSTOP);<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;exit\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        sleep(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> ((waitpid (pid, <span class="hljs-literal">NULL</span>, WNOHANG)) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((ret = kill (pid, SIGKILL)) == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Parent kill %d\n&quot;</span>, pid);<br>            &#125;<br>        &#125;<br><br>        waitpid(pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">Child (pid:472) is waiting for any signal</span><br><span class="hljs-comment">Parent kill 472</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="alarm-和pause"><a href="#alarm-和pause" class="headerlink" title="alarm()和pause()"></a>alarm()和pause()</h3><p>alarm()也称为闹钟函数，它可以在进程中设置一个定时器，当定时器指定的时间到时，他就向进程发送SIGALARM信号</p><p>pause()函数是用于将调用程序挂起直到捕捉到信号为止</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">alarm</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> seconds)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pause</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = alarm (<span class="hljs-number">5</span>);<br>    pause() ;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;I have been waken up \n&quot;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">Alarm clock</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="信号的处理"><a href="#信号的处理" class="headerlink" title="信号的处理"></a>信号的处理</h2><p>信号处理的主要方法由两种，一种是使用简单的signal()函数，另一种是使用信号集函数组</p><h3 id="信号处理函数"><a href="#信号处理函数" class="headerlink" title="信号处理函数"></a>信号处理函数</h3><p>使用signal()函数时，只需指出要处理的信号和处理函数即可。主要用于前32中非实时信号的处理，不支持信号传递信息</p><p>Linux还支持一个更强壮、更新的信号处理函数sigaction()，推荐使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sigal.h&gt;</span></span><br><span class="hljs-keyword">void</span> (*signal (<span class="hljs-keyword">int</span> signum, <span class="hljs-keyword">void</span> (*handler)(<span class="hljs-keyword">int</span>)))(<span class="hljs-keyword">int</span>);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigaction</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> signum, <span class="hljs-keyword">const</span> struct sigaction *act, struct sigaction *oldact)</span></span><br></code></pre></td></tr></table></figure><p>主要介绍一下sigaction()函数：</p><ul><li>signum：信号代码，可以为除了SIGKILL及SIGSTOP外的任何一个特定有效的信号</li><li>act：指向结构sigaction的一个实例的指针，指定对特定信号的处理</li><li>oldact：保存原来对应信号的处理</li></ul><p>sigaction的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">void</span> (*sa_handler) (<span class="hljs-keyword">int</span> signo);<br>    <span class="hljs-keyword">sigset_t</span> sa_mask;<br>    <span class="hljs-keyword">int</span> sa_flags;<br>    <span class="hljs-keyword">void</span> (*sa_restore) (<span class="hljs-keyword">void</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>sa_handler是一个函数指针，指定信号处理函数，这里除了可以是用户自定义的处理函数外，还可以是SIG_DFL或SIG_IGN。它的处理函数只有一个参数，即信号值</p><p>sa_mask是一个信号集，它可以指定在信号处理程序执行过程中哪些信号应当被频闭，在调用信号捕获函数之前，该信号集要加入到信号的信号屏蔽字中</p><p>sa_flag中包含了许多标志位，是对信号进行处理的各个选项。常见可选值如下：</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>SA_NODEFER\SA_NOMASK</td><td>当捕捉到此信号时，在执行其信号捕捉函数时，系统不会自动屏蔽此信号</td></tr><tr><td>SA_NOCLDSTOP</td><td>进程忽略子进程产生的任何SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU信号</td></tr><tr><td>SA_RESTART</td><td>令重启的系统调用起作用</td></tr><tr><td>SA_ONESHOT\SA_RESTHAND</td><td>自定义信号只执行一次，在执行完毕后恢复信号的系统默认动作</td></tr></tbody></table><p>例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">my_func</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sign_no)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (sign_no == SIGINT)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;I have get SIGINT\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sign_no == SIGQUIT)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;I have get SIGQUIT\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">my_signal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    signal (SIGQUIT, my_func);<br>    signal (SIGINT, my_func);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">my_sigaction</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">action</span>;</span><br><br>    action.sa_handler = my_func;<br>    sigemptyset (&amp;action.sa_mask);<br>    action.sa_flags = <span class="hljs-number">0</span>;<br>    sigaction (SIGINT, &amp;action, <span class="hljs-number">0</span>);<br>    sigaction (SIGQUIT, &amp;action, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Waiting for signal SIGINT or SIGQUIT...\n&quot;</span>);<br>    <span class="hljs-comment">//my_signal();</span><br>    my_sigaction();<br>    pause();<br>    <span class="hljs-built_in">exit</span> (<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">Waiting for signal SIGINT or SIGQUIT...</span><br><span class="hljs-comment">^CI have get SIGINT</span><br><span class="hljs-comment">Waiting for signal SIGINT or SIGQUIT...</span><br><span class="hljs-comment">^\I have get SIGQUIT</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="信号集函数组"><a href="#信号集函数组" class="headerlink" title="信号集函数组"></a>信号集函数组</h3><p>使用信号集函数组处理信号时涉及一系列的函数，这些函数按照调用的先后次序可分为以下几大功能模块：创建信号集合、注册信号处理函数以及检测信号。</p><p>其中，创建信号集合主要用于处理用户感兴趣的一些信号，其函数包括以下几个。</p><ul><li>sigemptyset(): 将信号集合初始化为空</li><li>sigfillset(): 将信号集和初始化为包含所有已定义的信号的集合</li><li>sigaddset(): 将指定信号加入到信号集合中</li><li>sigdelset(): 将指定信号从信号集合中删除</li><li>sigismember(): 查询指定信号是否在信号集合中</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigemptyset</span><span class="hljs-params">(<span class="hljs-keyword">sigset_t</span> *<span class="hljs-built_in">set</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigfillset</span><span class="hljs-params">(<span class="hljs-keyword">sigset_t</span> *<span class="hljs-built_in">set</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigaddset</span><span class="hljs-params">(<span class="hljs-keyword">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-keyword">int</span> signum)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigdelset</span><span class="hljs-params">(<span class="hljs-keyword">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-keyword">int</span> signum)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigismember</span><span class="hljs-params">(<span class="hljs-keyword">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-keyword">int</span> signum)</span></span>;<br></code></pre></td></tr></table></figure><p>注册信号处理函数主要用于决定进程如何处理信号，只有当信号的状态处于非阻塞状态时才会真正起作用。因此首先使用sigprocmask()函数检测并更改屏蔽字，然后使用sigaction()函数来定义进程接收到特定信号之后的行为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigprocmask</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> how, <span class="hljs-keyword">const</span> <span class="hljs-keyword">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-keyword">sigset_t</span> oset)</span></span><br></code></pre></td></tr></table></figure><p>how决定函数的操作方式：</p><ul><li>SIG_BLOCK:增加一个信号集合到当前进程的阻塞集合之外</li><li>SIG_UNBLOCK:从当前的阻塞集合之中删除一个信号集合</li><li>SIG_SETMASK:将当前信号集合设置为信号阻塞集合</li></ul><p>set:指定信号集</p><p>oset:信号屏蔽字</p><blockquote><p>若set是一个非空指针，则how表示函数的操作方式；若how为空，则表示忽略此操作</p></blockquote><p>因为被阻塞的信号不会传递给进程，所以这些信号就处于“未处理”信号。sigpending()函数允许检测到“未处理”信号，并进一步决定对他们作何处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigpending</span> <span class="hljs-params">(<span class="hljs-keyword">sigset_t</span> *<span class="hljs-built_in">set</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">my_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> signum)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;If you want to quit, please try SIGQUIT!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">sigset_t</span> <span class="hljs-built_in">set</span>, penset;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">action1</span>, <span class="hljs-title">action2</span>;</span><br><br>    <span class="hljs-comment">/*初始化信号为空*/</span><br>    <span class="hljs-keyword">if</span> (sigemptyset (&amp;<span class="hljs-built_in">set</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;sigemptyset&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*添加信号*/</span><br>    <span class="hljs-keyword">if</span> (sigaddset (&amp;<span class="hljs-built_in">set</span>, SIGQUIT) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;sigemptyset&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (sigaddset (&amp;<span class="hljs-built_in">set</span>, SIGINT) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;sigemptyset&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*添加动作*/</span><br>    <span class="hljs-keyword">if</span> (sigismember (&amp;<span class="hljs-built_in">set</span>, SIGINT))<br>    &#123;<br>        sigemptyset (&amp;action1.sa_mask);<br>        action1.sa_handler = my_func;<br>        action1.sa_flags = <span class="hljs-number">0</span>;<br>        sigaction (SIGINT, &amp;action1, <span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (sigismember (&amp;<span class="hljs-built_in">set</span>, SIGQUIT))<br>    &#123;<br>        sigemptyset (&amp;action2.sa_mask);<br>        action2.sa_handler = SIG_DFL;<br>        action2.sa_flags = <span class="hljs-number">0</span>;<br>        sigaction (SIGQUIT, &amp;action2, <span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*屏蔽set中的信号，并等待按任意键*/</span><br>    <span class="hljs-keyword">if</span> (sigprocmask (SIG_BLOCK, &amp;<span class="hljs-built_in">set</span>, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;sigprocmask&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Signal set was blocked , Press any key!\n&quot;</span>);<br>        getchar();<br>    &#125;<br><br>    <span class="hljs-comment">/*接收set中信号*/</span><br>    <span class="hljs-keyword">if</span> (sigprocmask (SIG_UNBLOCK, &amp;<span class="hljs-built_in">set</span>, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;sigprocmask&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Signal set is unblock state\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有名管道</title>
    <link href="/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93/"/>
    <url>/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="有名管道FIFO"><a href="#有名管道FIFO" class="headerlink" title="有名管道FIFO"></a>有名管道FIFO</h1><p>无名管道只能用于具有亲缘关系的进程之间，这大大的限制了管道的使用，有名管道的出现突破了这种限制，它可以使互不相关的两个进程实现彼此通信。该管道可以通过路径名来指出，并且在文件系统中是可见的。在建立管道之后，两个进程就可以把它当作普通文件一样进行读写操作。</p><p>值得注意的是，FIFO的读总是从开始处返回数据，写则是添加到末尾，不支持lseek()等文件定位操作</p><p>有名管道可以使用mkfifo()创建，该函数类似open()，可以指定管道的路径和打开模式</p><p>在创建管道成功以后，就可以使用open()、read()和write()这些函数了。与普通文件的开发设置一样，对于为读而打开的管道可以在open()中设置O_RDONLY，对于为写而打开的管道可在open()中设置O_WRONLY，不同的是阻塞问题。在管道的读写中会出现阻塞的可能，这里的非阻塞标志可以在open()中设定为O_NONBLOCK。下面分别对阻塞打开和非阻塞打开的读写进行分析：</p><p>对于读进程：</p><ul><li>若该管道是阻塞打开，且当前FIFO中没有数据，则对读进程而言将一直阻塞到有数据写入</li><li>若该管道是非阻塞打开，则不论FIFO内是否有数据，读进程都会立即执行读操作。如果没有数据则立即返回0</li></ul><p>对于写进程：</p><ul><li>若该管道是阻塞打开，则写操作一直阻塞到数据可以写入</li><li>若该管道是非阻塞打开而不能写入全部数据，则部分写入或调用失败</li></ul><h2 id="mkfifo"><a href="#mkfifo" class="headerlink" title="mkfifo()"></a>mkfifo()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/state.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mkfifo</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename, <span class="hljs-keyword">mode_t</span> mode)</span></span>;<br></code></pre></td></tr></table></figure><p>mode:</p><p>O_RDONLY : 读管道</p><p>O_WRONLY : 写管道</p><p>O_RDWR : 读写管道</p><p>O_NONBLOCK : 非阻塞</p><p>O_CREAT : 如果不存在则创建，并用第三个参数设置权限</p><p>O_EXCL : 如果使用O_CREAT时文件存在，返回错误消息</p><p>出错时的errno如下：</p><table><thead><tr><th>erron</th><th>描述</th></tr></thead><tbody><tr><td>EACCESS</td><td>参数filename所指定的目录无可执行权限</td></tr><tr><td>EEXIST</td><td>参数filename所指定的文件已存在</td></tr><tr><td>ENAMETOOLONG</td><td>参数filename的路径名称太长</td></tr><tr><td>ENOENT</td><td>参数filename包含的目录不存在</td></tr><tr><td>ENOSPC</td><td>文件系统的剩余空间不足</td></tr><tr><td>ENOTDIR</td><td>参数filename路径中的目录存在但却非真正的目录</td></tr><tr><td>EROFS</td><td>参数filename指定文件存在于只读文件系统内</td></tr></tbody></table><p>写管道：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MYFIFO  <span class="hljs-meta-string">&quot;./myfifo&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_BUFFER_SIZE PIPE_BUF</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fd;<br>    <span class="hljs-keyword">char</span> buf[MAX_BUFFER_SIZE] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> nwrite;<br><br>    <span class="hljs-keyword">if</span> (argc &lt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Usage: ./fifo_write string\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">sscanf</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;%s&quot;</span>, buf);<br><br>    fd = open (MYFIFO, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Open fifo file error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((nwrite = write (fd, buf, MAX_BUFFER_SIZE)) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Write &#x27;%s&#x27; to FIFO\n&quot;</span>, buf);<br>    &#125;<br><br>    close(fd);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>读管道：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MYFIFO  <span class="hljs-meta-string">&quot;./myfifo&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_BUFFER_SIZE PIPE_BUF</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fd;<br>    <span class="hljs-keyword">char</span> buf[MAX_BUFFER_SIZE] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> nwrite;<br><br>    <span class="hljs-keyword">if</span> (access(MYFIFO, F_OK) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((mkfifo (MYFIFO, <span class="hljs-number">0666</span>) &lt; <span class="hljs-number">0</span>) &amp;&amp; (errno != EEXIST))<br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Cannot creat fifo file\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125; <br>    &#125;<br><br>    fd = open (MYFIFO, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Open fifo file error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> (buf));<br>        <span class="hljs-keyword">if</span> ((nwrite = read (fd, buf, MAX_BUFFER_SIZE)) &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Read &#x27;%s&#x27; from FIFO\n&quot;</span>, buf);<br>        &#125;<br>    &#125;<br><br>    close(fd);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>管道</title>
    <link href="/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AE%A1%E9%81%93/"/>
    <url>/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AE%A1%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>管道是Linux中进程通信的一种方式。这里所说的管道指无名管道，它具有以下特点：</p><ul><li>它只能用于具有亲缘关系的进程之间通信</li><li>它是一个半双工的通信模式，具有固定的读端和写端</li><li>管道可以看成是一种特殊的文件，对于它的读写也可以使用普通的read()和write()等函数。但它不是普通文件，并不属于其他任何文件系统，并且只存在于内核的内存空间中</li></ul><h2 id="管道的创建与关闭"><a href="#管道的创建与关闭" class="headerlink" title="管道的创建与关闭"></a>管道的创建与关闭</h2><p>管道是基于文件描述符的通信方式，当一个管道建立时，它会创建两个文件描述符fds[0]和fds[1]，其中fds[0]固定用于读，fds[1]固定用于写，这样就构成了一个半双工的通道。管道的关闭只需逐个关闭各个文件描述符即可</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E6%97%A0%E5%90%8D%E7%AE%A1%E9%81%93.png" alt="无名管道"></p><p>管道的创建可以通过pipe()实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pipe</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>])</span></span>;<br></code></pre></td></tr></table></figure><p>成功返回0，出错返回-1</p><h2 id="管道的读写说明"><a href="#管道的读写说明" class="headerlink" title="管道的读写说明"></a>管道的读写说明</h2><p>用pipe()创建的管道两端出于一个进程中，由于管道是主要用于在不同进程间通信的，因此这在实际应用中没有太大意义。实际上，通常是先创建一个管道，再通过fork()函数创建一子进程，这时子进程会继承父进程所创建的管道，这是父子进程管道的对应关系如下图：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E7%AE%A1%E9%81%93%E5%85%B3%E7%B3%BB.png" alt="父子进程管道关系"></p><p>这时父子进程都有了自己的读写通道，为了实现父子进程之间的读写，只需把无关的读端或写端关闭即可，例如将父进程的写端和子进程的读端关闭，这时就建立了一条“子进程写入，父进程读取”的通道：</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%AD%90%E5%86%99%E7%88%B6%E8%AF%BB%E7%AE%A1%E9%81%93.png" alt="子写父读管道"></p><p>同样也可以关闭父进程的读端，子进程的写端，这样就可以建立一条“子进程读取，父进程写入”的通道</p><h2 id="pipe使用实例"><a href="#pipe使用实例" class="headerlink" title="pipe使用实例"></a>pipe使用实例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*pipe*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_DATA_LEN 256</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DELAY_TIME 1</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> fds[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">char</span> buf[MAX_DATA_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> data[] = <span class="hljs-string">&quot;Pipe Test Program&quot;</span>;<br>    <span class="hljs-keyword">int</span> real_read, real_write;<br><br>    <span class="hljs-keyword">if</span> (pipe (fds) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;pipe&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Test start!\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> ((pid = fork ()) == <span class="hljs-number">0</span>)<br>    &#123;<br>        close (fds[<span class="hljs-number">1</span>]);<br>        sleep (DELAY_TIME * <span class="hljs-number">3</span>);<br><br>        <span class="hljs-keyword">if</span> ((real_read = read (fds[<span class="hljs-number">0</span>], buf, MAX_DATA_LEN)) &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%d bytes read from the pipe is &#x27;%s&#x27;\n&quot;</span>, real_read, buf);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            perror (<span class="hljs-string">&quot;read&quot;</span>);<br>        &#125;<br><br>        close (fds[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span> (<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        close (fds[<span class="hljs-number">0</span>]);<br>        sleep (DELAY_TIME);<br><br>        <span class="hljs-keyword">if</span> ((real_write = write (fds[<span class="hljs-number">1</span>], data, <span class="hljs-built_in">strlen</span> (data))) != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Parent wrote %d bytes : &#x27;%s&#x27;\n&quot;</span>, real_write, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            perror (<span class="hljs-string">&quot;write&quot;</span>);<br>        &#125;<br><br>        close (fds[<span class="hljs-number">1</span>]);<br><br>        waitpid(pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Test end!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="标准流管道"><a href="#标准流管道" class="headerlink" title="标准流管道"></a>标准流管道</h2><p>与Linux的文件操作中有基于文件流的标准I/O一样，管道的操作也支持基于文件流的模式。标准流管道将一系列的创建过程合并到一个函数popen()中完成，它完成工作有以下几步：</p><ul><li>创建一个管道</li><li>fork()一个子进程</li><li>在父子进程中关闭不需要的文件描述符</li><li>执行exec函数族调用</li><li>执行函数中所指定的命令</li></ul><p>这个函数可以大大减少代码的编写量，但同时也有一些不利之处，它不如管道创建函数那样灵活，并且用popen()创建的管道必须使用标准I/O函数进行操作，但不能使用read(),write()一类不带缓冲的I/O函数</p><p>关闭用popen()创建的管道，必须使用函数pclose()来关闭，该函数关闭标准I/O流，并等待命令执行结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#includ <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">FILE *<span class="hljs-title">popen</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *command, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *type)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pclose</span> <span class="hljs-params">(FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>command：指向一个以null结尾的字符串，这个字符串包含一个shell命令</p><p>type：“r”,文件指针连接到command的标准输出;“w”,文件指针连接到command的标准输入</p><p>成功返回文件流指针，失败返回-1</p><p>popen在Linux嵌入式软件中常用方式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POPEN_READ_BUFF 1024</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">popen_read</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* cmd, <span class="hljs-keyword">char</span>* res, <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE* fp;<br>    <span class="hljs-keyword">char</span> buf[POPEN_READ_BUFF];<br>    <span class="hljs-keyword">int</span> l, nread = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (cmd == <span class="hljs-literal">NULL</span> || res == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid parameter\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(len &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid len\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    len--; <span class="hljs-comment">//Reserve a bit to save &#x27;\0&#x27;</span><br><br>    fp = popen(cmd, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;popen % failed!\n&quot;</span>, cmd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (fgets(buf, POPEN_READ_BUFF, fp) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        l = <span class="hljs-built_in">strlen</span>(buf);<br>        <span class="hljs-keyword">if</span> (l &gt;= len - nread)<br>        &#123;<br>            <span class="hljs-built_in">memcpy</span>(res + nread, buf, len - nread);<br>            res[len + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            pclose(fp);<br>            <span class="hljs-keyword">return</span> len;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">memcpy</span>(res + nread, buf, l + <span class="hljs-number">1</span>);<br>        &#125;<br>        nread += l;<br>    &#125;<br>    pclose(fp);<br>    <span class="hljs-keyword">return</span> nread;<br>&#125;<br></code></pre></td></tr></table></figure><p>传入命令、接收执行结果的空间以及空间大小，返回读取的字节数</p>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程间通信</title>
    <link href="/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <url>/2021/05/31/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><p>由于处于用户态的不同进程之间是彼此隔离的，就像处于不同城市的人们，它们必须通过某种方式来通信。Linux中使用的通信方式主要有以下几种：</p><ul><li><p><a href="/2021/05/31/%E7%AE%A1%E9%81%93/">管道</a></p></li><li><p><a href="/2021/05/31/%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93/">有名管道</a></p></li><li><p><a href="/2021/05/31/%E4%BF%A1%E5%8F%B7/">信号</a></p></li><li><p><a href="/2021/05/31/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/">消息队列</a></p></li><li><p><a href="/2021/05/31/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/">共享内存</a></p></li><li><p><a href="/2021/05/31/%E4%BF%A1%E5%8F%B7%E9%87%8F/">信号量</a></p></li><li><p>套接字</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>等待子进程终止</title>
    <link href="/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AD%89%E5%BE%85%E5%AD%90%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2/"/>
    <url>/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AD%89%E5%BE%85%E5%AD%90%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="等待子进程终止"><a href="#等待子进程终止" class="headerlink" title="等待子进程终止"></a>等待子进程终止</h1><p>可以通过信号通知父进程，但是很多父进程想知道关于子进程终止的更多信息——比如子进程的返回值</p><p>如果终止时，子进程就完全消失了，父进程就无法获取关于紫禁城的任何信息。所以UNIX的最初设计者们做了这样的决定：如果子进程在父进程之前结束，内核应该把该子进程设置成特殊的进程状态。出于这种状态的进程称为僵尸(zombie)进程。</p><p>僵尸进程只保留最小的概要信息——一些基本内核数据结构，保存可能有用的信息。僵尸进程会等待父进程来查询自己的状态(这个过程称为在僵尸进程上的等待)。只有当父进程获取到了已终止的子进程的信息，这个子进程才会正式消失，不在处于僵尸状态</p><p>Linux内核提供了一些接口，可以获取已终止子进程的信息。其中最简单的时wait()：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *status)</span></span>;<br></code></pre></td></tr></table></figure><p>调用成功会返回已终止子进程的pid，出错时，返回-1.如果没有子进程终止，调用会阻塞，直到有一个子进程终止。如果有个子进程已经终止，调用会立即返回。因此当得到子进程终止信息后，调用wait()就会立即返回，不会被阻塞</p><p>出错时，errno有两种可能的值：</p><p>ECHILD : 调用进程没有任何子进程</p><p>EINTR : 在等待子进程结束时收到信号，调用提前返回</p><p>如果status指针不是NULL，那它包含了关于子进程的一些其他信息，由于POSIX郧西实现可以根据需要给status定义一些合适的比特位来表示附加信息，POSIX标准提供了一些宏来解释status参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WIFEXITED</span> <span class="hljs-params">(status)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WIFSIGNALED</span> <span class="hljs-params">(status)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WIFSTOPPED</span> <span class="hljs-params">(status)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WIFCONTINUED</span> <span class="hljs-params">(status)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WEXITSTATUS</span> <span class="hljs-params">(status)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WTERMSIG</span> <span class="hljs-params">(status)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WSTOPSIG</span> <span class="hljs-params">(status)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WCOREDUMP</span> <span class="hljs-params">(status)</span></span>;<br></code></pre></td></tr></table></figure><p>前两个宏可能会返回真(一个非0值)，这取决于子进程的结束情况。如果进程正常结束了——也就是调用了_exit()，第一个宏WIFEXITED就会返回真。在这种情况下WEXITSTATUS会返回status的低八位，并传递给_exit()函数</p><p>如果信号导致进程终止，WIFSIGNALED会返回真。在这种情况下，WTERMSIG会返回导致进程终止的信号编号。如果进程收到信号时生成core，WCOREDUMP就会返回true。虽然很多UNIX系统都支持WCOREDUMP，但POSIX并没有定义它</p><p>当子进程停止或继续执行时WIFSTOPPED和WIFCONTINUED会分别返回真。当前，进程状态是通过系统调用ptrace()跟踪。只有当实现了调试器时，这些状态才可用。</p><p>通常情况下，wait()仅用于获取子进程的终止信息。如果WIFSTOPPED返回真，WSTOPSIG就返回使进程终止的信号编号。虽然POSIX没有定义WIFCONTINUED，但是新的标准为waitpid()函数定义了这个宏。正如在2.6.10内核中，Linux也为wait()函数提供了这个宏</p><p>实例程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> status;<br>    <span class="hljs-keyword">pid_t</span> pid;<br><br>    <span class="hljs-keyword">if</span> (!fork())<br>    &#123;<br>        <span class="hljs-comment">//abort();</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    pid = wait (&amp;status);<br><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;wait&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (WIFEXITED (status))<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Normal termination with exit status=%d\n&quot;</span>,WEXITSTATUS (status));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (WIFSIGNALED (status))<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Kill by signal=%d%s\n&quot;</span>,WTERMSIG (status), WCOREDUMP (status)?<span class="hljs-string">&quot;dumped core&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (WIFSTOPPED (status))<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Stopped by signal=%d\n&quot;</span>,WSTOPSIG (status));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (WIFCONTINUED (status))<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Contiued\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建子进程立即退出，随后父进程调用wait()来获取进程状态。会有如下打印：</p><blockquote><p>Normal termination with exit status=1</p></blockquote><p>如果调用abort()，会给自己发送一个SIGABRT信号，会有如下打印：</p><blockquote><p>Kill by signal=6</p></blockquote><h2 id="等待特定进程"><a href="#等待特定进程" class="headerlink" title="等待特定进程"></a>等待特定进程</h2><p>如果知道需要等待的进程的pid，可以使用系统调用waitpid()来等待特定的进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">waitpid</span> <span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid, <span class="hljs-keyword">int</span> *status, <span class="hljs-keyword">int</span> options)</span></span>;<br></code></pre></td></tr></table></figure><p>比起wait()，waitpid()是一个更强大的系统调用。它额外的参数可以支持细粒度调整</p><p>参数pid指定要等待的一个或多个进程的pid.它的值必须是下面四种情况之一：</p><table><thead><tr><th align="center">参数pid</th><th>行为</th></tr></thead><tbody><tr><td align="center">&lt;-1</td><td>等待一个指定进程组中的任何子进程退出，该进程组的id等于pid的绝对值</td></tr><tr><td align="center">-1</td><td>等待任何一个子进程退出，行为和wait()一致</td></tr><tr><td align="center">0</td><td>等待同一个进程组中的任何子进程</td></tr><tr><td align="center">&gt;0</td><td>等待进程pid等于pid的子进程</td></tr></tbody></table><p>status的作用和wait()函数的唯一参数是一样的，而且之前的宏可以继续使用</p><p>参数options是0个或多个以下选项按二进制“或”运算的结果：</p><p>WNOHANG : 不要阻塞，如果要等待的子进程还没结束、停止或继续运行，会立即返回</p><p>WUNTRACED : 如果设置该位，即使调用进程没有跟踪子进程，也会设置返回调用参数中的WIFSTOPPED位。和标志位WUTRACED一样，这个标志位可以用来实现更通用的作业控制，如shell</p><p>WCONTINUED : 如果设置该位，即使是调用进程没有跟踪子进程，也会设置返回调用参数中的WIFCONTINUED位</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>调用成功时，waitpid()会返回状态发生改变的那个进程的pid。如果设置了WNOHANG并且等待的子进程没有发生状态改变，返回0，出错时返回-1，并设置errno值为下三个之一：</p><p>ECHILD : 参数pid所指定的进程不存在，或者不是调用进程的子进程</p><p>EINTR : 没有设置WNOHANG，在等待时收到了一个信号</p><p>EINVAL : 参数options非法</p><h3 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h3><p>作为一个例子，假设程序期望获得pid为1742的子进程的返回值，如果该子进程没有结束，父进程就立即返回：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> status;<br><span class="hljs-keyword">pid_t</span> pid;<br>pid = waitpid (<span class="hljs-number">1742</span>, &amp;status, WNOHANG);<br><br><span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)<br>&#123;<br>    perror (<span class="hljs-string">&quot;waitpid&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;pid = %d\n&quot;</span>,pid);<br><br>    <span class="hljs-keyword">if</span> (WIFEXITED (status))<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Normal termination with exit status=%d\n&quot;</span>,WEXITSTATUS (status));<br>    &#125;<br><br>        <span class="hljs-keyword">if</span> (WIFSIGNALED (status))<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Kill by signal=%d%s\n&quot;</span>,WTERMSIG (status), WCOREDUMP (status)?<span class="hljs-string">&quot;dumped core&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="等待子进程的其他方法"><a href="#等待子进程的其他方法" class="headerlink" title="等待子进程的其他方法"></a>等待子进程的其他方法</h2><p>对于某些应用，它们希望有更多等待子进程的方式。XSI扩展了POSIX，而Linux提供了waitid()：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">waitid</span> <span class="hljs-params">(<span class="hljs-keyword">idtype_t</span> idtype, <span class="hljs-keyword">id_t</span> id, <span class="hljs-keyword">siginfo_t</span> *infop, <span class="hljs-keyword">int</span> options)</span></span>;<br></code></pre></td></tr></table></figure><p>和wait()、waitpid()一样，waitid()是用于等待子进程结束并获取其状态变化的信息。waitid()提供了更多的选项，但是其代价是复杂性变高</p><p>类似于waitpid()，waitid()支持开发人员指定等待哪个子进程，但waitid()需要两个参数，而不是一个。参数idtype和id是指定要等待哪个子进程，idtype的值是下面三个中的一个：</p><p>P_PID : 等待pid值是id的子进程</p><p>P_GID : 等待进程组是id的那些子进程</p><p>P_ALL : 等待所有子进程，参数id被忽略</p><p>参数id的类型是id_t，这个类型很少见，他代表着一种通用的ID号。由于将来可能会增加idtype值，所以引入这个类型，这样新加入的idtype值也可以很容易表示。id_t类型足够大，可以保证能存储任何类型的pid_t值，可以直接把它当作pid_t来使用</p><p>参数options是以下一个或多个选项值进行二进制”或“运算的结果：</p><p>WEXITED : 调用会等待结束的子进程</p><p>WSTOPPED : 调用进程会等待因收到信号而停止执行的子进程</p><p>WNOHANG : 不要阻塞，如果要等待的子进程还没结束、停止或继续运行，会立即返回</p><p>WNOWAIT : 调用进程不会删除相应子进程的僵尸状态。将来可能会继续等待处理僵尸进程</p><p>WCONTINUED : 调用进程会等待因收到信号而继续执行的进程</p><p>成功时，waitid()会填充参数infop，infop指向一个合法的siginfo_t类型。siginfo_t结构体的具体成员变量与实现相关的，但在调用waitpid()之后，有一些成员变量就生效了。也就是说一次成功的调用可以保证下面的成员会被赋值：</p><p>si_pid : 子进程的pid</p><p>si_uid : 子进程的uid</p><p>si_code : 根据子进程的状态时终止/被信号所杀死、停止或者继续执行而分别设置为CLD_EXITED、CLD_KILLED、CLD_STOPPED或CLD_CONTIUED</p><p>si_signo : 设置为SIGCHLD</p><p>si_status : 如果si_code是CLD_EXITED，该变量是子进程的退出值。否则该变量是导致状态改变的那个信号编码</p><h3 id="返回和出错处理"><a href="#返回和出错处理" class="headerlink" title="返回和出错处理"></a>返回和出错处理</h3><p>当成功时，waitid()返回0.出错时返回-1并设置errno：</p><p>ECHLD : 有id和idtype确定的进程不存在</p><p>EINTR : 在options里没有设置WNOHANG，而且一个信号打断了子进程的执行</p><p>EINVAL : options参数不合法，或者id和idtype的组合不合法</p><p>和wait()、waitpid()相比，waitid()提供了更多有用的语义定义功能。特别地，从结构体siginfo_t获取的信息可能是很有用的。如果不需要这些信息，那么就应该选择更简单的函数，这样可以被更多系统所支持，并且可以更容易的移植到非Linux系统上</p><h2 id="创建并等待新进程"><a href="#创建并等待新进程" class="headerlink" title="创建并等待新进程"></a>创建并等待新进程</h2><p>ANSI和POSIX都定义了一个用于创建新进程并等待它结束的函数——可以把它想象成是同步创建进程。如果一个进程创建了新进程并立刻开始等待它的结束，那么就很适合使用下面这个接口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _XOPEN_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">system</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *command)</span></span>;<br></code></pre></td></tr></table></figure><p>调用system()会执行参数command所提供的命令，而且还可以为该命令指定参数。“/bin/sh -c”会作为前缀加到command参数前面。通过这种方式，再把整个命令传递给shell</p><p>成功时，返回值是执行command命令所得到的返回状态，该状态和执行wait()所获取的状态一致。因此可以通过WEXITSTATUS获取执行command命令的返回值。如果调用/bin/shell本身失败了，那么从WEXITSTATUS返回的值和调用exit(127)的返回值是一样的</p><h3 id="实现一个简单的system"><a href="#实现一个简单的system" class="headerlink" title="实现一个简单的system()"></a>实现一个简单的system()</h3><p>利用fork()、exec系统调用和waitpid()实现一个system():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_system</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *cmd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> status;<br>    <span class="hljs-keyword">pid_t</span> pid;<br><br>    pid = fork ();<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid ==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *argv[<span class="hljs-number">4</span>];<br><br>        argv[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;sh&quot;</span>;<br>        argv[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;-c&quot;</span>;<br>        argv[<span class="hljs-number">2</span>] = cmd;<br>        argv[<span class="hljs-number">3</span>] = <span class="hljs-literal">NULL</span>;<br>        execv (<span class="hljs-string">&quot;/bin/sh&quot;</span>,argv);<br><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (waitpid (pid, &amp;status, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFEXITED (status))<br>    &#123;<br>        <span class="hljs-keyword">return</span> WEXITSTATUS (status);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><p>一个进程已经终止了，但是它的父进程还没获取到其状态，那么这个进程就叫做僵尸进程。僵尸进程还会消耗一些系统资源，虽然消耗很少——仅仅够描述进程之前状态的一些概要信息。保留这些概要信息主要是为了在父进程查询子进程状态时可以提供相应的信息。一旦父进程得到了想要的信息，内核就会清除这些信息，僵尸进程就不存在了。</p><p>如果创建了一个子进程，那么它就有责任去等待子进程，即使会丢弃得到的子进程信息。否则，如果父进程没有等待子进程，其所有子进程就会成为僵尸进程，并一直存在</p>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终止进程</title>
    <link href="/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8B/"/>
    <url>/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h1><p>POSIX和C89都定义了一个标准函数，可以终止当前进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exit</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> status)</span></span>;<br></code></pre></td></tr></table></figure><p>对exit()的调用通常会执行一些基本的关闭步骤，然后通知内核终止这个进程。这个函数无法返回错误值——实际上他也从不返回。因此在exit()之后执行任何指令都没有意义</p><p>参数status用于标识进程的退出状态。EXIT_SUCCESS和EXIT_FAILURE这两个宏分别表示成功和失败，而且时可移植的。在Linux中，0通常表示成功，非0值表示失败</p><p>在终止进程之前，C库会按顺序执行以下关闭进程的步骤：</p><ol><li>调用任何由atexit()或on_exit()注册的函数，和在系统中注册时顺序相反</li><li>清空所有已打开的标准I/O流</li><li>删除由tmpfile()函数创建的所有临时文件</li></ol><p>这些步骤完成了用户空间所需要做的所有工作，最后exit()会调用系统调用_exit()，内核可以处理终止进程的剩余工作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-keyword">void</span> _exit(<span class="hljs-keyword">int</span> status);<br></code></pre></td></tr></table></figure><p>当进程退出时，内核会清理进程所创建的、不再使用的所有资源。这包括但不局限于：分配村村、打开文件和System V的信号量。清理完成后，内核会摧毁进程，并告知父进程其子进程已经终止</p><p>应用可以直接调_exit()，但这通常不合适，绝大多数应用在完全退出前需要做一些清理工作</p><h2 id="终止进程的其他方式"><a href="#终止进程的其他方式" class="headerlink" title="终止进程的其他方式"></a>终止进程的其他方式</h2><p>终止进程的典型方式不是通过显示系统调用，而是采用“直接跳到结束(falling off the end)”的方式。在C和C++中，当main()函数返回时会发生这种情况。然而，这种直接跳到结束的方式还是会执行系统调用：编译器会在最后关闭代码后插入隐式exit()调用。在main()函数返回时显式给出返回状态，或这调用exit()函数，这时一个良好的编程习惯</p><p>如果进程接收到一个信号，并且这个信号对应的处理函数是终止进程，进程也会终止，这样的信号包括SIGTERM和SIGKILL</p><p>最后一种进程终止方式是被内核强制终止。内核可以杀死执行非法指令、引起段错误、耗尽内存、消耗资源过多的任何进程</p><h2 id="atexit"><a href="#atexit" class="headerlink" title="atexit()"></a>atexit()</h2><p>系统调用atexit()是由POSIX 1003.1-2001所定义，Linux也实现了该函数。它是用来注册一些进程结束时需要调用的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">atexit</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> (*function)(<span class="hljs-keyword">void</span>))</span></span>;<br></code></pre></td></tr></table></figure><p>atexit()调用成功时，会注册指定的函数作为终止函数，在程序正常结束时运行，如果进程调用了exec函数，会清空所注册的函数列表。如果进程是通过信号结束，就不会调用这些注册函数</p><p>指定函数必须是无参且没有返回值的函数</p><p>函数调用的顺序和函数注册的顺序相反。也就是说，这些函数是存储在栈中，以后进先出的方式调用。注册的函数不能调用exit()，否则会导致递归调用死循环。如果要提前结束进程，应该调用_exit()。一般不推荐这种行为，因为它会是的一些重要的关闭函数不会被调用到</p><p>POSIX标准要求atexit()至少支持注册ATEXIT_MAX个注册函数，而且这个值至少是32。具体的最大值可以通过sysconf()得到，参数是_SC_ATEXIT_MAX</p><p>成功时，atexit()返回0。错误时，返回-1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;atexit() successed!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (atexit (out))<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;atexit() failed!\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="on-exit"><a href="#on-exit" class="headerlink" title="on_exit()"></a>on_exit()</h2><p>SunOS 4 自己定义了一个和atexit()等价的函数：on_exit()。Linux的glibc也支持该函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">on_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span> (*function)(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">void</span> *), <span class="hljs-keyword">void</span> *arg)</span></span>;<br></code></pre></td></tr></table></figure><p>该函数的工作方式和atexit()函数一样，只是注册的函数形式不同：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">my_function</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> status, <span class="hljs-keyword">void</span> *arg)</span></span>;<br></code></pre></td></tr></table></figure><p>参数status是传给exit()的值或者从main()函数返回的值。arg是传给on_exit()的第二个参数。需要注意的是，当调用该函数时，要保证arg所指向的内存地址必须是合法的</p><p>最新版的Solaris不再支持on_exit()函数了。因此，应该使用和标准兼容的atexit()</p><h2 id="SIGCHILD"><a href="#SIGCHILD" class="headerlink" title="SIGCHILD"></a>SIGCHILD</h2><p>当一个进程终止时，内核会向其父进程发送SIGCHILD信号。默认情况下，父进程会忽略此信号量，也不会采取任何操作。但是进程可以通过signal()或sigaction()系统调用来处理这个信号</p><p>SIGCHILD信号可能会在任意时刻产生，并在任意时刻被传递给父进程，因为对于父进程而言，子进程的终止是异步的。通常情况下，父进程都希望能更多地了解到子进程的终止，或是显示等待子进程终止。这可以通过系统调用来实现</p>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程调度</title>
    <link href="/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/"/>
    <url>/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h1><p>进程调度器是个内核子系统，其功能是把有限的处理器资源分配给系统中的各个进程。决定哪个进程可以运行、何时运行、运行多久是进程调度器的基本功能</p><p>在单处理机上，如果系统能交错的运行多个进程，从用户角度似乎是同时运行多个进程，就称该操作系统是“多任务”的。在多处理机上，多任务操作系统支持进程真正在不同处理器上并行执行</p><p>多任务操作系统可以分为两大类：协同式和抢占式。Linux实现了抢占式，调度器决定某个进程何时停止运行，而由另一个进程运行，这种中止正在运行的进程而由另一个进程运行的行为称作“抢占”，进程在被抢占前所能运行的时间称为“时间片”</p><p>当前Linux使用的调度器称为“完全公平调度器”，这个名称源于该调度器采用了“公平入队”策略，公平入队是一个调度算法，对竞争进程采取公平访问资源的策略</p><h2 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h2><p>进程调度器分配给进程的时间片对于系统的全局行为和性能而言，是至关重要的。如果时间片太长，降低了并发运行，用户会感到明显的延迟；相反，如果时间片太短，大量的时间浪费在了进程调度上</p><p>Linux的完全公平调度器，以一种怪异的方式解决“时间片大小”这一难题：不用时间片</p><h2 id="I-O约束型进程和处理器约束型进程"><a href="#I-O约束型进程和处理器约束型进程" class="headerlink" title="I/O约束型进程和处理器约束型进程"></a>I/O约束型进程和处理器约束型进程</h2><p>一直消耗完所有可用时间片的进程称为“处理器约束型进程”。这类进程需要获取大量CPU资源，会消耗掉调度器分配的全部CPU。最简单的例子是如下的一个无限循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    ;<br></code></pre></td></tr></table></figure><p>相反，多数时间出于阻塞状态等待资源的进程称为“I/O约束型进程”</p><p>两者的区别在于：处理器约束的应用期望会获取尽可能长的时间片，尽快完成任务；I/O约束型应用不需要很长的时间片，如果调度器能够优先执行，则会受益；这类应用，在阻塞后越快被唤醒就可以调越多的I/O请求，应用就能更好地利用系统硬件资源</p><p>平衡这两种应用的不同需求难如登天，而且，大多数应用是混合约束型：有些进程是I/O约束型，有些进程则是处理器约束型</p><h2 id="抢占式调度"><a href="#抢占式调度" class="headerlink" title="抢占式调度"></a>抢占式调度</h2><p>在传统UNIX进程调度中，内核会给所有就绪进程分配一个时间片。当进程消耗完其时间片，内核就会挂起该进程，开始运行另一个进程。如果系统没有就绪进程，内核就会给消耗完时间片的进程重新分配时间片，并再次运行这些进程。因此，进程在创建或终止时分别进入和退出就绪进程列表，阻塞在I/O，或者被唤醒，这个过程反复执行</p><p>通过这种方式，所有的进程最后都有机会运行。这种行为方式制定了UNIX调度中没有明确指出但非常重要的规则：所有进程都必须运行</p><h2 id="完全公平调度器-CFS"><a href="#完全公平调度器-CFS" class="headerlink" title="完全公平调度器(CFS)"></a>完全公平调度器(CFS)</h2><p>完全公平调度器引入了一种非常不同的算法、称为公平调度，它消除了时间片作为处理器访问分配单元，相反地，它给每个进程分配了处理器的时间比例。算法很简单：CFS在最初给N个进程分配1/N的处理器时间。然后CFS通过优先级权衡每个进程的比例，调整分配，默认的优先级是0，权值是1，则比例不变。优先级的值越小，优先级越高，权值越高</p><h3 id="目标延迟"><a href="#目标延迟" class="headerlink" title="目标延迟"></a>目标延迟</h3><p>要确定每个进程真正的执行时间，万确公平调度器需要把比例划分成一个固定的周期。该周期称为“目标延迟”，它表示系统的调度延迟。假设“目标延迟”设置为20ms，存在两个优先级相同的可运行进程，CFS会先执行一个进程10ms再执行另一个程序10ms，如此不断重复，如果有五个优先级相同的进程，则每个执行4ms</p><h3 id="最小粒度"><a href="#最小粒度" class="headerlink" title="最小粒度"></a>最小粒度</h3><p>当有200个可运行进，如果目标延迟是20ms，那么每个进程只有100微秒，考虑到频繁切换进程导致的“切换开销”，CFS引入了另一个关键因素：最小粒度</p><p>“最小粒度”是指任一进程所运行的时间长的基准值。所有进程不管分配到的处理器比例是多少，都至少运行最小粒度的时间（除非被阻塞）</p>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运行新进程</title>
    <link href="/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E8%BF%90%E8%A1%8C%E6%96%B0%E8%BF%9B%E7%A8%8B/"/>
    <url>/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E8%BF%90%E8%A1%8C%E6%96%B0%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="运行新进程"><a href="#运行新进程" class="headerlink" title="运行新进程"></a>运行新进程</h1><p>在UNIX中，把程序载入内存并执行程序映像的操作与创建新进程的操作是分离的。一次系统调用会把二进制程序加载到内存中，替换地址空间原来的内容，并开始执行。这个过程称为”执行(executing)”一个新的程序，是通过一系列exec系统调用来完成的</p><p>同时，另一个不同的系统调用是用于创建一个新的进程，它基本上相当于辅助其父进程。通常情况下，新进程会立即执行新的程序。创建新进程的操作称为派生(fork)，是系统调用fork()来完成这个功能</p><p>在新进程中执行一个新的程序需要两个步骤：</p><ol><li>创建一个新进程</li><li>通过exec系统调用把二进制程序加载到该进程中</li></ol><h2 id="exec系统调用"><a href="#exec系统调用" class="headerlink" title="exec系统调用"></a>exec系统调用</h2><p>不存在单一的exec函数，而是基于单个系统调用，由一系列的exec函数构成。</p><h3 id="execl"><a href="#execl" class="headerlink" title="execl()"></a>execl()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execl</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *arg, ...)</span></span>;<br></code></pre></td></tr></table></figure><p>execl()调用会把path所指路径的映像载入内存，替换当前进程的映像。参数arg是它的第一个参数。省略号表示可变长度的参数列表——execl()函数是可变参数，也就是说后续还有一个或者多个参数，参数列表必须以NULL结尾,如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> ret;<br>ret = execl (<span class="hljs-string">&quot;/bin/vi&quot;</span>, <span class="hljs-string">&quot;vi&quot;</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>&#123;<br>    perror (<span class="hljs-string">&quot;execl&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通常情况下，execl()不会返回。调用成功时，会跳转到新的程序入口点，而刚刚运行的代码是不再存在于进程的地址空间中。错误时execl()会返回-1，并设置响应的errno</p><p>成功的execl()调用不仅改变了地址空间和进程映像，还改变了一些其他属性：</p><ul><li>所有挂起的信号都会丢失</li><li>捕捉到的所有信号都会还原为默认处理方式</li><li>丢弃所有内存锁</li><li>大多数线程的属性会被还原成默认值</li><li>重置大多数进程相关的统计信息</li><li>清空和进程相关的统计信息</li><li>清空和进程内存地址空间相关的所有数据，包括所有映射文件</li><li>清空所有只存在于用户空间的数据，包括C库的一些功能</li></ul><p>但是有些属性还是没有改变：pid、父进程pid、优先级、所属的用户和组</p><p>通常打开的文件描述符也通过exec继承下来。这意味着如果新进程知道原进程所打开的文件描述符，他就可以访问这些文件。但是，这通常并不是期望的行为，所以实际操作中一般会在调用exec前关闭打开的文件，当然，也可以通过fcntl()，让内核自动完成关闭操作</p><h3 id="exec系的其他函数"><a href="#exec系的其他函数" class="headerlink" title="exec系的其他函数"></a>exec系的其他函数</h3><p>除了execl()外，还有其他5个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unnistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execlp</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *file, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *arg, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execle</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *arg, ..., <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> envp[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execv</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> argv[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execvp</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *file, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> argv[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execve</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> argv[], <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> envp[])</span></span>;<br></code></pre></td></tr></table></figure><p>l和v分别表示参数是以列表形式还是数组形式，p表示会在用户的绝对目录下查找可执行文件，e表示会为新进程提供新的环境变量</p><p>在Linux中，exec系函数只有一个真正的系统调用，其他都是基于该系统调用在C库封装的函数，由于处理变长参数的系统调用难以实现，而且用户的路径只存在于用户空间，所以execve是唯一的系统调用，其原型和用户调用完全相同</p><h3 id="错误返回值"><a href="#错误返回值" class="headerlink" title="错误返回值"></a>错误返回值</h3><p>成功时，exec系函数不会返回。失败时返回-1，并把errno设为以下值之一：</p><p>E2BIG : 参数列表或环境变量长度过长</p><p>EACCESS : 没有在path所指定路径的查找权限；path所指向的文件不是一个普通文件；目标文件不可执行；path或文件所位于的文件系统以不可执行方式挂载</p><p>EFAULT : 给定指针非法</p><p>EIO : 底层IO错误</p><p>EISDIR : 路径path的最后一部分或者路径解释器是个目录</p><p>ELOOP : 系统在解析path时遇到太多的符号连接</p><p>EMFILE : 调用进程打开的文件数达到进程上限</p><p>ENFILE : 打开文件达到系统上限</p><p>ENOENT : 目标文件不是一个有效的二进制可执行文件或其他体系结构上的可执行文件</p><p>ENOMEM : 内核内存不足，无法执行新的程序</p><p>ENOTDIR : path中除最后名称外的其中某个部分不是目录</p><p>EPERM : path或文件所在的文件系统以没有sudo权限的用户挂在，而且用户不是root用户，path或文件的suid或sgid位被设置</p><p>ETXTBSY : 目标目录或文件被另一个进程以可写方式打开</p><h2 id="fork-系统调用"><a href="#fork-系统调用" class="headerlink" title="fork()系统调用"></a>fork()系统调用</h2><p>通过fork()系统调用，可以创建一个和当前进程映像一样的进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">fork</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>当fork()调用成功时，会创建一个新的进程，他几乎与调用fork()的进程完全相同。这两个进程都会继续运行，调用者进程从fork()返回后，还是照常运行</p><p>新进程被称为“子进程”，原进程被称为“父进程”。在子进程中，成功的fork()调用会返回0.在父进程中会返回子进程的pid。除了一些本质性区别，父进程和子进程之间在其他各个方面都完全相同：</p><ul><li>子进程的pid是重新分配的，与父进程不同。</li><li>子进程的ppid会设置为父进程的pid</li><li>子进程中的资源统计信息会清零</li><li>所有挂起的信号都会清除，也不会被子进程继承</li><li>所有文件锁也都不会被子进程继承</li></ul><h3 id="返回值和错误码"><a href="#返回值和错误码" class="headerlink" title="返回值和错误码"></a>返回值和错误码</h3><p>出错时，不会创建子进程，fork()返回-1，并相应设置errno值。errno有两种可能，包括三种不同的含义：</p><p>EAGAIN : 内核申请资源时失败或达到了RLIMIT_NPROC设置的资源限制</p><p>ENOMEM : 内核内存不足，无法满足所请求的操作</p><h3 id="fork-系统调用的用法"><a href="#fork-系统调用的用法" class="headerlink" title="fork()系统调用的用法"></a>fork()系统调用的用法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">pid_t</span> pid;<br>pid = fork();<br><span class="hljs-keyword">if</span> (pid &gt;<span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;I am the parent of pid = %d\n&quot;</span>, pid);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!pid)<br>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;I am the child!\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)<br>&#123;<br>    perror (<span class="hljs-string">&quot;fork&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最常见的fork()用法是创建一个新的进程，载入新的二进制映像——类似shell为用户创建一个新进程，或一个进程创建一个辅助进程。</p><p>首先，该进程创建了一个进程，而这个进程会执行一个新的二进制可执行文件的映像。像这种“派生/执行”的方式很常见：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">pid_t</span> pid;<br><br>pid = fork();<br><span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)<br>&#123;<br>    perror (<span class="hljs-string">&quot;fork&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/*the child */</span><br><span class="hljs-keyword">if</span> (!pid)<br>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *args[] = &#123; <span class="hljs-string">&quot;windlass&quot;</span>, <span class="hljs-literal">NULL</span>&#125;;<br>    <span class="hljs-keyword">int</span> ret;<br><br>    ret = execv (<span class="hljs-string">&quot;/bin/windlass&quot;</span>,args);<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;execv&quot;</span>);<br>        <span class="hljs-built_in">exit</span> (EXIT_FAILUER);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="写时复制-WOC"><a href="#写时复制-WOC" class="headerlink" title="写时复制(WOC)"></a>写时复制(WOC)</h3><p>由于大量的fork()创建之后都会紧跟着执行exec,因此把整个父进程地址空间中的内容复制到子进程的地址空间往往只是纯属浪费：如果子进程立刻执行一个新的二进制可执行文件的映像，他先前的地址空间就会被交换出去</p><p>因此，可以采用一种称为写时复制的技术，它通过允许父进程和子进程最初共享相同的页面来工作。这些共享页面标记为写时复制，这意味着如果任何一个进程写入共享页面，那么就创建共享页面的副本。</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6.gif" alt="写时复制"></p><p>例如，假设子进程试图修改包含部分堆栈的页面，并且设置为写时复制。操作系统会创建这个页面的副本，将其映射到子进程的地址空间。然后，子进程会修改复制的页面，而不是属于父进程的页面。显然，当使用写时复制技术时，仅复制任何一进程修改的页面，所有未修改的页面可以由父进程和子进程共享。</p>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程</title>
    <link href="/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B/"/>
    <url>/2021/04/28/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="程序、进程和线程"><a href="#程序、进程和线程" class="headerlink" title="程序、进程和线程"></a>程序、进程和线程</h1><p>程序(program)是指编译过的、可执行的二进制代码，保存在存储介质如磁盘上，不运行。规模很大的二进制程序集可以称为应用</p><p>进程(process)是指正在运行的程序，包括二进制镜像，加载到内存中，还涉及很多其他方面:虚拟内存实例、内核资源打开的文件、安全上下文以及一个或多个线程</p><p>线程(thread)是进程内的活动单元。每个线程包含自己的虚拟存储器，包括栈、进程状态如寄存器，以及指令指针</p><p>在单线程的进程中，进程即线程</p><h2 id="进程ID"><a href="#进程ID" class="headerlink" title="进程ID"></a>进程ID</h2><p>每个进程都由一个唯一的标识符表示，即进程ID，简称pid。系统保证在任意时刻pid都是唯一的</p><p>空闲进程(idle process)即当没有其他进程运行时，内核所运行的进程——其pid为0。再启动后，内核运行的第一个进程为init进程，其pid为1</p><p>如果用户没有显式告诉内核要运行哪个程序，内核会尝试四个可执行文件，顺序如下：</p><ol><li>/sbin/init</li><li>/etc/init</li><li>/bin/init</li><li>/bin/sh</li></ol><h3 id="分配进程ID"><a href="#分配进程ID" class="headerlink" title="分配进程ID"></a>分配进程ID</h3><p>缺省情况下，内核将进程ID最大值设置为32768，这是为了和老的UNIX系统兼容，因为这些系统使用了有符号16位数来表示进程ID。系统管理员可以通过修改/proc/sys/kernel/pid_max把这个值设置成更大的值，但是会牺牲一些兼容性</p><p>内核分配进程ID是以严格的线性方式执行的。如果当前pid的最大值是17，那么分配给新进程的pid就为18，即使当新进程开始运行时pid为17的进程已经不再运行了。内核分配的pid值到达了/proc/sys/kernel/pid_max之后，才会重用以前已经分配过的pid值</p><p>所以内核不保证长时间进程ID的唯一性，但短时间内是稳定且唯一的</p><h3 id="进程体系"><a href="#进程体系" class="headerlink" title="进程体系"></a>进程体系</h3><p>创建新进程的那个进程称为父进程，而新进程被称为子进程。每个进程都是由其他进程创建的(除了init进程)，因此每个子进程都有一个父进程。这种关系保存在每个进程的父进程ID号(ppid)中</p><p>每个进程都有属于某个用户和某个组。这种从属关系可以用来实现访问控制。对于内核来书，用户和组都不过是些整数值。通过/etc/passwd和/etc/group这两个文件，这些整数被映射成人们易读的方式。每个子进程都继承了父进程的用户和组</p><p>每个进程都是某个进程组的伊普芬，进程组表示的是该进程和其他子进程之间的关系，和前面提到的用户和组的概念不同。子进程通常属于其父进程所在的那个进程组。所有和管道相关的命令都是同一个进程组，进程组这个概念使得在管道上的进程之间发送信号或者获取信息变得很容易，同样，也适用于管道中的子进程</p><h3 id="pid-t"><a href="#pid-t" class="headerlink" title="pid_t"></a>pid_t</h3><p>从编程角度看，进程ID是由数据类型pid_t来表示的，pid_t在头文件&lt;sys/types.h&gt;中定义。pid_t对应的具体C语言类型是与机器的体系结构相关的，并且在任何C语言标准中都没定义它。但是，在Linux中，pid_t通常定义为C语言的int类型</p><h3 id="获取进程ID和父进程ID"><a href="#获取进程ID和父进程ID" class="headerlink" title="获取进程ID和父进程ID"></a>获取进程ID和父进程ID</h3><p>系统调用getpid()会返回调用进程的进程ID：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">getpid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>系统调用getppid()会返回调用进程的父进程ID：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">getppid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件提示</title>
    <link href="/2021/03/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%96%87%E4%BB%B6%E6%8F%90%E7%A4%BA/"/>
    <url>/2021/03/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%96%87%E4%BB%B6%E6%8F%90%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="普通文件I-O提示"><a href="#普通文件I-O提示" class="headerlink" title="普通文件I/O提示"></a>普通文件I/O提示</h1><p>Linux提供了两个接口，可以给出提示信息：posix_fadvise()和readahead()</p><h2 id="posix-fadvise"><a href="#posix-fadvise" class="headerlink" title="posix_fadvise()"></a>posix_fadvise()</h2><p>正如他的名字那样，posix_fadvise()函数可以给出提示信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">posix_fadvise</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">off_t</span> offset, <span class="hljs-keyword">off_t</span> len, <span class="hljs-keyword">int</span> advice)</span></span>;<br></code></pre></td></tr></table></figure><p>调用posix_fadvise()会向内核提供在文件fd的[offset, offset+len)区间内的操作提示。如果len为0，则会适用于区间[offset, length of file]。最常见的用法是设置len和offset为0，使得提示可以应用于整个文件</p><p>advice的可用选项和madvise()类似，必须是以下值之一：</p><p>POSIX_FADV_NORMAL 对指定的内存区域，应用没有特殊提示，按正常方式操作</p><p>POSIX_FADV_RANDOM 应用将以随机访问方式，访问指定范围的页</p><p>POSIX_FADV_SEQUENTIAL 应用期望从低地址到高地址顺序访问指定范围的页</p><p>POSIX_FADV_WILLNEED 应用期望会很快访问指定范围的页</p><p>POSIX_FADV_DONTNEED 应用在短期内不会访问指定范围内的页</p><p>成功时返回0，失败返回-1，并设置errno为下值之一：</p><p>EBADF 文件描述符非法</p><p>EINVAL 参数advice非法，文件描述符指向一个管道，或者设置的选项无法应用到指定的文件</p><h2 id="readahead"><a href="#readahead" class="headerlink" title="readahead()"></a>readahead()</h2><p>posix_fadvise()是在Linux内核2.6中新加入的系统调用。在此之前，readahead()可以完成和posix_fadvise()使用POSIX_FADV_WILLNEED选项同样的功能。和posix_fadvise()不同的是，readahead()是Linux所特有的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">readahead</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">off64_t</span> offset, <span class="hljs-keyword">size_t</span> count)</span></span>;<br></code></pre></td></tr></table></figure><p>readahead()调用把fd所表示文件的映射区域[offset, offset+count)读到页缓存中</p><p>成功时返回0，失败返回-1，并设置errno为下值之一：</p><p>EBADF 文件描述符非法</p><p>EINVAL 文件描述符对应的文件不支持预读</p>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存映射</title>
    <link href="/2021/03/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/"/>
    <url>/2021/03/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="储存映射"><a href="#储存映射" class="headerlink" title="储存映射"></a>储存映射</h1><p>除了标准文件I/O，内核还提供了一个接口，支持应用程序将文件映射到内存中，即内存地址和文件数据一一对应。这样开发人员就可以直接通过内存来访问文件，就像操作内存中的数据块一样，甚至可以写入内存数据区，然后通过透明的映射机制将文件写入磁盘</p><h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap()"></a>mmap()</h2><p>mmap()调用请求内核将文件描述符fd所指向的对象的len个字节数据映射到内存中，起始位置从offset开始。如果指定addr,表示优先使用addr作为内存中的起始地址。参数prot指定了访存权限，flags指定了其他操作行为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">mmap</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *addr, <span class="hljs-keyword">size_t</span> len, <span class="hljs-keyword">int</span> prot, <span class="hljs-keyword">int</span> flags, <span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">off_t</span> offset)</span></span>;<br></code></pre></td></tr></table></figure><p>addr参数告诉内核映射内存文件的最佳地址，但仅仅是作为提示信息，而不是强制性的，大部分用户对该参数传递0.调用返回内存映射区域的真实开始地址</p><p>prot参数描述了对内存区域所请求的访问权限。如果是PROT_NONE，表示无法访问映射区域的页(基本不用)，也可以是以下标志位的比特位或运算值：</p><p>PROT_READ 页可读</p><p>PROT_WRITE 页可写</p><p>PROT_EXEC 页可执行</p><p>prot参数所设置的访问权限不能和打开文件的访问模式冲突。即如果文件只读模式打开，prot不能设置PROT_WRITE</p><p>flag参数描述了内存映射的类型及其一些行为。其值为以下值按位或运算的结果：</p><p>MAP_FIXED : 表示mmap()强制接收参数addr,而不是作为提示信息。如果内核无法映射文件到指定地址，调用会失败。如果地址和长度指定的内存和已有映射有重叠区域，重叠区域的原有内容被丢弃，通过新的内容填充。该选项需要深入了解进程的地址空间，不可移植，因此不鼓励使用</p><p>MAP_PRIVATE : 表示映射区不共享。文件映射采用了写时复制，进程对内存的任何改变不影响真正的文件或其他进程的映射</p><p>MAP_SHARED : 表示和其他映射该文件的进程共享映射内存。该映射区域会受到其他进程写操作的影响</p><p>MAP_SHARED和MAP_PRIVATE必须指定其中的一个，但是不能同时指定</p><p>当映射文件描述符时，文件的引用计数会加1.因此，如果映射文件后关闭文件，进程依然可以访问该文件。当取消映射或进程终止时，对应的文件引用计数会减1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">void</span> *p<br>p = mmap (<span class="hljs-number">0</span>, len, PROT_READ, MAP_SHARED, fd， <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (p == MAP_FAILED)<br>&#123;<br>    perror(<span class="hljs-string">&quot;mmap&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="页大小"><a href="#页大小" class="headerlink" title="页大小"></a>页大小</h3><p>页是内存管理单元(MMU)的粒度单位。因此，它是内存中允许具有不同权限和行为的最小单元。页是内存映射的基本块，因而也是进程地址空间的基本块</p><p>mmap()系统调用的操作单元是页。参数addr和offset都必须按页大小对齐。也就是说，它们必须是页大小的整数倍</p><p>所以，映射区域是页大小的整数倍。如果调用方提供的len参数没有按页对其，映射区域会一直占满最后一个页，多出来的内存，即最后一个有效字节到映射区域边界这一部分区域，会用0填充。该区域所有读写操作都将返回0.写操作都不会影响文件的最后部分，即使使用MAP_SHARED进行映射，只有最前面len个字节会写到文件中。</p><p>标准POSIX规定，获得页大小的方法是通过sysconf()函数，它将返回一系列系统特定的信息:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">sysconf</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> name)</span></span>;<br></code></pre></td></tr></table></figure><p>sysconf()调用会返回配置项name值，如果name无效，返回-1.出错时，errno被设置为EINVAL。因为-1对某些项来说是有效值，所以明智的做法是在调用前清空errno，并在调用后检查</p><p>POSIX定义_SC_PAGESIZE(_SC_PAGE_SIZE与其同义)表示页大小，因此获取页大小很简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">long</span> page_size = sysconf (_SC_PAGESIZE);<br></code></pre></td></tr></table></figure><p>Linux也提供了getpagesize()函数来获得页大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> page_size = getpagesize();<br></code></pre></td></tr></table></figure><p>并不是所有的UNIX系统都支持此函数，POSIX 1003.1-2001弃用了该函数</p><p>页大小是由&lt;asm/pages.h&gt;中的宏PAGE_SIZE定义的。因此第三种获取页大小的方法是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> page_size = PAGE_SIZE;<br></code></pre></td></tr></table></figure><p>为了可移植性和代码的兼容性，sysconf()是最好的选择</p><h3 id="返回值和错误码"><a href="#返回值和错误码" class="headerlink" title="返回值和错误码"></a>返回值和错误码</h3><p>成功时，mmap()返回映射区域的地址。失败时，返回MAP_FAILED,并相应设置errno值。mmap()调用，永远不会返回0</p><p>errno可能为：</p><p>EACESS : 指定的文件描述符不是普通文件，或者打开模式和参数prot或flags冲突</p><p>EAGAIN : 文件已通过文件锁锁定</p><p>EBADF : 指定文件描述符非法</p><p>EINVAL : 参数addr、len、off中的一个或多个非法</p><p>ENFILE : 打开文件数达到系统上限</p><p>ENODEV : 文件所在文件系统不支持存储映射</p><p>ENOMEM : 内存不足</p><p>EOVERFLOW : 参数addr+len的结果超过了地址空间大小</p><p>EPERM : 设定了参数PORT_EXEC,但文件系统以不可执行方式挂载</p><h3 id="相关信号"><a href="#相关信号" class="headerlink" title="相关信号"></a>相关信号</h3><p>和映射区域相关的两个信号如下：</p><p>SIGBUS 当进程试图访问一块已经失效的映射区域时，会生成该信号</p><p>SIGSEGV 当进程试图写一块只读的映射区域时，会生成该信号</p><h2 id="munmap"><a href="#munmap" class="headerlink" title="munmap()"></a>munmap()</h2><p>Linux提供了munmap()系统调用，来取消mmap()所创建的映射</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">munmap</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *addr, <span class="hljs-keyword">size_t</span> len)</span></span>;<br></code></pre></td></tr></table></figure><p>munmap()会消除进程地址空间从addr开始，len字节长的内存中的所有页面映射。一旦映射被消除，之前关联的内存区域就不再有效，如果试图再次访问会生成SIGSEGV信号</p><p>一般来说，传递给munmap()的参数是上次mmap()调用的返回值及其参数len</p><p>成功时,munmap()返回0；失败时返回-1，并设置相应errno值。唯一标准的errno值是EINVAL，它表示一个或多个参数无效</p><h2 id="存储映射实例"><a href="#存储映射实例" class="headerlink" title="存储映射实例"></a>存储映射实例</h2><p>下面是将文件输出到标准输出的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">sb</span>;</span><br>    <span class="hljs-keyword">off_t</span> len;<br>    <span class="hljs-keyword">char</span> *p;<br>    <span class="hljs-keyword">int</span> fd;<br><br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;file&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    fd = open (argv[<span class="hljs-number">1</span>], O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fstat (fd, &amp;sb) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;fstat&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!S_ISREG (sb.st_mode))<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span> (<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%s is not a file\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    p = mmap (<span class="hljs-number">0</span>, sb.st_size, PROT_READ, MAP_SHARED, fd, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (p == MAP_FAILED)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;mmap&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (close (fd) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;close&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (len = <span class="hljs-number">0</span>; len &lt; sb.st_size; len++)<br>    &#123;<br>        <span class="hljs-built_in">putchar</span> (p[len]);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (munmap (p, sb.st_size) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;munmap&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mmap-的优点"><a href="#mmap-的优点" class="headerlink" title="mmap()的优点"></a>mmap()的优点</h2><p>相对于read()和write()而言，使用mmap()处理文件有很多优点：</p><ul><li>使用read()或write()，需要从用户缓冲区进行数据读写，而使用映射文件进行操作，可以避免多余的数据拷贝操作。</li><li>除了可能潜在页错误，读写映射文件不会带来系统调用和上下文切换的开销，它就像直接操作内存一样简单</li><li>当多个进程把同一个对象映射到内存中时，数据会在所有进程间共享。只读和写共享的映射在全体中都是共享的；私有可写的映射对尚未进行写时拷贝的页是共享的</li><li>映射对象中搜索只需要很简单的指针操作，不需要使用系统调用lseek()</li></ul><p>基于以上理由，mmap()是很多应用的明智选择</p><h2 id="mmap-的不足"><a href="#mmap-的不足" class="headerlink" title="mmap()的不足"></a>mmap()的不足</h2><p>使用mmap()需要注意以下几点：</p><ul><li>由于映射区域的大小总是页的整数倍，因此，文件大小与页大小的整数倍之间有空间浪费。对于小文件，空间浪费比较严重。例如，如果页大小是4KB,一个7字节的映射就会浪费4089字节</li><li>存储映射区域必须在进程地址空间内。对于32位的地址空间，大量的大小不同的映射会导致生成大量的碎片，使得很难找到连续的大片空内存。当然，这个问题在64位地址空间就不是很明显</li><li>创建和维护映射以及相关的内核数据结构有一定的开销。不过，由于mmap()消除了读写时不必要的拷贝，这种开销几乎可以忽略，对于大文件和频繁访问的文件更是如此</li></ul><p>基于以上理由，处理大文件(浪费空间很小)，或者在文件大小恰好被怕个大小整除(没有空间浪费)时，mmap()的优势就会非常显著</p><h2 id="给出映射提示"><a href="#给出映射提示" class="headerlink" title="给出映射提示"></a>给出映射提示</h2><p>Linux提供了系统调用madvise()，进程对自己期望如何访问映射区域给内核一些提示信息。内核会根据此优化自己的行为，尽量更好的利用映射区域。</p><p>调用madvise()会告诉内核该如何对于起始地址为addr，长度为len的内存映射区域进行操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">madvise</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *addr, sizet len, <span class="hljs-keyword">int</span> advice)</span></span>;<br></code></pre></td></tr></table></figure><p>如果len为0，内核将把提示信息应用于所有起始地址为addr的映射。参数advice表示提示信息，可以是下列值之一：</p><p>MADV_NORMAL 对指定的内存区域，应用没有特殊提示，按正常方式操作</p><p>MADV_RANDOM 应用将以随机访问方式，访问指定范围的页</p><p>MADV_SEQUENTIAL 应用期望从低地址到高地址顺序访问指定范围的页</p><p>MADV_WILLNEED 应用期望会很快访问指定范围的页</p><p>MADV_DONTNEED 应用在短期内不会访问指定范围内的页</p>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>epoll</title>
    <link href="/2021/03/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/epoll/"/>
    <url>/2021/03/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/epoll/</url>
    
    <content type="html"><![CDATA[<h1 id="Event-Poll"><a href="#Event-Poll" class="headerlink" title="Event Poll"></a>Event Poll</h1><p>由于poll()和select()的局限，Linux2.6内核引入了event poll(epoll)机制。虽然epoll的实现比poll()和select()要复杂的多，epoll解决了前两个都存在的基本性能问题，并增加了一些新的特性</p><p>对于poll()和select()每次调用时都需要所有被监听的文件描述符列表。内核必须遍历所有被监视的文件描述符、当这个文件描述符列表变得很大时，每次调用都要遍历列表就编程规模上的瓶颈</p><p>epoll把监听注册从实际监听中分离出来，从而结局了这个问题。一个系统调用会初始化epoll上下文，另一个从上下文中加入或删除监视的文件描述符，第三个执行真正的等待事件。</p><h2 id="创建新的epoll示例"><a href="#创建新的epoll示例" class="headerlink" title="创建新的epoll示例"></a>创建新的epoll示例</h2><p>通过epoll_create1()创建epoll上下文：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/epollh&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">epoll_create1</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> flags)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">epoll_create</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span></span>;<br></code></pre></td></tr></table></figure><p>调用成功时，epoll_create1()会创建新的epoll实例，并返回和该实例关联的文件描述符。这个文件描述符和真正的文件没有关系，仅仅是为了后续调用epoll而创建的</p><p>参数flags支持修改epoll的行为，当前，只有EPOLL_CLOEXEC是个合法的flag,他表示进程被替换时关闭文件描述符</p><p>出错时，返回-1，并设置errno为下列值之一：</p><p>EINVAL : 参数flags非法</p><p>EMFILE : 用户打开的文件数达到上限</p><p>ENFILE : 系统打开的文件数达到上限</p><p>ENOMEN : 内存不足，无法完成本次操作</p><p>epoll_create()时老版本的epoll_create1()的实现，现已废弃。</p><p>epoll的标准调用方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> epfd;<br>epfd = epoll_create1(EPOLL_CLOEXEC);<br><span class="hljs-keyword">if</span> (epfd &lt; <span class="hljs-number">0</span>)<br>&#123;<br>    perror (<span class="hljs-string">&quot;epoll_creat1);</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>当完成监视后，epoll_create1()返回的文件描述符需要用close()调用关闭</p><h2 id="控制epoll"><a href="#控制epoll" class="headerlink" title="控制epoll"></a>控制epoll</h2><p>epoll_ctl()函数可以向指定的epoll上下文中加入或删除文件描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/epoll.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">poll_ctl</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> epfd, <span class="hljs-keyword">int</span> op, <span class="hljs-keyword">int</span> fd, struct epoll_event *event)</span></span>;<br></code></pre></td></tr></table></figure><p>头文件&lt;sys/epoll.h&gt;中定义了epoll_event结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span></span><br><span class="hljs-class">&#123;</span><br>    _u32 events;<br>    unio<br>    &#123;<br>        <span class="hljs-keyword">void</span> *ptr;<br>        <span class="hljs-keyword">int</span> fd;<br>        _u32 u32;<br>        _u64 u64;<br>    &#125; data;<br>&#125;;<br></code></pre></td></tr></table></figure><p>epoll_ctl()调用如果执行成功，会控制和文件描述符epfd关联的epoll实例。参数op指定对fd指向的文件所执行的操作。参数event进一步描述epoll更具体的行为</p><p>以下是参数op的有效值：</p><p>EPOLL_CTL_ADD ： 把文件描述符fd所指向的文件添加到epfd指定的epoll监听实例集中，监听event中定义的事件</p><p>EPOLL_CTL_DEL ： 把文件描述符fd所指向的文件冲epfd指定的epoll监听实例集中删除</p><p>EPOLL_CTL_MOD ： 使用event指定的更新事件修改在已有fd上的监听行为</p><p>epoll_events结构体中的events变量列出了在指定文件描述符上要监听的事件。多个事件可以通过位或运算同时指定。以下是events的有效值：</p><p>EPOLLERR ： 文件出错。即使没设置，这个事件也被监听</p><p>EPOLLET ： 在监听文件上开启边缘触发。默认是条件触发</p><p>EPOLLHUP ： 文件被挂起。即使没设置，这个事件也被监听</p><p>EPOLLIN ： 文件为阻塞，可读</p><p>EPOLLONESHOT ： 在事件生成并处理后，文件不会再被监听。必须通过EPOLL_CTL_MOD指定新的事件掩码，以便重新监听文件</p><p>EPOLLOUT ： 文件为阻塞，可写</p><p>EPOLLPRI ： 存在高优先级的带外数据可读</p><p>event_poll 中的data变量是由用户私有使用。当接收到请求事件后，data会被返回给用户。通常用法是把event.data.fd设置为fd,这样可以很容易查看哪个文件描述符触发了事件。</p><p>当成功时，epoll_ctl()返回0。失败时，返回-1，并设置errno为下值：</p><p>EBADF ： epfd不是有效的epoll实例，或者fd不是有效的文件描述符</p><p>EEXIST ： op值设置为EPOLL_CTL_ADD，但fd已经与epfd关联</p><p>EINVAL : epfd不是epoll实例，epfd和fd相同，或op无效</p><p>ENOENT : op值设置为EPOLL_CTL_MOD或EPOLL_CTL_DEL，但是fd没有和epfd关联</p><p>ENFILE : 系统打开的文件数达到上限</p><p>ENOMEN : 内存不足，无法完成本次操作</p><p>EPERM ： fd不支持epoll</p><p>在下面的例子中，在epoll实例epfd中加入fd所指向文件的监听事件，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">event</span>;</span><br><span class="hljs-keyword">int</span> ret;<br><br>event.data.fd = fd;<br>event.events = EPOLLIN | EPOLLOUT;<br><br>ret = epoll_ctl (epfd, EPOLL_CTL_ADD, fd, &amp;event);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br>    perror (<span class="hljs-string">&quot;epoll_ctl&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>修改epfd实例中的fd上的一个监听事件，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">event</span>;</span><br><span class="hljs-keyword">int</span> ret;<br><br>event.data.fd = fd;<br>event.events = EPOLLIN;<br><br>ret = epoll_ctl (epfd, EPOLL_CTL_MOD, fd, &amp;event);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br>    perror (<span class="hljs-string">&quot;epoll_ctl&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>相反，从epoll实例中删除在fd上的一个监听事件，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">event</span>;</span><br><span class="hljs-keyword">int</span> ret;<br><br>ret = epoll_ctl (epfd, EPOLL_CTL_DEL, fd, &amp;event);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br>    perror (<span class="hljs-string">&quot;epoll_ctl&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，当op设置为EPOLL_CTL_DEL时，由于没有提供事件掩码，event参数可能为NULL，在2.6.9以前的内核中，会检查该参数是否非空，为了和老版本兼容，必须传递一个有效的非空指针，不能只是声明。内核2.6.9版本修复了这个bug</p><h2 id="等待epoll事件"><a href="#等待epoll事件" class="headerlink" title="等待epoll事件"></a>等待epoll事件</h2><p>系统调用epoll_wait()会等待和指定epoll实例关联的文件描述符上的事件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/epoll.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">epoll_wait</span><span class="hljs-params">(<span class="hljs-keyword">int</span> epfd, struct epoll_event *events, <span class="hljs-keyword">int</span> maxevents, <span class="hljs-keyword">int</span> timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>当调用epoll_wait()时，等待epoll实例epfd中的文件fd上的事件，时限为timeout毫秒。成功时，events指向描述每个事件的epoll_event结构体的内存，且最多可以有maxevents个事件，返回值是事件个数；出错时，返回-1,并将errno设置为下值：</p><p>EBADF ： epfd是一个无效的文件描述符</p><p>EFAULT ： 进程对events所指向的内存没有写权限</p><p>EINTR ： 系统调用在完成前发生信号中断或超时</p><p>EINVAL ： epfd不是有效的epoll实例，或者maxevents小于或等于0</p><p>如果timeout为0，即使没有事件发生，调用也会立即返回0.如果timeout为-1，调用将一直等待到有事件发生才返回</p><p>当调用返回时，epoll_event结构体中的events变量描述了发生的事件。data变量保留了用户在调用epoll_ctl()前的所有内容</p><p>一个完整的例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_EVENTS 64</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> *<span class="hljs-title">events</span>;</span><br><span class="hljs-keyword">int</span> nr_events, i, epfd;<br><br>events = <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span> (struct epoll_event) * MAX_EVENTS);<br><span class="hljs-keyword">if</span> (!events)<br>&#123;<br>    perror (<span class="hljs-string">&quot;malloc&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>nr_events = epoll_wait (epfd, events, MAX_EVENTS, <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span> (nr_events &lt; <span class="hljs-number">0</span>)<br>&#123;<br>    perror (<span class="hljs-string">&quot;epoll_wait&quot;</span>);<br>    <span class="hljs-built_in">free</span> (events);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nr_events; i++)<br>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;event = %ld on fd = %d\n&quot;</span>,events[i].events, events[i].data.fd);<br>&#125;<br><span class="hljs-built_in">free</span> (events);<br></code></pre></td></tr></table></figure><h2 id="边缘触发事件和条件触发事件"><a href="#边缘触发事件和条件触发事件" class="headerlink" title="边缘触发事件和条件触发事件"></a>边缘触发事件和条件触发事件</h2><p>如果epoll_ctrl()的参数event中的events项设置为EPOLLET，fd上的监听方式为边缘触发（ET)，否则为条件触发（LT)</p><p>考虑下面的生产者和消费者在通过UNIX管道通信时的情况</p><ol><li>生产者向管道写入1KB数据</li><li>消费者在管道上调用epoll_wait()，等待管道上有数据并可读</li></ol><p>通过条件触发监视时，在步骤2中epoll_wait()会立刻返回，表示管道可读。通过边缘触发监视时，需要在步骤1发生后，步骤2才会返回</p><p>条件触发是默认行为，poll()和select()就是采用这种模式，也是大多数开发者所期望的。边缘触发需要不同的编程解决方案，通常是非阻塞I/O，而且需要仔细检查EAGAIN</p>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分散聚集I/O</title>
    <link href="/2021/02/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%88%86%E6%95%A3%E8%81%9A%E9%9B%86I-O/"/>
    <url>/2021/02/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%88%86%E6%95%A3%E8%81%9A%E9%9B%86I-O/</url>
    
    <content type="html"><![CDATA[<h1 id="分散-聚集I-O"><a href="#分散-聚集I-O" class="headerlink" title="分散/聚集I/O"></a>分散/聚集I/O</h1><p>分散/聚集I/O 是一种可以在单词系统调用中对多个缓冲区输入输出的方法，可以把的一个缓冲区的数据写到单个数据流，也可以把单个数据流读到多个缓冲区中。其命名的原因在于数据会被分散到指定缓冲区向量，或者从指定缓冲区向量中聚集数据。这种输入输出的方法也成为向量I/O。前面所提到的标准读写系统调用可以成为线性I/O</p><p>与线性I/O相比，分散聚集I/O有如下优势：</p><ol><li>编码模式更自然</li><li>如果数据本身是分段的，向量IO提供了直观的数据处理方式</li><li>效率更高</li><li>单个向量I/O操作可以取代多个线性I/O操作</li><li>性能更好</li><li>除了减少了发起的系统调用次数，通过内部优化，向量I/O可以比线性I/O提供更好的性能</li><li>支持原子性</li><li>和多个线性I/O操作不同，一个进程可以执行单个向量I/O操作，比秒了和其它进程交叉操作的风险</li></ol><h2 id="readv-和writev"><a href="#readv-和writev" class="headerlink" title="readv()和writev()"></a>readv()和writev()</h2><p>readv()函数从文件描述符fd中读取count个段(一个段即一个iovec结构体)到参数参数iov所指定的缓冲区中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/uio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">readv</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">const</span> struct iovec *iov, <span class="hljs-keyword">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><p>writev()函数冲参数iov指定的缓冲区中读取count个段的数据，并写入fd中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/uio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">writev</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">const</span> struct iovec *iov, <span class="hljs-keyword">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><p>除了同时操作多个缓冲区外，readv()函数和writev()函数的功能分别和read()和write()的功能一致</p><p>每个iovec结构体描述一个独立的/物理不连续的缓冲区，我们称其为段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/uio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">void</span> *iov_base;<br>    <span class="hljs-keyword">size_t</span> iov_len;<br>&#125;<br></code></pre></td></tr></table></figure><p>一组段的集合称为向量。每个段描述了内存中所要读写的缓冲区的地址和长度。</p><p>readv()函数在处理下个缓冲区之前，会填满当前缓冲区的iov_len个字节。</p><p>writev()函数在处理下个缓冲区之前，会把当前缓冲区所有iov_len个字节的数据输出</p><p>这两个函数都会顺序处理向量中的段，从iov[0]开始，一直到iov[count-1]</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>操作成功是，readv()函数和writev()函数分别返回读写的字节数，该字节数应该等于所有count个iov_len的和</p><p>出错时，返回-1并设置errno，设置的errno和read()、write()相同。此外还有另外两种错误场景：</p><ol><li>如果所有count个iov_len的和超出ssize_max，则不会处理任何数据，返回-1，并把errno设置为EINVAL</li><li>count必须大于0，且小于等于IOV_MAX(1024)，如果count为0，则返回0(errno可能设置为EINVAL)。如果超过IOV_MAX，不会处理数据，返回-1，并把errno设置为EINVAL</li></ol><h2 id="writev-示例"><a href="#writev-示例" class="headerlink" title="writev()示例"></a>writev()示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/uio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>[3];</span><br>    <span class="hljs-keyword">ssize_t</span> nr;<br>    <span class="hljs-keyword">int</span> fd, i;<br><br>    <span class="hljs-keyword">char</span> *buf[] = &#123;<br>        <span class="hljs-string">&quot;The term buccaneer comes from the word boucan.\n&quot;</span>,<br>        <span class="hljs-string">&quot;A boucan is a wooden frame used for cokking meat.\n&quot;</span>,<br>        <span class="hljs-string">&quot;Buccaneer is the West Indies name for a pirate.\n&quot;</span><br>    &#125;;<br><br>    fd = open (<span class="hljs-string">&quot;buccaneer.txt&quot;</span>, O_WRONLY | O_CREAT | O_TRUNC);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        iov[i].iov_base = buf[i];<br>        iov[i].iov_len = <span class="hljs-built_in">strlen</span>(buf[i]) +<span class="hljs-number">1</span>;<br>    &#125;<br><br>    nr = writev (fd, iov, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">if</span> (nr == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;writev&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;wrote %d bytes\n&quot;</span>, nr);<br><br>    <span class="hljs-keyword">if</span> (close (fd))<br>    &#123;<br>        perror (<span class="hljs-string">&quot;close&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="readv-示例"><a href="#readv-示例" class="headerlink" title="readv()示例"></a>readv()示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/uio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> foo[<span class="hljs-number">48</span>], bar[<span class="hljs-number">51</span>], baz[<span class="hljs-number">49</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>[3];</span><br>    <span class="hljs-keyword">ssize_t</span> nr;<br>    <span class="hljs-keyword">int</span> fd, i;<br><br>    fd = open(<span class="hljs-string">&quot;buccaneer.txt&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    iov[<span class="hljs-number">0</span>].iov_base = foo;<br>    iov[<span class="hljs-number">0</span>].iov_len = <span class="hljs-keyword">sizeof</span>(foo);<br>    iov[<span class="hljs-number">1</span>].iov_base = bar;<br>    iov[<span class="hljs-number">1</span>].iov_len = <span class="hljs-keyword">sizeof</span>(bar);<br>    iov[<span class="hljs-number">2</span>].iov_base = baz;<br>    iov[<span class="hljs-number">2</span>].iov_len = <span class="hljs-keyword">sizeof</span>(baz);<br><br>    nr = readv (fd,iov,<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">if</span> (nr == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;readv&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%d:%s&quot;</span>, i, (<span class="hljs-keyword">char</span>*)iov[i].iov_base);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (close (fd))<br>    &#123;<br>        perror (<span class="hljs-string">&quot;close&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高级文件I/O</title>
    <link href="/2021/02/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E6%96%87%E4%BB%B6I-O/"/>
    <url>/2021/02/21/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E6%96%87%E4%BB%B6I-O/</url>
    
    <content type="html"><![CDATA[<h1 id="高级文件I-O"><a href="#高级文件I-O" class="headerlink" title="高级文件I/O"></a>高级文件I/O</h1><p>Linux提供了高级I/O系统调用：</p><ul><li>分散/聚集 I/O：允许一次调用同时从多个缓冲区读取数据或者同属写入多个缓冲区，它适用于聚集多个不同的数据结构变量，完成一次I/O事务</li><li>Epoll：Epoll是前面提到的poll()和select()的改进版，适用于一个线程需要处理数百个文件描述符的场景</li><li>内存映射I/O：将文件映射到内存，支持通过简单的内存管理方式来处理文件I/O，适用于某些特定的I/O模式</li><li>文件提示：允许进程将文件I/O期望使用方式的提示信息提供给内核，可以提升I/O性能</li><li>异步I/O：允许进程发起多个I/O请求且不必等待这些请求完成，适用于不适用线程来处理很高的I/O负载</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="/2021/02/21/%E5%88%86%E6%95%A3%E8%81%9A%E9%9B%86I-O/">分散/聚集 I/O</a></p></li><li><p><a href="/2021/03/21/epoll/">epoll</a></p></li><li><p><a href="/2021/03/21/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/">内存映射</a></p></li><li><p><a href="/2021/03/21/%E6%96%87%E4%BB%B6%E6%8F%90%E7%A4%BA/">文件提示</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标准I/O</title>
    <link href="/2021/02/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%A0%87%E5%87%86I-O/"/>
    <url>/2021/02/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%A0%87%E5%87%86I-O/</url>
    
    <content type="html"><![CDATA[<h1 id="标准I-O"><a href="#标准I-O" class="headerlink" title="标准I/O"></a>标准I/O</h1><p>C标准库中提供了标准I/O库(简称stdio)，它实现了跨平台的用户缓冲解决方案。这个标准I/O库使用简单，功能强大</p><p>接下来主要讨论使用C标准库完成打开、关闭和读写操作。在应用中使用标准I/O还是直接使用系统调用，需要权衡应用的需求和行为</p><h2 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h2><p>标准I/O程序集并不是直接操作文件描述符。相反，他们通过唯一标识符，即文件指针来操作。在C标准库中，文件描述符和文件指针一一映射。文件指针是由指向类型定义FILE的指针表示</p><p>在标准I/O中，打开的文件成为“流”。流可以被打开用来读、写或者二者兼有</p><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>文件通过fopen()打开以供读写操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">FILE *<span class="hljs-title">fopen</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *mode)</span></span>;<br></code></pre></td></tr></table></figure><p>该函数根据mode参数，按指定模式打开path所指向的文件，并给他关联上新的流</p><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>参数mode描述如何打开指定文件，它可以是以下字串之一：</p><table><thead><tr><th>mode</th><th>description</th></tr></thead><tbody><tr><td>r</td><td>以只读模式打开文件。流指针指向文件开始</td></tr><tr><td>r+</td><td>以读写模式打开文件。流指针指向文件开始</td></tr><tr><td>w</td><td>以只写模式打开文件。如果文件存在，文件会被清空，如不存在，就会被创建。流指针指向文件开始</td></tr><tr><td>w+</td><td>以读写模式打开文件。如果文件存在，文件会被清空，如不存在，就会被创建。流指针指向文件开始</td></tr><tr><td>a</td><td>以追加写模式打开文件。如果文件不存在，就会被创建。流指针指向文件尾。所有的写入都是追加到文件的末尾</td></tr><tr><td>a+</td><td>以追加读写模式打开文件。如果文件不存在，就会被创建。流指针指向文件尾。所有的写入都是追加到文件的末尾</td></tr></tbody></table><p>举个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">FILE *stream;<br><br>stream = fopen (<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (!stream)<br>&#123;<br>    <span class="hljs-comment">/* error */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过文件描述符打开流"><a href="#通过文件描述符打开流" class="headerlink" title="通过文件描述符打开流"></a>通过文件描述符打开流</h3><p>fdopen()会把一个已经打开的文件描述符转换成流：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">FILE *<span class="hljs-title">fdopen</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *mode)</span></span>;<br></code></pre></td></tr></table></figure><p>fdopen()的可能模式和fopen()相同，而且必须和初始打开文件描述符的模式匹配，可以指定模式w和w+，但是它们不会清空文件</p><p>文件描述符并没有被复制，而只是关联了一个新的流。关闭流也会关闭相应的文件描述符</p><h2 id="关闭流"><a href="#关闭流" class="headerlink" title="关闭流"></a>关闭流</h2><p>fclose()函数会关闭给定的流：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fclose</span> <span class="hljs-params">(FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>再关闭前，所有缓冲但还没有写出的数据都会被写出。成功返回0，失败返回EOF并设置相应的errno值</p><h3 id="关闭所有流"><a href="#关闭所有流" class="headerlink" title="关闭所有流"></a>关闭所有流</h3><p>fcloseall()函数会关闭和当前进程关联的所有流，包括标准输入、标准输出和标准错误：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fcloseall</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>在关闭前，所有的流都会被写出。这个函数始终返回0，它是Linux所特有的</p><h2 id="从流中读数据"><a href="#从流中读数据" class="headerlink" title="从流中读数据"></a>从流中读数据</h2><p>C标准库实现了多种从流中读数据的方法。本次主要记录最常用的三种：每次读取一个字节；每次读取一行以及读取二进制数据</p><h3 id="每次读取一个字节"><a href="#每次读取一个字节" class="headerlink" title="每次读取一个字节"></a>每次读取一个字节</h3><p>通常情况下，理想的I/O模式是每次读取一个字符。函数fgetc()可以用来从流中读取单个字符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fgetc</span> <span class="hljs-params">(FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>该函数从stream中读取一个字符，并把该字符强制类型转换成unsigned int返回。强制类型转换是为了能够表示文件结束或错误：在这两种情况下都会返回EOF。fgetc()的返回值必须确保存成int类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> c;<br>c = fgetc (stream);<br><span class="hljs-keyword">if</span> (c == EOF)<br>&#123;<br>    <span class="hljs-comment">/* error */</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;c = %c\n&quot;</span>,(<span class="hljs-keyword">char</span>) c);<br>&#125;<br></code></pre></td></tr></table></figure><p>stream指向的流必须以可读模式打开</p><h4 id="把字符放回到流中"><a href="#把字符放回到流中" class="headerlink" title="把字符放回到流中"></a>把字符放回到流中</h4><p>标准输入输出提供了一个函数可以把字符放回到流中。当流读取的最后一个字符，如果不需要该字符的话，可以把它放回流中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ungetc</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> c, FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>成功返回c,失败返回EOF</p><h3 id="每次读取一行"><a href="#每次读取一行" class="headerlink" title="每次读取一行"></a>每次读取一行</h3><p>函数fgets()会从指定流中读取一个字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">fgets</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *str, <span class="hljs-keyword">int</span> size, FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>该函数从stream中读取size-1个字节的数据，并把结果保存到str中。读完最后一个字节后，缓冲区会写入空字符(\0)。当读到EOF或换行符时，会结束读。如果读到换行符，会把\n写入str中。</p><p>fgets()成功时，返回str，失败时，返回NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">char</span> buf[LINE_MAX];<br><br><span class="hljs-keyword">if</span> (!fgets (buf, LINE_MAX, stream))<br>&#123;<br>    <span class="hljs-comment">/* error */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="读取任意字符串"><a href="#读取任意字符串" class="headerlink" title="读取任意字符串"></a>读取任意字符串</h4><p>通常，基于行的读取fgets()函数是很有用的。但是很多时候，它又会带来很多麻烦。比如不想要分隔符，或者想要自己设置分隔符，这时就需要用fgetc()来实现fgets()的功能了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//读取n-1个字节到str中，然后追加一个\0字符</span><br><span class="hljs-keyword">char</span> *s;<br><span class="hljs-keyword">int</span> c;<br><br>s = str;<br><span class="hljs-keyword">while</span> (--n &gt; <span class="hljs-number">0</span> &amp;&amp; (c = fgetc (stream)) != EOF)<br>&#123;<br>    *s++ = c;<br>&#125;<br><br>*s = <span class="hljs-string">&#x27;\0&#x27;</span>;<br></code></pre></td></tr></table></figure><p>可以优化代码支持在任意分隔符d处停止读数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">char</span> *s;<br><span class="hljs-keyword">int</span> c;<br><br>s = str;<br><span class="hljs-keyword">while</span> (--n &gt; <span class="hljs-number">0</span> &amp;&amp; (c = fgetc (stream)) != EOF &amp;&amp; (*s++ = c) != d)<br>&#123;<br>    ;<br>&#125;<br><br><span class="hljs-keyword">if</span> (c == d)<br>&#123;<br>    *--s = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    *s = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读二进制文件"><a href="#读二进制文件" class="headerlink" title="读二进制文件"></a>读二进制文件</h3><p>很多时候，读取一个字符或一行是不够的，为了解决这个问题，标准I/O库提供了fread()函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">fread</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *buf, <span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">size_t</span> nr, FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>调用fread()会从stream中读取nr项数据，每项size个字节，并将数据保存到buf所指向的缓冲区中。文件指针向前移动读出数据的字节数</p><p>返回读到的数据项的个数（注意：不是读入字节数！！！）。如果读取失败或文件结束，返回一个比nr小的数，不幸的是必须使用ferror()或feof()函数，才能判断是失败还是文件结束</p><h2 id="向流中写数据"><a href="#向流中写数据" class="headerlink" title="向流中写数据"></a>向流中写数据</h2><p>和读相同，本次也介绍三个最常用的写数据的方法：每次写一个字节，每次写一个字符串，和写二进制数据</p><h3 id="写入单个字符"><a href="#写入单个字符" class="headerlink" title="写入单个字符"></a>写入单个字符</h3><p>和fgetc()函数对应的是fputc():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fputc</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> c, FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>fputc()函数将参数c所表示的字节(强制类型转换成unsigned char)写到指针stream所指向的流。成功返回c，否则，返回EOF，并设置相应的errno值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (fputc (<span class="hljs-string">&#x27;p&#x27;</span>, stream) == EOF)<br>&#123;<br>    <span class="hljs-comment">/* error */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="写入字符串"><a href="#写入字符串" class="headerlink" title="写入字符串"></a>写入字符串</h3><p>函数fputs()用于向指定流写入整个字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fputs</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *str, FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>fputs()函数会把str所指向的所有字符串都写入stream指向的流中，不会写入结束标记符。成功时返回非负整数；失败时，返回EOF</p><h3 id="写入二进制数据"><a href="#写入二进制数据" class="headerlink" title="写入二进制数据"></a>写入二进制数据</h3><p>和fread()函数对应，标准I/O提供了fwrite()函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">fwrite</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *buf, <span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">size_t</span> nr, FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><p>调用fwrite()会把buff所指向的nr个数据写入stream中，每个数据长为size</p><p>成功时返回写入的数据项个数，出错时，返回值小于nr</p><h2 id="标准I-O例程"><a href="#标准I-O例程" class="headerlink" title="标准I/O例程"></a>标准I/O例程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE *in, *out;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pirate</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> booty;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> beard_len;<br>    &#125;p, blackbeard = &#123; <span class="hljs-string">&quot;Edward Teach&quot;</span>, <span class="hljs-number">950</span>, <span class="hljs-number">48</span>&#125;;<br><br>    out = fopen (<span class="hljs-string">&quot;./data&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!out)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;fopen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!fwrite (&amp;blackbeard, <span class="hljs-keyword">sizeof</span>(struct pirate), <span class="hljs-number">1</span>, out))<br>    &#123;<br>        perror (<span class="hljs-string">&quot;fwrite&quot;</span>);<br>        fclose (out);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    fclose (out);<br><br>    in = fopen (<span class="hljs-string">&quot;./data&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!in)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;fopen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!fread (&amp;p, <span class="hljs-keyword">sizeof</span>(struct pirate), <span class="hljs-number">1</span>, in))<br>    &#123;<br>        perror (<span class="hljs-string">&quot;read&quot;</span>);<br>        fclose (in);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    fclose (in);<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;name = \&quot;%s\&quot; booty = %lu beard_len = %u\n&quot;</span>,<br>                    p.name,p.booty,p.beard_len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I/O多路复用</title>
    <link href="/2021/02/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/I-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <url>/2021/02/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/I-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="I-O-多路复用"><a href="#I-O-多路复用" class="headerlink" title="I/O 多路复用"></a>I/O 多路复用</h1><p>I/O多路复用支持应用同时在多个文件描述符上阻塞，并在其中某个可以读写的时候收到通知，在设计上遵循以下原则：</p><ol><li>I/O多路复用：当任何一个文件描述符I/O就绪时进行通知</li><li>都不可用？在有可用的文件描述符之前一直处于睡眠状态</li><li>唤醒：哪个文件描述符可用</li><li>处理所有准备就绪的文件描述符，没有阻塞</li><li>返回第一步，重新开始</li></ol><h2 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h2><p>select()系统调用提供了一种实现同步I/O多路复用的机制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/select.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">select</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> n, fd_set *readfds, fd_set *writefds,</span></span><br><span class="hljs-params"><span class="hljs-function">            fd_set *exceptfds, struct timeval *timeout)</span></span>;<br>FD_CLR (<span class="hljs-keyword">int</span> fd, fd_set *<span class="hljs-built_in">set</span>);<br>FD_ISSET (<span class="hljs-keyword">int</span> fd, fd_set *<span class="hljs-built_in">set</span>);<br>FD_SET (<span class="hljs-keyword">int</span> fd, fd_set *<span class="hljs-built_in">set</span>);<br>FD_ZERO (fd_set *<span class="hljs-built_in">set</span>);<br></code></pre></td></tr></table></figure><p>在给定的文件描述符I/O准备就绪之前并且还没超出指定的时间限制，select()调用就会阻塞</p><p>监视的文件描述符分为3类，分别等待不同的事件：</p><ul><li>readfds:是否有数据可读</li><li>writefds:是否有写操作可以无阻塞完成</li><li>exceptfds:是否发生异常，或者出现带外数据</li></ul><p>指定的集合可以是NULL，表示不监听该事件</p><p>参数timeout是指向timeval结构体的指针，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">long</span> tv_sec;    <span class="hljs-comment">/*seconds*/</span><br>    <span class="hljs-built_in">log</span> tv_usec;    <span class="hljs-comment">/*microseconds*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="宏管理"><a href="#宏管理" class="headerlink" title="宏管理"></a>宏管理</h3><p>不是直接操作文件描述符，而是同过辅助宏管理</p><p>FD_ZERO从指定集合中删除所有文件描述符，每次调用select()之前，都应该调用</p><p>FD_SET向指定机中添加一个文件描述符</p><p>FD_CLR从指定集中删除一个文件描述符</p><p>FD_ISSET检查一个文件描述符是否在给定的集合中，如果在返回非0，不在返回0</p><h3 id="返回值和错误码"><a href="#返回值和错误码" class="headerlink" title="返回值和错误码"></a>返回值和错误码</h3><p>select()调用成功，返回三个集合中I/O就绪的文件描述符总数。如果给出了超时设置，返回值可能是0.出错时，返回-1，并把errno值设置成如下值之一：</p><p><strong>EBADF</strong>: 某个集合中存在非法文件描述符</p><p><strong>EINTR</strong>: 等待时捕获了一个信号，可以重新发起调用</p><p><strong>EINVAL</strong>: 参数n是负数，或设置超时时间值非法</p><p><strong>ENOMEM</strong>: 没有足够的内存来完成请求</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p>监听stdin的输入，5s超时，虽然这个例子不是I/O复用,但是也能理解select()的用法了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TIMEOUT 5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUF_LEN 1024</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><br>    fd_set readfds;<br>    <span class="hljs-keyword">int</span> ret;<br><br>    FD_ZERO(&amp;readfds);<br>    FD_SET(STDIN_FILENO, &amp;readfds);<br><br>    tv.tv_sec = TIMEOUT;<br>    tv.tv_usec = <span class="hljs-number">0</span>;<br><br>    ret = select (STDIN_FILENO+<span class="hljs-number">1</span>,<br>                    &amp;readfds,<br>                    <span class="hljs-literal">NULL</span>,<br>                    <span class="hljs-literal">NULL</span>,<br>                    &amp;tv);<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;select&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!ret)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%d seconds elapsed.\n&quot;</span>,TIMEOUT);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (FD_ISSET(STDIN_FILENO, &amp;readfds))<br>    &#123;<br>        <span class="hljs-keyword">char</span> buf[BUF_LEN+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> len;<br><br>        len = read (STDIN_FILENO, buf, BUF_LEN);<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">-1</span>)<br>        &#123;<br>            perror (<span class="hljs-string">&quot;read&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (len)<br>        &#123;<br>            buf[len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;read:%s\n&quot;</span>,buf);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;This should not happen!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="poll"><a href="#poll" class="headerlink" title="poll()"></a>poll()</h2><p>poll()解决了一些select()的不足，不过select()还是被频繁使用(出于习惯或可移植性的考虑)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;poll.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">poll</span> <span class="hljs-params">(struct pollfd *fds, <span class="hljs-keyword">nfds_t</span> nfds, <span class="hljs-keyword">int</span> timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>select()使用了基于文件描述符的三位掩码的解决方案，其效率不高；和它不同，poll()使用了由nfds个pollfd结构体构成的数组，fds指针指向该数组。pollfd结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;poll.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> fd;         <span class="hljs-comment">/* file descriptor */</span><br>    <span class="hljs-keyword">short</span> events;   <span class="hljs-comment">/* requested events to watch */</span><br>    <span class="hljs-keyword">short</span> revents;  <span class="hljs-comment">/*returned events witnessed */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>每个pollfd结构体指定一个被监视的文件描述符，可以给poll()传递多个pollfd结构体，使它能够监视多个文件描述符</p><h3 id="events和revents"><a href="#events和revents" class="headerlink" title="events和revents"></a>events和revents</h3><p>每个结构体的events变量是要监视的文件描述符的时间的位掩码，用户可以设置该变量。revents变量时该文件描述符的结果的事件的位掩码。以下是合法的events值：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><strong>POLLIN</strong></td><td>有数据可读</td></tr><tr><td><strong>POLLRDNORM</strong></td><td>有普通数据可读</td></tr><tr><td><strong>POLLRDBAND</strong></td><td>有优先数据可读</td></tr><tr><td><strong>POLLPRI</strong></td><td>有高优先数据可读</td></tr><tr><td><strong>POLLOUT</strong></td><td>写操作不会阻塞</td></tr><tr><td><strong>POLLWRNORM</strong></td><td>写普通数据不会阻塞</td></tr><tr><td><strong>POLLBAND</strong></td><td>写优先数据不会阻塞</td></tr><tr><td><strong>POLLMSG</strong></td><td>有SIGPOLL消息可用</td></tr></tbody></table><p>除了场面events的位掩码外，revents还会返回如下事件：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><strong>POLLER</strong></td><td>给定的文件描述符出现错误</td></tr><tr><td><strong>POLLHUP</strong></td><td>给定的文件描述符有挂起事件</td></tr><tr><td><strong>POLLNVAL</strong></td><td>给定的文件描述符非法</td></tr></tbody></table><p>例如，设置某个文件描述符是否可读写，需要把events设置成POLLIN | POLLOUT。返回时，会检查revents中是否有相应的标志位。如果设置了POLLIN，文件描述符可非阻塞读。如果设置了POLLOUT，文件描述符可非阻塞写</p><p>timeout 参数指定等待的时间长度，单位是毫秒，如果为负数，表示永远等待；如果为0，则立即返回，并给出所有I/O未就绪的文件描述符列表，不会等待更多事件</p><h3 id="返回值和错误码-1"><a href="#返回值和错误码-1" class="headerlink" title="返回值和错误码"></a>返回值和错误码</h3><p>poll()调用成功时，返回revents变量不为0的所有文件描述符个数；如果没有任何事件发生且未超时，返回0.失败时返回-1，并相应设置errno值如下：</p><p><strong>EBADF</strong>: 某个集合中存在非法文件描述符</p><p><strong>EFAULT</strong>: fds指针指向额地址超出了进程地址空间</p><p><strong>EINTR</strong>: 等待时捕获了一个信号，可以重新发起调用</p><p><strong>EINVAL</strong>: 参数n是负数，或设置超时时间值非法</p><p><strong>ENOMEM</strong>: 没有足够的内存来完成请求</p><h3 id="实列"><a href="#实列" class="headerlink" title="实列"></a>实列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;poll.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TIMEOUT 5</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span>[2];</span><br>    <span class="hljs-keyword">int</span> ret;<br><br>    fds[<span class="hljs-number">0</span>].fd = STDIN_FILENO;<br>    fds[<span class="hljs-number">0</span>].events = POLLIN;<br>    fds[<span class="hljs-number">1</span>].fd = STDOUT_FILENO;<br>    fds[<span class="hljs-number">1</span>].events = POLLOUT;<br><br>    ret = poll (fds, <span class="hljs-number">2</span>, TIMEOUT*<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror (<span class="hljs-string">&quot;poll&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!ret)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d seconds elapsed.\n&quot;</span>,TIMEOUT);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fds[<span class="hljs-number">0</span>].revents &amp; POLLIN)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;stdin is readable\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fds[<span class="hljs-number">1</span>].revents &amp; POLLOUT)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;stdout is writable\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后。结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">$</span><span class="bash"> ./a.out</span><br>stdout is writable<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ./a.out &lt;test.txt</span><br>stdin is readable<br>stdout is writable<br></code></pre></td></tr></table></figure><p>在实际应用中，不用每次调用时都重新构建pollfd结构体。该结构体可能会被重复传递多次，内核会在必要时把revents清空。</p><h2 id="poll-和select-的区别"><a href="#poll-和select-的区别" class="headerlink" title="poll()和select()的区别"></a>poll()和select()的区别</h2><p>虽然poll()和select()完成相同的工作，但poll()调用在很多方面仍然优于select()调用</p><ul><li>poll()不需要用户计算最大文件描述符值加1作为参数传递给它</li><li>poll()对于值很大的文件描述符，效率更高</li><li>select()的文件描述符集合是静态的，需要对大小设置进行权衡：如果值很小，会限制可监视的最大文件描述符值；如果很大，效率会很低</li><li>对于select()调用，返回时会重新创建文件描述符集，因此每次调用都必须重新初始化。poll()调用会把输入(events)和输出(revents)分离开，支持无需改变数组就可以重新使用</li><li>select()调用的timeout参数在返回时是未定义的，代码要支持可移植，需要重新初始化</li></ul><p>不过，select()调用也有些有点：</p><ul><li>select()可移植性更好，因为有些UNIX系统不支持poll()</li><li>select()提供了更高的超时精度：select()支持微秒级，poll()支持毫秒级</li></ul>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件I/O</title>
    <link href="/2021/02/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%96%87%E4%BB%B6I-O/"/>
    <url>/2021/02/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E6%96%87%E4%BB%B6I-O/</url>
    
    <content type="html"><![CDATA[<h1 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h1><p>人们常说Linux上一切皆文件，所以文件操作是Linux系统编程中重要的部分之一</p><p>文件的操作顺序一般为：打开(创建)、读/写、关闭文</p><h2 id="打开文件-open"><a href="#打开文件-open" class="headerlink" title="打开文件 open()"></a>打开文件 open()</h2><p>通过系统调用open()，可以打开文件并获取文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">open</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name, <span class="hljs-keyword">int</span> flags)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">open</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name, <span class="hljs-keyword">int</span> flags,<span class="hljs-keyword">mode_t</span> mode)</span></span>;<br></code></pre></td></tr></table></figure><p>如果调用成功则返回指向所打开文件的文件描述符，文件打开方式根据flags的值来确定</p><h3 id="flags参数"><a href="#flags参数" class="headerlink" title="flags参数"></a>flags参数</h3><p>flags 参数由一个或多个标志位的按位或组合。它支持三种访问模式：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>O_RDONLY</td><td>以只读方式打开</td></tr><tr><td>O_WRONLY</td><td>以只写方式打开</td></tr><tr><td>O_RDWR</td><td>以读写方式打开</td></tr></tbody></table><p>flgs 还可以和下面这些值进行按位或运算，修改打开文件的行为：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>O_APPEND</td><td>文件以追加模式打开。也就是说，每次写操作都从文件尾开始</td></tr><tr><td>O_CREAT</td><td>当文件不存在时，自动创建文件</td></tr><tr><td>O_DIRECT</td><td>打开文件用于直接I/O</td></tr><tr><td>O_CLOEXEC</td><td>在执行新的进程时，文件会自动关闭</td></tr><tr><td>O_DIRECTORY</td><td>如果name不是目录则调用失败(带此参数内部调用opendir())</td></tr><tr><td>O_NOATIME+</td><td>读文件时，不会更新文件的最后访问时间</td></tr><tr><td>O_NONBLOCK</td><td>文件以非阻塞模式打开</td></tr><tr><td>O_SYNC</td><td>打开文件用于同步I/O</td></tr><tr><td>O_TRUNC</td><td>如果文件存在，且为普通文件，并且有写权限，则文件会被截断为0</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> fd;<br><span class="hljs-comment">//以读写方式打开文件test，并将其截断为0</span><br>fd = open(<span class="hljs-string">&quot;test&quot;</span>, O_RDWR | O_TRUNC);<br></code></pre></td></tr></table></figure><h3 id="mode参数"><a href="#mode参数" class="headerlink" title="mode参数"></a>mode参数</h3><p>mode 参数只有在创建文件时才有意义，及给定O_CREAT参数时一定要添加mode参数，如果没有提供，结果则是未定义的</p><p>mode 参数通常是UNIX权位集合，比如八进制数0644，0777等</p><h2 id="读文件-read"><a href="#读文件-read" class="headerlink" title="读文件 read()"></a>读文件 read()</h2><p>最常见的读取文件时调用read(),定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">read</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">void</span> *buf, <span class="hljs-keyword">size_t</span> len)</span></span>;<br></code></pre></td></tr></table></figure><p>每次调用read()函数，会从fd指向的文件的当前偏移开始读取len字节到buf中，成功返回读取的字节数，失败返回-1，并设置errno,下面是一个简单的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">char</span> buf[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br><br>ret = read (fd, buf, <span class="hljs-keyword">sizeof</span>(buf));<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>&#123;<br>    <span class="hljs-comment">/*error*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个实现存在两个经常被人忽略的问题，以至于有很多人这么使用read()</p><ol><li>可能还没读取len字节，调用就返回了</li><li>可能产生某些可操作的错误，但是没有检查</li></ol><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>使用read()时，还需考虑返回值为0的情况。当到达文件末尾时，read()返回0，在这种情况下，没有读到任何字节。EOF并不表示出错，它仅仅表示文件位置已经到达文件结尾，因此没有数据可读了</p><p>但是，如果调用要读取len个字节，但是没有一个字节刻度，调用就会阻塞</p><p>实际上，调用read()有很多可能的结果：</p><ul><li>调用返回值等于len。结果和预期一致</li><li>调用返回值小于len，大于0。可读字节大于0小于len，在读取len之前到达EOF或是信号中断或读取出错</li><li>没有可读数据，调用阻塞</li><li>调用返回EOF没有更多可读数据</li><li>调用返回-1，errno设为EINTR。表示在读取任何字节前收到阻塞信号，调用可以重新执行</li><li>调用返回-1，errno设为EAGAIN。当前没有数据可用，读操作会阻塞（非阻塞模式才会发生）</li><li>调用返回-1，errno为EINTR和EAGAIN之外的值，这表示更严重的错误</li></ul><p>根据上面的返回值可以优化read()调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> ret;<br><br><span class="hljs-keyword">while</span> (len != <span class="hljs-number">0</span> &amp;&amp; ret = read (fd, buf, len) != <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (errno == EINTR)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <br>        perror (<span class="hljs-string">&quot;read&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    len -= ret;<br>    buf += ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写文件-write"><a href="#写文件-write" class="headerlink" title="写文件 write()"></a>写文件 write()</h2><p>最基础常见的系统调用时write()，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *buf, <span class="hljs-keyword">size_t</span> count)</span></span>;<br></code></pre></td></tr></table></figure><p>write()调用会从文件描述符fd指向的文件的当前位置开始。将buf中至多count个字节写入文件中。不支持seek的文件总是从起始位置开始写</p><p>write()执行成功时，会返回写入的字节数并更新文件位置，出错时返回-1，并设置errno值，下面是简单实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *buf = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-keyword">ssize_t</span> ret;<br><br>ret = write (fd, buf, <span class="hljs-built_in">strlen</span> (buf));<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>&#123;<br>    <span class="hljs-comment">/* error */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="追加模式"><a href="#追加模式" class="headerlink" title="追加模式"></a>追加模式</h3><p>当以追加模式(参数设置O_APPEND)打开文件描述符时，写操作则是从文件尾开始的</p><p>多个进程写同一文件时此模式能保证数据不会被覆盖而造成数据丢失，追加模式可以理解成每次写请求之前都会更新文件位置，指向写入的数据末尾，这和write()无关，因为更新位置是自动完成的</p><h2 id="关闭文件-close"><a href="#关闭文件-close" class="headerlink" title="关闭文件 close()"></a>关闭文件 close()</h2><p>当完成对某个文件的操作后，可以通过系统调用close()取消文件描述符到对应文件的映射：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">close</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> fd)</span></span>;<br></code></pre></td></tr></table></figure><p>调用后，先前给定的文件描述符fd将不再有效，它的用法也很简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (close (fd) == <span class="hljs-number">-1</span>)<br>&#123;<br>    perror (<span class="hljs-string">&quot;close&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux系统编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zip命令</title>
    <link href="/2021/01/20/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/zip%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/01/20/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/zip%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux命令-zip"><a href="#Linux命令-zip" class="headerlink" title="Linux命令-zip"></a>Linux命令-zip</h1><p>zip是常用的一种压缩方式，在Linux系统上也支持</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>压缩：zip [参数] &lt;压缩包&gt; &lt;源文件&gt;</p><p>解压：unzip [参数] &lt;压缩文件&gt; [压缩包中将被释放的文件]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">zip -rP 123456 test.zip <span class="hljs-built_in">test</span></span><br><span class="hljs-meta">$</span><span class="bash">unzip -P 123456 test.zip</span><br></code></pre></td></tr></table></figure><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ul><li><p>-r 递归，将指定目录下的所有文件和子目录一并处理</p></li><li><p>-S 包含系统和隐藏文件</p></li><li><p>-y 直接保存符号连接，而非该连接所指向的文件</p></li><li><p>-X 不保存额外的文件属性</p></li><li><p>-m 将文件压缩并加入压缩文件后，删除源文件</p></li><li><p>-&lt;压缩级别&gt; 1~9，数字越大，压缩率越高</p></li><li><p>-F 尝试修复已损坏的压缩文件</p></li><li><p>-T 检查备份文件内的每个文件是否正确无误</p></li><li><p>-q 不显示指令执行过程</p></li><li><p>-g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件</p></li><li><p>-u 更新压缩包内文件</p></li><li><p>-f 更新压缩包内文件。如果符合条件的文件没有包含在压缩包中，则压缩后添加</p></li><li><p>-$ 保存第一个被压缩文件所在磁盘的卷标</p></li><li><p>-j 只保存文件名称及其内容</p></li><li><p>-D 压缩文件内不建立目录名称</p></li><li><p>-i &lt;表达式&gt; 压缩目录时，只压缩符合条件的文件</p></li><li><p>-x &lt;表达式&gt; 排除符合条件的文件</p></li><li><p>-n &lt;文件名后缀&gt; 排除指定文件名后缀的文件</p></li><li><p>-b &lt;缓存路径&gt; 指定临时文件目录</p></li><li><p>-d &lt;表达式&gt; 从压缩文件内删除指定的文件</p></li><li><p>-t &lt;日期时间&gt; 把压缩文件的日期设成指定的日期</p></li><li><p>-o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同</p></li><li><p>-A 调整可执行的自动解压缩文件</p></li><li><p>-c 替每个被压缩的文件加上注释</p></li><li><p>-z 替压缩文件加上注释</p></li><li><p>-k 使用MS-DOS兼容格式的文件名称。</p></li><li><p>-l 压缩文件时，把LF字符置换成LF+CR字符。</p></li><li><p>-ll 压缩文件时，把LF+CR字符置换成LF字符。</p></li></ul><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><ul><li><p>-P &lt;密码&gt; zip压缩包的密码</p></li><li><p>-d &lt;路径&gt; 指定解压路径</p></li><li><p>-n 解压缩时不覆盖原有文件</p></li><li><p>-f 覆盖原有文件</p></li><li><p>-o 不经询问，直接覆盖原有文件</p></li><li><p>-u 覆盖原有文件，并将压缩文件中的其他文件解压缩到目录中</p></li><li><p>-l 显示压缩文件内所包含的文件</p></li><li><p>-t 检查压缩文件是否正确理里排除压缩包中的指定文</p></li><li><p>-z 显示压缩包注释</p></li><li><p>-Z unzip -Z等于执行zipinfo指令</p></li><li><p>-j 不处理压缩文件中原有的目录路径</p></li><li><p>-C 压缩文件中的文件名称区分大小写</p></li><li><p>-L 将压缩文件中的全部文件名改为小写</p></li><li><p>-s 将文件名中的空格转换下划线</p></li><li><p>-X 解压缩时保留文件原来的UID/GID</p></li><li><p>-q 执行时不显示任何信息</p></li><li><p>-v 执行是时显示详细的信息</p></li><li><p>-c 将解压缩的结果显示到屏幕上，并对字符做适当的转换</p></li><li><p>-p 与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换</p></li><li><p>-a 对文本文件进行必要的字符转换</p></li><li><p>-b 不要对文本文件进行字符转换</p></li><li><p>-x &lt;表达式&gt; 处理里排除压缩包中的指定文件</p></li><li><p>-M 将输出结果送到more程序处理</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux常用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux常用工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FOTA升级包签名</title>
    <link href="/2021/01/20/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/FOTA%E5%8D%87%E7%BA%A7%E5%8C%85%E7%AD%BE%E5%90%8D/"/>
    <url>/2021/01/20/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/FOTA%E5%8D%87%E7%BA%A7%E5%8C%85%E7%AD%BE%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="带加密与签名的FOTA升级包"><a href="#带加密与签名的FOTA升级包" class="headerlink" title="带加密与签名的FOTA升级包"></a>带加密与签名的FOTA升级包</h1><h2 id="信息摘要和数字签名"><a href="#信息摘要和数字签名" class="headerlink" title="信息摘要和数字签名"></a>信息摘要和数字签名</h2><p>信息摘要：对数据进行处理，得到一段固定长度的结果，其特点输入：</p><ol><li><p>输出长度固定。即输出长度和输入长度无关</p></li><li><p>不可逆。即由输出数据理论上不能推导出输入数据</p></li><li><p>对输入数据敏感。当输入数据变化极小时，输出数据也会发生明显的变化</p></li><li><p>防碰撞。即不同的数据数据得到相同输出数据的可能性极低</p></li></ol><p>由于信息摘要有上述特点，一般保证数据的完整性，对一个大文件进行摘要运算，得到其摘要值。通过网络或者其他渠道传输后，通过验证其摘要值，确定大文件本身有没有发生变化</p><p>数字签名：数字签名其实分成两步，首先对原始文件进行摘要运算，得到摘要值，然后使用公开密钥算法中的私钥对摘要值进行加密。其签名和验证过程如下图所示</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/jiami.q4g1faw5uk0.jpg" alt="jiami"></p><h2 id="密钥获取"><a href="#密钥获取" class="headerlink" title="密钥获取"></a>密钥获取</h2><h3 id="使用openssl生成密钥"><a href="#使用openssl生成密钥" class="headerlink" title="使用openssl生成密钥"></a>使用openssl生成密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">openssl genrsa -out test.key 1024</span><br></code></pre></td></tr></table></figure><p>这里-out指定生成文件的。需要注意的是这个文件包含了公钥和密钥两部分，也就是说这个文件即可用来加密也可以用来解密。后面的1024是生成密钥的长度</p><h3 id="使用密钥生成公钥"><a href="#使用密钥生成公钥" class="headerlink" title="使用密钥生成公钥"></a>使用密钥生成公钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">openssl rsa -<span class="hljs-keyword">in</span> test.key -pubout -out test_pub.key</span><br></code></pre></td></tr></table></figure><p>-in指定输入文件，-out指定提取生成公钥的文件名。至此，我们手上就有了一个公钥，一个私钥（包含公钥）</p><h2 id="签名生成与验证"><a href="#签名生成与验证" class="headerlink" title="签名生成与验证"></a>签名生成与验证</h2><h3 id="使用私钥生成签名"><a href="#使用私钥生成签名" class="headerlink" title="使用私钥生成签名"></a>使用私钥生成签名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">openssl dgst -sha256 -sign test.key -out test.sha256 update_test.img</span><br></code></pre></td></tr></table></figure><p>摘要为sha256格式，输出签名为test.sha256</p><h3 id="使用公钥验证签名"><a href="#使用公钥验证签名" class="headerlink" title="使用公钥验证签名"></a>使用公钥验证签名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">openssl dgst -sha256 -verify test_pub.key -signature test.sha256 update_test.img</span><br></code></pre></td></tr></table></figure><h2 id="制作FOTA升级包"><a href="#制作FOTA升级包" class="headerlink" title="制作FOTA升级包"></a>制作FOTA升级包</h2><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>将签名与升级镜像使用zip压缩，并使用自带的加密方式进行加密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">zip -r -P 123456 update_test.zip  update_test.img</span><br><span class="hljs-meta">$</span><span class="bash">zip -r update_test.zip --password 123456 test.sha256 test.sha256</span><br></code></pre></td></tr></table></figure><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>直接使用unzip解密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">unzip -P 123456 update_test.zip</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-二叉树</title>
    <link href="/2021/01/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2021/01/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是n（n &gt;= 0）个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两颗互不相交的、分别称为根结点的左子树和右子树的二叉树组成</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E4%BA%8C%E5%8F%89%E6%A0%91.jgl51ljilxk.png" alt="erchashu"></p><h2 id="二叉树的特点"><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h2><ol><li><p>每个结点最多有两颗子树，所以二叉树不存在度大于2的结点</p></li><li><p>左子树和右子树是有顺序的，次序不能颠倒</p></li><li><p>即使树中某结点只有一颗子树，也要区分它是左子树还是右子树</p></li></ol><h2 id="二叉树的数据结构"><a href="#二叉树的数据结构" class="headerlink" title="二叉树的数据结构"></a>二叉树的数据结构</h2><p>由于二叉树最多有两个孩子，所以我们可以创建拥有一个数据域和两个指针域的结构体，由这些结构体构成的链表也叫二叉链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">rchild</span>;</span><br>&#125;BitNode, *BiTree;<br></code></pre></td></tr></table></figure><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>若二叉树为空，则返回，否则先访问根结点，然后前序遍历左子树，再遍历右子树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrederTraverse</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>    PreOrederTraverse(T-&gt;lchild);<br>    PreOrederTraverse(T-&gt;rchild);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>若二叉树为空，则返回，否则按照左子树，根结点，右子树的顺序遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrederTraverse</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    InOrederTraverse(T-&gt;lchild);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>    InOrederTraverse(T-&gt;rchild);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>若二叉树为空，则返回，否则按照左子树，右子树，根结点的顺序遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrederTraverse</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    PostOrederTraverse(T-&gt;lchild);<br>    PostOrederTraverse(T-&gt;rchild);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建二叉树"><a href="#创建二叉树" class="headerlink" title="创建二叉树"></a>创建二叉树</h2><p>以#代表空结点,使用前序创建二叉树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreCreateBiTree</span><span class="hljs-params">(BiTree *T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;ch);<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>    &#123;<br>        *T = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        *T = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>        <span class="hljs-keyword">if</span> (!*T)<br>        &#123;<br>            <span class="hljs-built_in">exit</span>();<br>        &#125;<br>        (*T)-&gt;data = ch;<br>        PreCreateBiTree(&amp;(*T)-&gt;lchild);<br>        PreCreateBiTree(&amp;(*T)-&gt;rchild);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只实现了前序创建，中序和后序创建有点问题，目前不知道哪里出现了错误</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-树</title>
    <link href="/2021/01/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
    <url>/2021/01/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>顺序表、单链表和双链表是一种一对一的线性结构，树则是一对多的数据结构。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>树（Tree）是n(n &gt;= 0)个结点的有限集。n = 0时称为空树。在任意一颗非空树中：</p><ol><li><p>有且仅有一个特定的称为根的结点</p></li><li><p>当n &gt; 1时，其余结点可分为m(m &gt; 0)个互不相交的有限集T1、T2、······、Tm，其中每一个集合本身又是一颗树，并且称为根的子树</p></li></ol><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E6%A0%91.166bwotg0t1c.png" alt="shu"></p><h2 id="结点分类"><a href="#结点分类" class="headerlink" title="结点分类"></a>结点分类</h2><p>树的结点包括一个数据元素以及若干个指向其子树的分支。结点拥有的子树的数量称为结点的度。</p><p>度为0的结点称为叶结点或终端结点，度不为0的结点称为非终端结点或分支结点。</p><p>除根结点外，分支结点也称为内部结点</p><p>树的度是树内各结点的度的最大值，如上图，树的度为B结点的度为3</p><h2 id="结点间关系"><a href="#结点间关系" class="headerlink" title="结点间关系"></a>结点间关系</h2><p>结点的子树的根称为该结点的孩子，相应的该结点称为孩子的双亲</p><p>同一个双亲的孩子之间互称为兄弟。</p><p>结点的祖先是从根到该结点所经分支上的所有结点</p><p>以某结点为根的子树中的任一结点都称为该结点的子孙</p><h2 id="结点的层次"><a href="#结点的层次" class="headerlink" title="结点的层次"></a>结点的层次</h2><p>结点的层次从根开始定义起，根为第一层，根的孩子为第二层以此类推</p><p>双亲在同一层的结点互为堂兄弟</p><p>树中结点的最大层次称为树的深度或高度，上图树的深度为5</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令-grep</title>
    <link href="/2020/12/16/Linux%E5%91%BD%E4%BB%A4/Linux%E5%91%BD%E4%BB%A4-grep/"/>
    <url>/2020/12/16/Linux%E5%91%BD%E4%BB%A4/Linux%E5%91%BD%E4%BB%A4-grep/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux命令—grep"><a href="#Linux命令—grep" class="headerlink" title="Linux命令—grep"></a>Linux命令—grep</h1><p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据</p><h2 id="grep格式"><a href="#grep格式" class="headerlink" title="grep格式"></a>grep格式</h2><p>语法格式：grep 【options】【pattern】【file】</p><p>grep [参数] [匹配模式] [查找的文件]</p><h2 id="grep常用参数"><a href="#grep常用参数" class="headerlink" title="grep常用参数"></a>grep常用参数</h2><ul><li><p>-a 或 –text : 不要忽略二进制的数据</p></li><li><p>-c 或 –count : 计算符合样式的行数。</p></li><li><p>-i 或 –ignore-case : 忽略字符大小写的差别。</p></li><li><p>-d &lt;动作&gt; 或 –directories=&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</p></li><li><p>-r 或 –recursive : 此参数的效果和指定”-d recurse”参数相同。</p></li><li><p>-w 或 –word-regexp : 只显示全字符合的列。</p></li><li><p>-n 或 –line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。</p></li><li><p>-s 或 –no-messages : 不显示错误信息。</p></li><li><p>-v : 反向选择，亦即显示出没有 ‘搜寻字符串’内容的那一行</p></li><li><p>–include : 在什么文件中搜索（在.bb文件中搜索 –include=*.bb）</p></li><li><p>–color=auto : 搜索关键词显示颜色</p></li></ul><h2 id="grep简单使用"><a href="#grep简单使用" class="headerlink" title="grep简单使用"></a>grep简单使用</h2><h3 id="在当前文件夹及子文件夹搜索"><a href="#在当前文件夹及子文件夹搜索" class="headerlink" title="在当前文件夹及子文件夹搜索"></a>在当前文件夹及子文件夹搜索</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep -rwn <span class="hljs-string">&#x27;carl&#x27;</span><br>test.txt:2:hello carl!<br>test.txt:4:Hi carl!<br></code></pre></td></tr></table></figure><h3 id="限定文件类型查找"><a href="#限定文件类型查找" class="headerlink" title="限定文件类型查找"></a>限定文件类型查找</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep -rwn <span class="hljs-string">&#x27;hello&#x27;</span> --include=*.txt<br>hi.txt:1:hello world !<br>test.txt:1:hello world!<br>test.txt:2:hello carl!<br>test.txt:3:hello jack!<br></code></pre></td></tr></table></figure><h3 id="查找的数据由管道传入"><a href="#查找的数据由管道传入" class="headerlink" title="查找的数据由管道传入"></a>查找的数据由管道传入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ifconfig eth1 |grep inet -w<br>          inet addr:10.8.3.119  Bcast:10.8.3.127  Mask:255.255.255.128<br></code></pre></td></tr></table></figure><h3 id="两个条件都包含的查找"><a href="#两个条件都包含的查找" class="headerlink" title="两个条件都包含的查找"></a>两个条件都包含的查找</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep carl test.txt | grep hello<br>hello carl!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令-awk</title>
    <link href="/2020/12/16/Linux%E5%91%BD%E4%BB%A4/Linux%E5%91%BD%E4%BB%A4-awk/"/>
    <url>/2020/12/16/Linux%E5%91%BD%E4%BB%A4/Linux%E5%91%BD%E4%BB%A4-awk/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux命令—awk"><a href="#Linux命令—awk" class="headerlink" title="Linux命令—awk"></a>Linux命令—awk</h1><blockquote><p>awk不仅仅时linux系统中的一个命令，而且是一种编程语言，可以用来处理数据和生成报告（excel）。处理的数据可以是一个或多个文件，可以是来自标准输入，也可以通过管道获取标准输入，awk可以在命令行上直接编辑命令进行操作，也可以编写成awk程序来进行更为复杂的运用。</p></blockquote><p>本章主要讲解awk命令的运用</p><h2 id="awk格式"><a href="#awk格式" class="headerlink" title="awk格式"></a>awk格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk [option] <span class="hljs-string">&#x27;PATTERN&#123;ACTION STATEMENTS&#125;&#x27;</span> FILE<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/awk.1leod5jhbvfk.png" alt="awk"></p><ul><li>awk指令是由模式，动作，或者模式和动作的组合组成。</li><li>模式既pattern,可以类似理解成sed的模式匹配，可以由表达式组成，也可以是两个正斜杠之间的正则表达式。比如NR==1，这就是模式，可以把他理解为一个条件。</li><li>动作即action，是由在大括号里面的一条或多条语句组成，语句之间使用分号隔开。比如awk使用格式：</li><li>pattern既模式，也可以理解为条件，也叫找谁，你找谁？高矮，胖瘦，男女？都是条件，既模式。</li><li>action既动作，可以理解为干啥，找到人之后你要做什么。<br>模式和动作的详细介绍我们放在后面部分，现在大家先对awk结构有一个了解。</li></ul><h2 id="常用内建变量（可以直接使用的变量）"><a href="#常用内建变量（可以直接使用的变量）" class="headerlink" title="常用内建变量（可以直接使用的变量）"></a>常用内建变量（可以直接使用的变量）</h2><ul><li>$0：完整的输入记录</li><li>$n：当前记录的第n个字段，字段间由FS分隔</li><li>FS：input field seperator：输入字段分隔符，默认空白字符。也可使用-v指定。</li><li>OFS：输出字段分隔符。使用-v指定。</li><li>RS：输入时的换行符</li><li>ORS：输出时的换行符</li><li>NF：number of field 每一行的字段数量。加上$NF表示最后一列。</li><li>NR：number of record 文件的行数，打印出来是打印行号</li><li>FILENAME：当前文件的文件名</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>print<br>输出格式：print item1,item2 …<br>备注：使用逗号作为分隔符；输出item可以是字符串、內建变量、awk表达式；若省略item，则显示$0整行；</p></li><li><p>printf<br>格式化输出：printf FORMAT, item1, item2…按位放在format中。<br>注意事项：format必须要给出；如需换行，必须要显示写出；format中需要为后面每个item指定格式符；</p></li><li><p>F<br>指定输入文件折分隔符</p></li></ul><hr><h2 id="awk的简单使用"><a href="#awk的简单使用" class="headerlink" title="awk的简单使用"></a>awk的简单使用</h2><p>待处理文件为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat test.txt<br>hello world!<br>hello carl!<br>hello jack!<br>Hi carl!<br></code></pre></td></tr></table></figure><h3 id="输出文件全部内容"><a href="#输出文件全部内容" class="headerlink" title="输出文件全部内容"></a>输出文件全部内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123;print $0&#125;&#x27;</span> test.txt<br>hello world!<br>hello carl!<br>hello jack!<br>Hi carl!<br></code></pre></td></tr></table></figure><h3 id="输出第一列内容"><a href="#输出第一列内容" class="headerlink" title="输出第一列内容"></a>输出第一列内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> test.txt<br>hello<br>hello<br>hello<br>Hi<br></code></pre></td></tr></table></figure><h3 id="输出第2行到第4行的内容"><a href="#输出第2行到第4行的内容" class="headerlink" title="输出第2行到第4行的内容"></a>输出第2行到第4行的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;NR&gt;2&amp;&amp;NR&lt;4 &#123;print $0&#125;&#x27;</span> test.txt<br>hello jack!<br></code></pre></td></tr></table></figure><h3 id="以o为分隔符输出第一列和第二列内容"><a href="#以o为分隔符输出第一列和第二列内容" class="headerlink" title="以o为分隔符输出第一列和第二列内容"></a>以o为分隔符输出第一列和第二列内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk -Fo &#x27;&#123;print $1,$2&#125;&#x27; test.txt<br>hell  w<br>hell  carl!<br>hell  jack!<br>Hi carl!<br></code></pre></td></tr></table></figure><hr><h2 id="awk进阶使用"><a href="#awk进阶使用" class="headerlink" title="awk进阶使用"></a>awk进阶使用</h2><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">seq 9 | sed <span class="hljs-string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;&#123;for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\n&quot;:&quot;\t&quot;)&#125;&#x27;</span><br>1x1=1<br>1x2=2   2x2=4<br>1x3=3   2x3=6   3x3=9<br>1x4=4   2x4=8   3x4=12  4x4=16<br>1x5=5   2x5=10  3x5=15  4x5=20  5x5=25<br>1x6=6   2x6=12  3x6=18  4x6=24  5x6=30  6x6=36<br>1x7=7   2x7=14  3x7=21  4x7=28  5x7=35  6x7=42  7x7=49<br>1x8=8   2x8=16  3x8=24  4x8=32  5x8=40  6x8=48  7x8=56  8x8=64<br>1x9=9   2x9=18  3x9=27  4x9=36  5x9=45  6x9=54  7x9=63  8x9=72  9x9=81<br></code></pre></td></tr></table></figure><h3 id="获取eth1网口ipV4地址"><a href="#获取eth1网口ipV4地址" class="headerlink" title="获取eth1网口ipV4地址"></a>获取eth1网口ipV4地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig eth1|grep <span class="hljs-string">&#x27;inet addr&#x27;</span> | awk -F <span class="hljs-string">&#x27;[: ]+&#x27;</span>  <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span><br>192.168.1.1<br></code></pre></td></tr></table></figure><ul><li>‘+’代表多个连续的分隔符当做一个分隔符</li></ul><h3 id="计算文件大小"><a href="#计算文件大小" class="headerlink" title="计算文件大小"></a>计算文件大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls -l *.txt | awk <span class="hljs-string">&#x27;&#123;sum+=$5&#125; END &#123;print sum&#125;&#x27;</span><br>46<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法（2）</title>
    <link href="/2020/12/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%882%EF%BC%89/"/>
    <url>/2020/12/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法（2）"><a href="#排序算法（2）" class="headerlink" title="排序算法（2）"></a>排序算法（2）</h1><p>本此介绍十大经典排序算法的后五个：</p><ul><li>快速排序</li><li>堆排序</li><li>计数排序</li><li>桶排序</li><li>基数排序</li></ul><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%BF%AB%E9%80%9F.5sau5cou0m80.gif" alt="kuaisu"></p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>比较相邻元素的大小如果第一个小于第二个就交换他们的位置</li><li>循环比较每一对，最后一个元素会是最小的元素</li><li>重复上面的操作，除了最后一个，因为最后一个已经确定</li><li>继续重复比较直到全部比较完成，或某次比较没有任何元素交换</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> key = <span class="hljs-built_in">list</span>[low];<br>    <span class="hljs-keyword">int</span> i = low;<br>    <span class="hljs-keyword">int</span> j = high;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">if</span> (low &gt;= high)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (low &lt; high)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; key &gt;= <span class="hljs-built_in">list</span>[high])<br>        &#123;<br>            --high;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[high] &gt; key)<br>        &#123;<br>            <span class="hljs-built_in">list</span>[low] = <span class="hljs-built_in">list</span>[high];<br>            ++low;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; key &lt;= <span class="hljs-built_in">list</span>[low])<br>        &#123;<br>            ++low; <span class="hljs-comment">//向后寻找</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (key &gt; <span class="hljs-built_in">list</span>[low])<br>        &#123;<br>            <span class="hljs-built_in">list</span>[high] = <span class="hljs-built_in">list</span>[low]; <span class="hljs-comment">//直接赋值, 不用交换</span><br>            --high;<br>        &#125;<br>        <span class="hljs-built_in">list</span>[low] = key;<br>        quick_sort(<span class="hljs-built_in">list</span>, i, low<span class="hljs-number">-1</span>);<br>        quick_sort(<span class="hljs-built_in">list</span>, low+<span class="hljs-number">1</span>, j);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><blockquote><p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/dui.5xkoc6ez6fc0.gif" alt="dui"></p><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>构造一个堆</li><li>取出根节点，并将最后一个叶子节点放到根节点的位置</li><li>重新将二叉树构造成堆</li><li>重复上述操作，直到排序完成</li></ol><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">adjust_heap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> head, <span class="hljs-keyword">int</span> l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[head] &gt; <span class="hljs-built_in">list</span>[head * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &amp;&amp; head * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt; l)<br>    &#123;<br>        tmp = <span class="hljs-built_in">list</span>[head];<br>        <span class="hljs-built_in">list</span>[head] = <span class="hljs-built_in">list</span>[head * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">list</span>[head * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = tmp;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[head] &gt; <span class="hljs-built_in">list</span>[head * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] &amp;&amp; head * <span class="hljs-number">2</span> + <span class="hljs-number">2</span> &lt; l)<br>    &#123;<br>        tmp = <span class="hljs-built_in">list</span>[head];<br>        <span class="hljs-built_in">list</span>[head] = <span class="hljs-built_in">list</span>[head * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">list</span>[head * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] = tmp;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, temp;<br>    <span class="hljs-keyword">if</span> ( len &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = (len - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        adjust_heap(<span class="hljs-built_in">list</span>, i, len);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i = len - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        temp=<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>]=<span class="hljs-built_in">list</span>[i];<br>        <span class="hljs-built_in">list</span>[i]=temp;<br>    &#125;<br><br>    heap_sort(<span class="hljs-built_in">list</span>,len<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E8%AE%A1%E6%95%B0.45wxckim3qs0.gif" alt="jishu"></p><h2 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>扫描数组获得最大值max和最小值min</li><li>开辟空间（数组）A，大小为：max-min+1</li><li>新的数组A记录的是对应元素的元素个数</li><li>遍历新的数组A输出对应元素及其个数<blockquote><p>即我们要排列的数组为{3,5,5,2,8},则新数组A为A[7] = {1,1,0,2,0,0,1}。代表有1个2,1个3,0个4,2个5,0个6,0个7,1个8</p></blockquote></li></ol><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">count_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j = len<span class="hljs-number">-1</span>, max = <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>], min = <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[i] &gt; max)<br>        &#123;<br>            max = <span class="hljs-built_in">list</span>[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[i] &lt; min)<br>        &#123;<br>            min = <span class="hljs-built_in">list</span>[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> tmplen = max - min + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> tmp[tmplen];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; tmplen; i++)<br>    &#123;<br>        tmp[i] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        tmp[<span class="hljs-built_in">list</span>[i] - min]++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; tmplen; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (; tmp[i] &gt; <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>; )<br>        &#123;<br>            <span class="hljs-built_in">list</span>[j] = min + i;<br>            j--;<br>            tmp[i]--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/tong.f3fsim7f69s.gif" alt="tong"></p><h2 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>桶排序基于计数排序</p><ol><li>找到最大值和最小值，将数组按区间分为n个桶</li><li>将符合区间的数放入桶中</li><li>在放入桶中的同时就按顺序排好（插入到桶中合适的位置）</li><li>全部元素放入桶中后将各个桶的元素拼接起来</li></ol><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><p>此代码按照个人理解使用单链表实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bucketlist</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> key;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bucketlist</span>* <span class="hljs-title">next</span>;</span><br>&#125;BUCKET;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">free_node</span><span class="hljs-params">(BUCKET *node)</span></span><br><span class="hljs-function"></span>&#123;<br>    BUCKET *tmp;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (node-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        tmp = node;<br>        tmp = tmp-&gt;next;<br>        node-&gt;next = tmp-&gt;next;<br>        <span class="hljs-built_in">free</span>(tmp);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(node);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">instertion</span><span class="hljs-params">(BUCKET *bucket, <span class="hljs-keyword">int</span> number)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    BUCKET *temp = bucket;<br>    <span class="hljs-keyword">if</span> (bucket == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (;;)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (temp-&gt;next == <span class="hljs-literal">NULL</span> ||temp-&gt;next-&gt;key &lt; number)<br>        &#123;<br>            BUCKET *node  = (BUCKET*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BUCKET));<br>            node-&gt;next = temp-&gt;next;<br>            node-&gt;key = number;<br>            temp-&gt;next = node;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            temp = temp-&gt;next;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bucket_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, max = <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>], min = <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[i] &gt; max)<br>        &#123;<br>            max = <span class="hljs-built_in">list</span>[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[i] &lt; min)<br>        &#123;<br>            min = <span class="hljs-built_in">list</span>[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> tmplen = (max - min) / <span class="hljs-number">3</span>;<br>    BUCKET *buket1  = (BUCKET*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BUCKET));<br>    buket1-&gt;next = <span class="hljs-literal">NULL</span>;<br>    BUCKET *buket2  = (BUCKET*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BUCKET));<br>    buket2-&gt;next = <span class="hljs-literal">NULL</span>;<br>    BUCKET *buket3  = (BUCKET*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BUCKET));<br>    buket3-&gt;next = <span class="hljs-literal">NULL</span>;<br>    BUCKET *tmp;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[i] &lt;= min + tmplen)<br>        &#123;<br>            instertion(buket1,<span class="hljs-built_in">list</span>[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[i]&gt; min + tmplen &amp;&amp; <span class="hljs-built_in">list</span>[i] &lt;= min + (<span class="hljs-number">2</span> * tmplen))<br>        &#123;<br>            instertion(buket2,<span class="hljs-built_in">list</span>[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            instertion(buket3,<span class="hljs-built_in">list</span>[i]);<br>        &#125;<br>    &#125;<br>    tmp = buket3-&gt;next;<br>    <span class="hljs-keyword">while</span> (tmp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">list</span>[j] = tmp-&gt;key;<br>        tmp = tmp-&gt;next;<br>        j++;<br>    &#125;<br>    tmp = buket2-&gt;next;<br>    <span class="hljs-keyword">while</span> (tmp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">list</span>[j] = tmp-&gt;key;<br>        tmp = tmp-&gt;next;<br>        j++;<br>    &#125;<br>    tmp = buket1-&gt;next;<br>    <span class="hljs-keyword">while</span> (tmp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">list</span>[j] = tmp-&gt;key;<br>        tmp = tmp-&gt;next;<br>        j++;<br>    &#125;<br><br>    free_node(buket3);<br>    free_node(buket2);<br>    free_node(buket1);<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%9F%BA%E6%95%B0.6m33z61nfyc0.gif" alt="jishu"></p><h2 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零</li><li>从最低位开始，依次进行一次排序</li><li>从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列</li></ol><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><p>此实现使用之前的<a href="/2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/">数据结构-队列</a>为基础,使用了其中的方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">radix_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    LINKLIST *<span class="hljs-built_in">queue</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">queue</span>[i] = init_list();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        push(<span class="hljs-built_in">queue</span>[<span class="hljs-built_in">list</span>[i] % <span class="hljs-number">10</span>],<span class="hljs-built_in">list</span>[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (!is_empty(<span class="hljs-built_in">queue</span>[i]))<br>        &#123;<br>            <span class="hljs-built_in">list</span>[j] = pop(<span class="hljs-built_in">queue</span>[i]);<br>            j++;<br>        &#125;<br>    &#125;<br>    j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        push(<span class="hljs-built_in">queue</span>[<span class="hljs-built_in">list</span>[i]/<span class="hljs-number">10</span> % <span class="hljs-number">10</span>],<span class="hljs-built_in">list</span>[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (!is_empty(<span class="hljs-built_in">queue</span>[i]))<br>        &#123;<br>            <span class="hljs-built_in">list</span>[j] = pop(<span class="hljs-built_in">queue</span>[i]);<br>            j++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法（1）</title>
    <link href="/2020/12/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%881%EF%BC%89/"/>
    <url>/2020/12/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法（1）"><a href="#排序算法（1）" class="headerlink" title="排序算法（1）"></a>排序算法（1）</h1><p>本此介绍十大经典排序算法的前五个：</p><ul><li>冒泡排序</li><li>选择排序</li><li>插入排序</li><li>希尔排序</li><li>归并排序</li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%86%92%E6%B3%A1.1m7tligztan4.gif" alt="maopao"></p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>比较相邻元素的大小如果第一个小于第二个就交换他们的位置</li><li>循环比较每一对，最后一个元素会是最小的元素</li><li>重复上面的操作，除了最后一个，因为最后一个已经确定</li><li>继续重复比较直到全部比较完成，或某次比较没有任何元素交换</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j,temp,flag;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        flag = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[j] &lt; <span class="hljs-built_in">list</span>[j+<span class="hljs-number">1</span>] )<br>            &#123;<br>                temp = <span class="hljs-built_in">list</span>[j+<span class="hljs-number">1</span>];<br>                <span class="hljs-built_in">list</span>[j+<span class="hljs-number">1</span>] = <span class="hljs-built_in">list</span>[j];<br>                <span class="hljs-built_in">list</span>[j] = temp;<br>                flag = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (flag)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E9%80%89%E6%8B%A9.4ouovp4rbqm0.gif" alt="xuanze"></p><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>从未排序的数组中找到最大的元素放到起始位置</li><li>从剩下的元素中找到最大的元素放到起始位置之后</li><li>重复上面的操作，直到所有元素排序完成</li></ol><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sellection_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j,temp;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = i+<span class="hljs-number">1</span>; j &lt; len; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[i] &lt; <span class="hljs-built_in">list</span>[j] )<br>            &#123;<br>                temp = <span class="hljs-built_in">list</span>[i];<br>                <span class="hljs-built_in">list</span>[i] = <span class="hljs-built_in">list</span>[j];<br>                <span class="hljs-built_in">list</span>[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E6%8F%92%E5%85%A5.65fyg9owvnk0.gif" alt="charu"></p><h2 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>将第一个元素当做有序数组</li><li>将第二个元素插入到合适的位置，此时前两个元素是有序的</li><li>再将第三个元素插入到前两个元素中合适的位置，此时前三个元素是有序的</li><li>重复上面操作，直到排序完成</li><li>在插入过程中，如果有插入操作就进行下一个元素的插入</li></ol><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">instertion_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j,temp;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = i; j &gt; <span class="hljs-number">0</span>; j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[j<span class="hljs-number">-1</span>] &lt; <span class="hljs-built_in">list</span>[j] )<br>            &#123;<br>                temp = <span class="hljs-built_in">list</span>[j<span class="hljs-number">-1</span>];<br>                <span class="hljs-built_in">list</span>[j<span class="hljs-number">-1</span>] = <span class="hljs-built_in">list</span>[j];<br>                <span class="hljs-built_in">list</span>[j] = temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%B8%8C%E5%B0%94.1uvf9azfa2i.gif" alt="shell"></p><h2 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>选择一个增量，根据增量可以得到每次排序的间隔（例如：10个元素，增量为2，则间隔为5(10/2),2(5/2),1(2/2) ）</li><li>按间隔进行比较，如果满足条件就交换位置。</li><li>重复上面的操作，直到间隔小于1结束</li></ol><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> h = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (h &lt; len/<span class="hljs-number">2</span>)<br>    &#123;<br>        h =<span class="hljs-number">2</span> * h;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (h)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; h; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = len - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j -= h)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[j] &gt; <span class="hljs-built_in">list</span>[j-h])<br>                &#123;<br>                    tmp = <span class="hljs-built_in">list</span>[j-h];<br>                    <span class="hljs-built_in">list</span>[j-h] = <span class="hljs-built_in">list</span>[j];<br>                    <span class="hljs-built_in">list</span>[j] = tmp;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        h = h / <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%BD%92%E5%B9%B6.2vu3puotpxk0.gif" alt="guibing"></p><h2 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>将数组从中间分为两部分</li><li>将这个两部分继续从其中间分开</li><li>重复上面的操作，直到两边只有一个元素</li><li>从最下层开始，两部分对应元素进行比较并排序，合并到一起，如果一部分没有元素，将仍有元素的直接加到末尾</li></ol><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> first, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> last, <span class="hljs-keyword">int</span> *temp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = first, j = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// i为第一组的起点, j为第二组的起点</span><br>    <span class="hljs-keyword">int</span> m = mid, n = last;      <span class="hljs-comment">// m为第一组的终点, n为第二组的终点</span><br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;                  <span class="hljs-comment">// k用于指向temp数组当前放到哪个位置</span><br>    <span class="hljs-keyword">while</span> (i &lt;= m &amp;&amp; j &lt;= n)<br>    &#123;                           <span class="hljs-comment">// 将两个有序序列循环比较, 填入数组temp</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[i] &lt;= <span class="hljs-built_in">list</span>[j])<br>            temp[k++] = <span class="hljs-built_in">list</span>[j++];<br>        <span class="hljs-keyword">else</span><br>            temp[k++] = <span class="hljs-built_in">list</span>[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= m)<br>    &#123;                           <span class="hljs-comment">// 如果比较完毕, 第一组还有数剩下, 则全部填入temp</span><br>        temp[k++] = <span class="hljs-built_in">list</span>[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= n)<br>    &#123;                           <span class="hljs-comment">// 如果比较完毕, 第二组还有数剩下, 则全部填入temp</span><br>        temp[k++] = <span class="hljs-built_in">list</span>[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; k; i++)<br>    &#123;                           <span class="hljs-comment">// 将排好序的数填回到数组的对应位置</span><br>        <span class="hljs-built_in">list</span>[first + i] = temp[i];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> first, <span class="hljs-keyword">int</span> last, <span class="hljs-keyword">int</span> *tmp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (first &lt; last)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = (first + last) / <span class="hljs-number">2</span>;<br>        merge_sort(<span class="hljs-built_in">list</span>, first, mid, tmp); <span class="hljs-comment">// 递归归并左边元素</span><br>        merge_sort(<span class="hljs-built_in">list</span>, mid + <span class="hljs-number">1</span>, last, tmp); <span class="hljs-comment">// 递归归并右边元素</span><br>        merge(<span class="hljs-built_in">list</span>, first, mid, last, tmp); <span class="hljs-comment">// 再将二个有序数列合并</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>算法原理的学习以及算法图片来自<a href="https://www.cxyxiaowu.com/2026.html">程序员吴师兄</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-队列</title>
    <link href="/2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
    <url>/2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构：队列"><a href="#数据结构：队列" class="headerlink" title="数据结构：队列"></a>数据结构：队列</h1><p>队列作为一种数据结构，只能从一端添加元素，只能从另一端取出元素。</p><p>队列的应用可以在播放器上的播放列表，数据流对象，异步的数据传输结构(文件IO，管道通讯，套接字等)上体现，当然最直观的的就是排队了。</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E9%98%9F%E5%88%97.gif" alt="队列"></p><p>队列和栈的最大区别就是：栈是先进后出，队列是先进先出，根据这个区别能很快的根据栈的操作写出队列</p><h2 id="队列的创建和初始化"><a href="#队列的创建和初始化" class="headerlink" title="队列的创建和初始化"></a>队列的创建和初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  ERROR_CODE   -108</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  EMPTY_CODE   -109</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linklist</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linklist</span> *<span class="hljs-title">next</span>;</span><br>&#125;LINKLIST;<br><br><span class="hljs-function">LINKLIST *<span class="hljs-title">init_list</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *head,*end;<br>    head = (LINKLIST*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LINKLIST));<br>    end = head;<br>    end-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>和栈一样，队列也采用单链表实现</p><h2 id="判断队列为空"><a href="#判断队列为空" class="headerlink" title="判断队列为空"></a>判断队列为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span> )<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;stack is not exit!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EMPTY_CODE);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>-&gt;next == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果只有一个头节点则队列为空</p><h2 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">push</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> number)</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *node;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ERROR_CODE;<br>    &#125;<br><br>    node = (LINKLIST*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LINKLIST));<br>    node-&gt;number = number;<br>    node-&gt;next = <span class="hljs-built_in">list</span>-&gt;next;<br>    <span class="hljs-built_in">list</span>-&gt;next = node;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>头插法，每次入队都插入到队列最前面</p><h2 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> number;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ERROR_CODE;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (is_empty(<span class="hljs-built_in">list</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> EMPTY_CODE;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">list</span>-&gt;next-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span>-&gt;next;<br>    &#125;<br><br>    number = <span class="hljs-built_in">list</span>-&gt;next-&gt;number;<br>    <span class="hljs-built_in">free</span>(<span class="hljs-built_in">list</span>-&gt;next);<br>    <span class="hljs-built_in">list</span>-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">return</span> number;<br>&#125;<br></code></pre></td></tr></table></figure><p>出队时，从队尾出队，保证先进先出<br>如果入队采用尾插法，出队则需要从头部出队</p><h2 id="删除队列"><a href="#删除队列" class="headerlink" title="删除队列"></a>删除队列</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del</span><span class="hljs-params">(LINKLIST **<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (*<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ERROR_CODE;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ((*<span class="hljs-built_in">list</span>)-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        pop(*<span class="hljs-built_in">list</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(*<span class="hljs-built_in">list</span>);<br>    *<span class="hljs-built_in">list</span> = <span class="hljs-literal">NULL</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>将所有节点出队，最后删除头结点</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈和队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-栈</title>
    <link href="/2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
    <url>/2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构：栈"><a href="#数据结构：栈" class="headerlink" title="数据结构：栈"></a>数据结构：栈</h1><p>栈是一种线性结构，它只能从一端添加元素，也只能从一端取出元素(这一端称之为栈顶)。<br>Stack这种数据结构用途很广泛，在计算机的使用中，大量的运用了栈，比如编译器中的词法分析器、Java虚拟机、软件中的撤销操作（Undo）、浏览器中的回退操作，编译器中的函数调用实现等等。</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E6%A0%88.gif" alt="栈"></p><p>本次使用单链表实现栈的基本操作，并用栈实现二进制转换十进制。</p><h2 id="栈的创建和初始化"><a href="#栈的创建和初始化" class="headerlink" title="栈的创建和初始化"></a>栈的创建和初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  ERROR_CODE   -108</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  EMPTY_CODE   -109</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linklist</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linklist</span> *<span class="hljs-title">next</span>;</span><br>&#125;LINKLIST;<br><br><span class="hljs-function">LINKLIST *<span class="hljs-title">init_list</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *head,*end;<br>    head = (LINKLIST*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LINKLIST));<br>    end = head;<br>    end-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>在创建栈的时候引入了头文件&lt;stdbool.h&gt;，目的是引入了bool类型。<br>同时宏定义了两个出错代码，代表出错和栈为空。</p><h2 id="判断栈为空"><a href="#判断栈为空" class="headerlink" title="判断栈为空"></a>判断栈为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span> )<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;stack is not exit!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EMPTY_CODE);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>-&gt;next == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果只有一个头节点则栈为空</p><h2 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">push</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> number)</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *node;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ERROR_CODE;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">list</span>-&gt;next!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span>-&gt;next;<br>    &#125;<br><br>    node = (LINKLIST*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LINKLIST));<br>    node-&gt;number = number;<br>    <span class="hljs-built_in">list</span>-&gt;next = node;<br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>采用尾插法完成入栈操作</p><h2 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> number;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ERROR_CODE;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (is_empty(<span class="hljs-built_in">list</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> EMPTY_CODE;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">list</span>-&gt;next-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span>-&gt;next;<br>    &#125;<br><br>    number = <span class="hljs-built_in">list</span>-&gt;next-&gt;number;<br>    <span class="hljs-built_in">free</span>(<span class="hljs-built_in">list</span>-&gt;next);<br>    <span class="hljs-built_in">list</span>-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">return</span> number;<br>&#125;<br></code></pre></td></tr></table></figure><p>每次出栈从链表尾弹出一个节点</p><h2 id="删除栈"><a href="#删除栈" class="headerlink" title="删除栈"></a>删除栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del</span><span class="hljs-params">(LINKLIST **<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (*<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ERROR_CODE;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ((*<span class="hljs-built_in">list</span>)-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        pop(*<span class="hljs-built_in">list</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(*<span class="hljs-built_in">list</span>);<br>    *<span class="hljs-built_in">list</span> = <span class="hljs-literal">NULL</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>将所有节点出栈，并删除头结点</p><hr><h1 id="二进制转换十进制"><a href="#二进制转换十进制" class="headerlink" title="二进制转换十进制"></a>二进制转换十进制</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    LINKLIST *<span class="hljs-built_in">list</span> = init_list();<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个二进制数，输入#表示结束！\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;c);<br>    <span class="hljs-keyword">while</span> (c != <span class="hljs-string">&#x27;#&#x27;</span>)<br>    &#123;<br>        push(<span class="hljs-built_in">list</span>, c);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;c);<br>    &#125;<br>    getchar();<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">list</span>-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        sum = sum+(pop(<span class="hljs-built_in">list</span>)<span class="hljs-number">-48</span>)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i);<br>        i++;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;转化为十进制数为：%d\n&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>值得注意的是，直接gcc编译时会报链接错误，需要链接math库即 gcc stack.c -lm 具体原因不明</p></blockquote><p>栈的创建和操作沿用之前的函数，只需要加一个main()并引入头文件&lt;math.h&gt;函数即可<br>首先将键盘上的每个字符入栈（偷懒了没做01字符的判断），然后每出栈一个字符就进行幂运算。<br>出栈得到的是ASCII码，0对应的ASCII码为48所以减去48就可以得到实际的数</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈和队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-顺序表</title>
    <link href="/2020/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2020/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构：顺序表"><a href="#数据结构：顺序表" class="headerlink" title="数据结构：顺序表"></a>数据结构：顺序表</h1><p>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E9%A1%BA%E5%BA%8F%E8%A1%A8.gif" alt="顺序表"></p><h2 id="顺序表的创建"><a href="#顺序表的创建" class="headerlink" title="顺序表的创建"></a>顺序表的创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LIST_MAX_SIZE  20</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> number[LIST_MAX_SIZE];<br>    <span class="hljs-keyword">int</span> length;<br>&#125;List;<br></code></pre></td></tr></table></figure><p>number数组里面存放数据，length是当前顺序表的长度</p><h2 id="顺序表的初始化"><a href="#顺序表的初始化" class="headerlink" title="顺序表的初始化"></a>顺序表的初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function">List *<span class="hljs-title">list_init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    List *temp = (List*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(List));<br>    temp-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (n &gt; LIST_MAX_SIZE)<br>    &#123;<br>        n = LIST_MAX_SIZE;<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        temp-&gt;length++;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;temp-&gt;number[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><p>顺序表比较简单，判断合法性后依次输入就可以了</p><h2 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_node</span><span class="hljs-params">(List *lt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (lt == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty~\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (lt-&gt;length == LIST_MAX_SIZE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is full&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;lt-&gt;number[lt-&gt;length]);<br>    lt-&gt;length++;<br>&#125;<br></code></pre></td></tr></table></figure><p>增加节点直接增加到末尾，如果中间或在头部插入，后面的数据都要移动，我在这里没有实现这一功能。</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del_node</span><span class="hljs-params">(List *lt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (lt == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty~\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    lt-&gt;length--;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里也只实现了删除末尾节点。</p><h2 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_num</span><span class="hljs-params">(List *lt,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (lt == <span class="hljs-literal">NULL</span> || lt-&gt;length == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty~\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &gt; lt-&gt;length)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n is error!\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;lt-&gt;number[n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历找到要修改的节点进行修改</p><h2 id="输出节点"><a href="#输出节点" class="headerlink" title="输出节点"></a>输出节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printf_list</span><span class="hljs-params">(List *lt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span>(lt == <span class="hljs-literal">NULL</span> || lt-&gt;length == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; lt-&gt;length; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,lt-&gt;number[i]);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>遍历输出即可</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-双链表</title>
    <link href="/2020/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构：双链表"><a href="#数据结构：双链表" class="headerlink" title="数据结构：双链表"></a>数据结构：双链表</h1><p>双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%8F%8C%E9%93%BE%E8%A1%A8.jpg" alt="双链表"></p><h2 id="双链表和单链表的区别"><a href="#双链表和单链表的区别" class="headerlink" title="双链表和单链表的区别"></a>双链表和单链表的区别</h2><ul><li>单链表对于一个节点，有储存数据的data。和next后驱节点(指针)。也就是这个单链表想要一些遍历的操作都得通过前节点—&gt;后节点。</li><li>双链表对于一个节点，有些和单链表一样有存储数据的data,指向后方的next（指针）。它拥有单链表的所有操作和内容。但是他还有一个前驱节点front(指针)。</li><li>单链表一般都有一个头结点，双向链表可以没有头结点。</li></ul><p>本次创建的为一个没有头结点的双链表</p><h2 id="双链表的创建"><a href="#双链表的创建" class="headerlink" title="双链表的创建"></a>双链表的创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dlinklist</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">/*数据域*/</span><br>    <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-comment">/*前驱指针*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dlinklist</span> *<span class="hljs-title">front</span>;</span><br>    <span class="hljs-comment">/*后驱指针*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dlinklist</span> *<span class="hljs-title">next</span>;</span><br>&#125;DLlinkList;<br></code></pre></td></tr></table></figure><p>正因为拥有两个指针，所以双链表可以正向遍历也可以反向遍历。</p><h2 id="双链表的初始化"><a href="#双链表的初始化" class="headerlink" title="双链表的初始化"></a>双链表的初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function">DLlinkList* <span class="hljs-title">init_list</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    DLlinkList *head,*node,*end;<br><br>    <span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    node = (DLlinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DLlinkList));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;node-&gt;number);<br>    head = node;<br>    end = node;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        node = (DLlinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DLlinkList));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;node-&gt;number);<br>        end-&gt;next = node;<br>        node-&gt;front = end;<br>        end = node;<br>    &#125;<br>    head-&gt;front = <span class="hljs-literal">NULL</span>;<br>    end-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比单链表，他们的操作基本一样，双链表多了前驱指针的操作。</p><h2 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function">DLlinkList * <span class="hljs-title">add_node</span><span class="hljs-params">(DLlinkList *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    DLlinkList *temp = <span class="hljs-built_in">list</span>;<br>    DLlinkList *in;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (i &lt; (n<span class="hljs-number">-1</span>) &amp;&amp; temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        i++;<br>        temp = temp-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        in = (DLlinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DLlinkList));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;in-&gt;number);<br>        <span class="hljs-keyword">if</span> (temp-&gt;front == <span class="hljs-literal">NULL</span>)    <span class="hljs-comment">/*头插*/</span><br>        &#123;<br>            in-&gt;next = <span class="hljs-built_in">list</span>;<br>            in-&gt;front = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-built_in">list</span> = in;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp-&gt;next == <span class="hljs-literal">NULL</span>)    <span class="hljs-comment">/*尾插*/</span><br>        &#123;<br>            temp-&gt;next = in;<br>            in-&gt;front = temp;<br>            in-&gt;next = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>    <span class="hljs-comment">/*中间插入*/</span><br>        &#123;<br>            in-&gt;next = temp-&gt;next;<br>            in-&gt;front = temp;<br>            temp-&gt;next = in;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The %d node is empty,list has %d node\n&quot;</span>,n,i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为没有头结点，第一个节点可能会改变（头插时），所以返回值是一个节点的指针。</p><p>此函数包括了头插，尾插，和中间插入的逻辑。</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function">DLlinkList * <span class="hljs-title">del_node</span><span class="hljs-params">(DLlinkList *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    DLlinkList *temp = <span class="hljs-built_in">list</span>;<br>    DLlinkList *out;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n is error!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (i &lt; (n - <span class="hljs-number">1</span>) &amp;&amp; temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        i++;<br>        temp = temp-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (temp-&gt;front == <span class="hljs-literal">NULL</span>)    <span class="hljs-comment">/*删除头部*/</span><br>        &#123;<br>            out = <span class="hljs-built_in">list</span>;<br>            <span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span>-&gt;next;<br>            <span class="hljs-built_in">list</span>-&gt;front = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp-&gt;next == <span class="hljs-literal">NULL</span>)    <span class="hljs-comment">/*删除尾部*/</span><br>        &#123;<br>            out = temp;<br>            out-&gt;front-&gt;next = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>    <span class="hljs-comment">/*删除中间*/</span><br>        &#123;<br>            out = temp;<br>            out-&gt;front-&gt;next = out-&gt;next;<br>            out-&gt;next-&gt;front = out-&gt;front;<br>            out = <span class="hljs-literal">NULL</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">free</span>(out);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The %d node is empty,list has %d node\n&quot;</span>,n,i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除节点和增加节点一样，包含了三个逻辑：删除头，删除尾，删除中间</p><h2 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_num</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *temp = <span class="hljs-built_in">list</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (i &lt; n &amp;&amp; temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        i++;<br>        temp = temp-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;temp-&gt;number);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the %d node is empty!\n&quot;</span>,n);<br>    &#125;<br></code></pre></td></tr></table></figure><p>修改节点比较简单，遍历修改number就可以</p><h2 id="输出双链表"><a href="#输出双链表" class="headerlink" title="输出双链表"></a>输出双链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printf_list</span><span class="hljs-params">(DLlinkList *<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    DLlinkList *temp = <span class="hljs-built_in">list</span>;<br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (temp-&gt;front == <span class="hljs-literal">NULL</span> &amp;&amp; temp-&gt;next == <span class="hljs-literal">NULL</span>)  <span class="hljs-comment">/*只有一个节点*/</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list number:%d\n&quot;</span>,temp-&gt;number);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp-&gt;front == <span class="hljs-literal">NULL</span>)   <span class="hljs-comment">/*从头部开始*/</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list number:%d\n&quot;</span>,temp-&gt;number);<br>            temp = temp-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>)    <span class="hljs-comment">/*从尾部开始*/</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list number:%d\n&quot;</span>,temp-&gt;number);<br>            temp = temp-&gt;front;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出操作包含了从头部输出和从尾部输出两个逻辑</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-单链表</title>
    <link href="/2020/11/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/11/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构：单链表"><a href="#数据结构：单链表" class="headerlink" title="数据结构：单链表"></a>数据结构：单链表</h1><p>链表是一种常见的基础数据结构，结构体指针在这里得到了充分的利用。链表可以动态的进行存储分配，也就是说，链表是一个功能极为强大的数组，他可以在节点中定义多种数据类型，还可以根据需要随意增添，删除，插入节点。链表都有一个头指针，一般以head来表示，存放的是一个地址。</p><p><img src="https://fastly.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="avatar"></p><p>单链表具有以下特点：</p><ul><li>单个结点创建非常方便，普通的线性内存通常在创建的时候就需要设定数据的大小</li><li>结点的删除非常方便，不需要像线性结构那样移动剩下的数据</li><li>结点的访问方便，可以通过循环或者递归的方法访问到任意数据，但是平均的访问效率低于线性表</li></ul><h2 id="单链表的创建"><a href="#单链表的创建" class="headerlink" title="单链表的创建"></a>单链表的创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linklist</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">/*数据域*/</span><br>    <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-comment">/*指针域*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linklist</span> * <span class="hljs-title">next</span>;</span><br>&#125;LINKLIST;<br></code></pre></td></tr></table></figure><p>链表中的节点分为两类，头结点和一般节点，头结点是没有数据域的。链表中每个节点都分为两部分，一个数据域，一个是指针域。</p><h2 id="单链表的初始化"><a href="#单链表的初始化" class="headerlink" title="单链表的初始化"></a>单链表的初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function">LINKLIST *<span class="hljs-title">init_list</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    LINKLIST *head,*node,*end;<br>    head = (LINKLIST*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LINKLIST));<br>    end = head;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        node = (LINKLIST*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LINKLIST));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;node-&gt;number);<br>        end-&gt;next = node;<br>        end = node;<br>    &#125;<br>    end-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化时，首先创建一个头结点，接着创建对应数量的一般节点，把指针域的指针指向下一个节点并填充数据域，然后将最后一个节点指向NULL。</p><h2 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_node</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *temp = <span class="hljs-built_in">list</span>;<br>    LINKLIST *in;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (i &lt; (n<span class="hljs-number">-1</span>) &amp;&amp; temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        i++;<br>        temp = temp-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        in = (LINKLIST*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LINKLIST));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;in-&gt;number);<br>        in-&gt;next = temp-&gt;next;<br>        temp-&gt;next = in;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The %d node is empty,list has %d node\n&quot;</span>,n,i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>增加节点时首先判断链表是否为空（在C/C++中使用指针前进行合法性判断是一个非常好的编程习惯），然后遍历找到目标位置的前一个节点，将新结点添加到它的后面。</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del_node</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *temp = <span class="hljs-built_in">list</span>;<br>    LINKLIST *out;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (i &lt; (n<span class="hljs-number">-1</span>) &amp;&amp; temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        i++;<br>        temp = temp-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        out = temp-&gt;next;<br>        temp-&gt;next = out-&gt;next;<br>        out-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">free</span>(out);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The %d node is empty,list has %d node\n&quot;</span>,n,i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除节点和添加节点差不多，找到目标节点的前一个节点，使其指针域指向目标节点的后面的节点，然后使用free()释放目标节点的空间。</p><h2 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_num</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *temp = <span class="hljs-built_in">list</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (i &lt; n &amp;&amp; temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        i++;<br>        temp = temp-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;temp-&gt;number);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the %d node is empty!\n&quot;</span>,n);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>修改节点只需要遍历找到目标节点，修改它的数据域。</p><h2 id="输出单链表"><a href="#输出单链表" class="headerlink" title="输出单链表"></a>输出单链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printf_list</span><span class="hljs-params">(LINKLIST *<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    LINKLIST *temp = <span class="hljs-built_in">list</span>;<br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list is empty!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    temp = temp-&gt;next;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list number:%d\n&quot;</span>,temp-&gt;number);<br>        temp = temp-&gt;next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出单链表很简单，遍历输出数据域即可。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python脚本-批量处理文件</title>
    <link href="/2020/11/20/python%E8%84%9A%E6%9C%AC/python%E8%84%9A%E6%9C%AC-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/"/>
    <url>/2020/11/20/python%E8%84%9A%E6%9C%AC/python%E8%84%9A%E6%9C%AC-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="python脚本-自动化处理文件"><a href="#python脚本-自动化处理文件" class="headerlink" title="python脚本-自动化处理文件"></a>python脚本-自动化处理文件</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在工作中遇到一个很麻烦的操作，我需要先修改xml表，然后运行一个程序，这个程序会根据xml表生成许多模板文件，我需要把被我影响到的几个文件还有新生成的两个文件拷到工作目录，然后把xml和一个特殊文件压缩。最后在生成的模板文件上进行开发。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>主要完成程序的执行，文件的批量复制，文件批量删除，执行shell命令等功能。<br>此脚本涉及到工作内容，所以有些关键信息，比如程序名，工作目录，文件名，我会进行相应的替换。</p><h2 id="三个函数"><a href="#三个函数" class="headerlink" title="三个函数"></a>三个函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dir_isexists</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;./test&quot;</span>):<br>        os.mkdir(<span class="hljs-string">&quot;./test&quot;</span>)<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;creat ./test&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cp_func</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&quot;./test&quot;</span>):<br>        <span class="hljs-keyword">if</span> os.path.join(<span class="hljs-string">&quot;./test&quot;</span>,f) == name:<br>            cmd = <span class="hljs-string">&quot;cp -f &#123;&#125; ./app&quot;</span>.<span class="hljs-built_in">format</span>(name)<br>            <span class="hljs-keyword">if</span> os.system(cmd) == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;success cp &#123;&#125; to ./app&quot;</span>.<span class="hljs-built_in">format</span>(name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delet_file</span>():</span><br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&quot;./test&quot;</span>):<br>        <span class="hljs-keyword">if</span> os.path.isfile(os.path.join(<span class="hljs-string">&quot;./test&quot;</span>,f)):<br>            os.remove(os.path.join(<span class="hljs-string">&quot;./test&quot;</span>,f))<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;remove &quot;</span> + f<br>    os.rmdir(<span class="hljs-string">&quot;./test&quot;</span>)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;rm ./test&quot;</span><br></code></pre></td></tr></table></figure><p>函数功能：</p><ul><li>dir_isexists：判断使用程序时指定生成的模板文件存放的路径是否存在，如不存在就创建</li><li>cp_func：将需要的文件拷贝到工作目录</li><li>delet_file：删除没有用的模板文件<br>关于os库和sys库可以参考<a href="/2020/11/13/%E8%87%AA%E5%AD%A6Python/%E8%87%AA%E5%AD%A6Python-%E6%A0%87%E5%87%86%E5%BA%93os/">python标准库-os</a>，<a href="/2020/11/13/%E8%87%AA%E5%AD%A6Python/%E8%87%AA%E5%AD%A6Python-%E6%A0%87%E5%87%86%E5%BA%93sys/">python标准库-sys</a></li></ul><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;please input a nodename&quot;</span><br>        sys.exit(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;./tools&quot;</span>):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;please go to ******&quot;</span><br>        sys.exit(<span class="hljs-number">0</span>)<br><br>    filename_c = <span class="hljs-string">&quot;./test/device_&quot;</span> + sys.argv[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;.c&quot;</span><br>    filename_h = <span class="hljs-string">&quot;./test/device_&quot;</span> + sys.argv[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;.h&quot;</span><br>    filename_com = <span class="hljs-string">&quot;./test/******.h&quot;</span><br>    filename_model = <span class="hljs-string">&quot;./test//******..c&quot;</span><br>    filename_id = <span class="hljs-string">&quot;./test//******..h&quot;</span><br>    filename_sort = <span class="hljs-string">&quot;./test//******..h&quot;</span><br>    filename_device_h = <span class="hljs-string">&quot;./test//******..h&quot;</span><br>    tar_dir = <span class="hljs-string">&quot;./******/******/******/&quot;</span><br>    gz_file = <span class="hljs-string">&quot;******.tar.gz&quot;</span><br>    xml_file = <span class="hljs-string">&quot;******.xml&quot;</span><br>    instance_file = <span class="hljs-string">&quot;******&quot;</span><br><br>    namelist = []<br>    namelist.append(filename_c)<br>    namelist.append(filename_h)<br>    namelist.append(filename_com)<br>    namelist.append(filename_model)<br>    namelist.append(filename_id)<br>    namelist.append(filename_sort)<br>    namelist.append(filename_device_h)<br><br>    <span class="hljs-keyword">if</span> os.path.isfile(os.path.join(tar_dir,xml_file)) <span class="hljs-keyword">and</span> os.path.isfile(os.path.join(tar_dir,instance_file)):<br>        retval = os.getcwd()<br>        os.chdir(tar_dir)<br>        tar_cmd = <span class="hljs-string">&quot;tar -czvf &quot;</span>+ <span class="hljs-string">&quot; &quot;</span> + gz_file + <span class="hljs-string">&quot; &quot;</span> + xml_file + <span class="hljs-string">&quot; &quot;</span> + instance_file<br>        <span class="hljs-keyword">if</span> os.system(tar_cmd) != <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;failure to tar, please tar by yourself&quot;</span><br>        os.chdir(retval)<br>    dir_isexists()<br><br>    <span class="hljs-keyword">if</span> os.system(<span class="hljs-string">&quot;./tools/****** -f ./******/******.xml -p ./test&quot;</span>) != <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;failure get node file&quot;</span><br>        sys.exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;success get node file&quot;</span><br><br>    <span class="hljs-keyword">for</span> files <span class="hljs-keyword">in</span> namelist:<br>        cp_func(files)<br><br>    delet_file()<br></code></pre></td></tr></table></figure><p>主函数流程：</p><ul><li>主函数开始会判断是否有参数，工作目录是否正确，判断工作目录是否正确的方式我采用了判断一个特殊路径是否存在，如果存在则说明工作目录正确</li><li>第二部分就是定义出我需要使用的文件，和新生成的文件（由提供的参数确定新生成的文件名），并放到列表中</li><li> 判断xml文件是否存在，并将其压缩</li><li> 执行工具程序生成模板文件</li><li> 拷贝后删除生成文件</li></ul><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>主要熟悉os和sys库的基本操作</p>]]></content>
    
    
    <categories>
      
      <category>python脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>python脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经典算法(1)</title>
    <link href="/2020/11/19/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95-1/"/>
    <url>/2020/11/19/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95-1/</url>
    
    <content type="html"><![CDATA[<h1 id="经典算法（1）"><a href="#经典算法（1）" class="headerlink" title="经典算法（1）"></a>经典算法（1）</h1><h2 id="河内塔（又称汉诺塔）"><a href="#河内塔（又称汉诺塔）" class="headerlink" title="河内塔（又称汉诺塔）"></a>河内塔（又称汉诺塔）</h2><blockquote><p>河内之塔(Towers of Hanoi)是法国人M.Claus(Lucas)于1883年从泰国带至法国的，河内为越战时北越的首都，即现在的胡志明市；1883年法国数学家Edouard Lucas曾提及这个故事，据说创世纪时Benares有一座波罗教塔，是由三支钻石棒（Pag）所支撑，开始时神在第一根棒上放置64个由上至下依由小至大排列的金盘（Disc），并命令僧侣将所有的金盘从第一根石棒移至第三根石棒，且搬运过程中遵守大盘子在小盘子之下的原则，若每日仅搬一个盘子，则当盘子全数搬运完毕之时，此塔将毁损，而也就是世界末日来临之时。</p></blockquote><p>如果柱子标为ABC，要由A搬至C，在只有一个盘子时，就将它直接搬至C，当有两个盘子，就将B当作辅助柱。有n个盘子时，先将前 n-1 个移动到B，然后将最后一个移动到C，再将A作为辅助盘，将 n-2 移动到A，然后把B上的最后一个移动到C······以此循环，具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n ,<span class="hljs-keyword">char</span> a, <span class="hljs-keyword">char</span> b, <span class="hljs-keyword">char</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;move sheet %d from %c to %c\n&quot;</span>,n,a,c);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        hanoi(n<span class="hljs-number">-1</span>,a,c,b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;move sheet %d from %c to %c\n&quot;</span>,n,a,c);<br>        hanoi(n<span class="hljs-number">-1</span>,b,a,c);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入盘子数量：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br><br>    hanoi(i,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="费式数列"><a href="#费式数列" class="headerlink" title="费式数列"></a>费式数列</h2><blockquote><p>Fibonacci为1200年代的欧洲数学家，在他的着作中曾经提到：「若有一只免子每个月生一只小免子，一个月后小免子也开始生产。起初只有一只免子，一个月后就有两只免子，二个月后有三只免子，三个月后有五只免子（小免子投入生产）……。注意新生的小免子需一个月成长期才会投入生产，类似的道理也可以用于植物的生长，这就是Fibonacci数列，一般习惯称之为费氏数列，例如以下： 1、1 、2、3、5、8、13、21、34、55、89……</p></blockquote><p>根据规律可以得出，从第三个月开始(2),兔子的数目都为前两个月之和，算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> sum;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>)<br>    &#123;<br>        sum = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        sum = fibonacci(n<span class="hljs-number">-1</span>) + fibonacci(n<span class="hljs-number">-2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;起初只有一只小兔子，请输入时间（月）：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br>    <span class="hljs-keyword">int</span> sum = fibonacci(i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;共有%d只兔子\n&quot;</span>,sum);   <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h2><blockquote><p>杨辉三角，是二项式系数在三角形中的一种几何排列。在欧洲，这个表叫做帕斯卡三角形。帕斯卡（1623—-1662）是在1654年发现这一规律的，比杨辉要迟393年，比贾宪迟600年。杨辉三角是中国古代数学的杰出研究成果之一，它把二项式系数图形化，把组合数内在的一些代数性质直观地从图形中体现出来，是一种离散型的数与形的结合。</p></blockquote><p>三角形的前提是：每行端点与结尾的数为1。<br>可以根据以下性质来进行代码编写：</p><ul><li>每个数字等于上一行的左右两个数字之和。可用此性质写出整个杨辉三角。即第n+1行的第i个数等于第n行的第i-1个数和第i个数之和，这也是组合数的性质之一。即 C(n+1,i)=C(n,i)+C(n,i-1)。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">combi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(r == <span class="hljs-number">1</span> || i == <span class="hljs-number">1</span> || i == r)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> combi((r<span class="hljs-number">-1</span>),(i<span class="hljs-number">-1</span>)) + combi((r<span class="hljs-number">-1</span>),(i));<br>    &#125;<br>    <br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">int</span> j;<br>    <span class="hljs-keyword">int</span> k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入杨辉三角的层数：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt;= num; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt;= (num-i)*<span class="hljs-number">2</span>; k++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= i; j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld  &quot;</span>,combi(i,j));<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三色棋"><a href="#三色棋" class="headerlink" title="三色棋"></a>三色棋</h2><p>三色旗的问题最早由E.W.Dijkstra所提出，他所使用的用语为Dutch Nation Flag(Dijkstra为荷兰人)，而多数的作者则使用Three-Color Flag来称之。</p><blockquote><p>假设有一条绳子，上面有红、白、蓝三种颜色的旗子，起初绳子上的旗子颜色并没有顺序，您希望将之分类，并排列为蓝、白、红的顺序，要如何移动次数才会最少，注意您只能在绳子上进行这个动作，而且一次只能调换两个旗子。</p></blockquote><p>遇到蓝色就放到数组前面，遇到红色放到数组末尾，中间自然就全部是白色了，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span><br>    READ =  <span class="hljs-number">0</span>,<br>    WHITE,<br>    BLUE,<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> flags[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-keyword">int</span> lens = <span class="hljs-keyword">sizeof</span>(flags)/<span class="hljs-keyword">sizeof</span>(flags[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> end = lens - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; lens; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (flags[i] != WHITE)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(flags[i] == BLUE)<br>            &#123;<br>                flags[i] = flags[begin];<br>                flags[begin] = BLUE;<br>                begin++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flags[i] == READ)<br>            &#123;<br>                flags[i] = flags[end];<br>                flags[end] = READ;<br>                end--;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(i == end<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; lens; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>,flags[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>经典算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>经典算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令-sed</title>
    <link href="/2020/11/17/Linux%E5%91%BD%E4%BB%A4/Linux%E5%91%BD%E4%BB%A4-sed/"/>
    <url>/2020/11/17/Linux%E5%91%BD%E4%BB%A4/Linux%E5%91%BD%E4%BB%A4-sed/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux命令—sed"><a href="#Linux命令—sed" class="headerlink" title="Linux命令—sed"></a>Linux命令—sed</h1><p>sed 会根据脚本命令来处理文本文件中的数据，这些命令要么从命令行中输入，要么存储在一个文本文件中，此命令执行数据的顺序如下：  </p><ul><li>每次仅读取一行内容；</li><li>根据提供的规则命令匹配并修改数据。注意，sed 默认不会直接修改源文件数据，而是会将数据复制到缓冲区中，修改也仅限于缓冲区中的数据；</li><li>将执行结果输出。 </li></ul><p>当一行数据匹配完成后，它会继续读取下一行数据，并重复这个过程，直到将文件中所有数据处理完毕。</p><h2 id="sed-命令的基本格式"><a href="#sed-命令的基本格式" class="headerlink" title="sed 命令的基本格式"></a>sed 命令的基本格式</h2><pre><code class="hljs">sed [选项] [脚本命令] 文件名</code></pre><p>该命令常用的选项及含义，如下表所示：</p><table><thead><tr><th align="left">选项</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-e</td><td align="left">该选项会将其后跟的脚本命令添加到已有的命令中。</td></tr><tr><td align="left">-f</td><td align="left">该选项会将其后文件中的脚本命令添加到已有的命令中。</td></tr><tr><td align="left">-n</td><td align="left">默认情况下，sed 会在所有的脚本指定执行完毕后，会自动输出处理后的内容，而该选项会屏蔽启动输出，需使用 print 命令来完成输出。</td></tr><tr><td align="left">-i</td><td align="left">此选项会直接修改源文件，要慎用。</td></tr></tbody></table><h2 id="sed-s-替换脚本命令"><a href="#sed-s-替换脚本命令" class="headerlink" title="sed s 替换脚本命令"></a>sed s 替换脚本命令</h2><p>此命令的基本格式为：  </p><pre><code class="hljs">[address]s/pattern/replacement/flags</code></pre><p>其中，address 表示指定要操作的具体行，pattern 指的是需要替换的内容，replacement 指的是要替换的新内容。此命令中常用的 flags 标记如下表所示：</p><table><thead><tr><th align="left">flag</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">n</td><td align="left">1~512 之间的数字，表示指定要替换的字符串出现第几次时才进行替换，例如，一行中有 3 个 A，但用户只想替换第二个 A，这时就用到这个标记；</td></tr><tr><td align="left">g</td><td align="left">对数据中所有匹配到的内容进行替换，如果没有 g，则只会在第一次匹配成功时做替换操作。例如，一行数据中有 3 个 A，则只会替换第一个 A；</td></tr><tr><td align="left">p</td><td align="left">会打印与替换命令中指定的模式匹配的行。此标记通常与 -n 选项一起使用。</td></tr><tr><td align="left">w file</td><td align="left">将缓冲区中的内容写到指定的 file 文件中；</td></tr><tr><td align="left">&amp;</td><td align="left">用正则表达式匹配的内容进行替换；</td></tr><tr><td align="left">\n</td><td align="left">匹配第 n 个子串，该子串之前在 pattern 中用 \ ( \ ) 指定。</td></tr><tr><td align="left">\</td><td align="left">转义（转义替换部分包含：&amp;、\ 等）。</td></tr></tbody></table><p>来试验一下这个命令，首先创建一个文件并包含以下内容：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">$ cat test.txt<br>hello world!<br>hello carl!<br>hello jack!<br>Hi carl!<br></code></pre></td></tr></table></figure><p>将carl替换成sam并输出：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">$ sed <span class="hljs-string">&#x27;s/carl/sam/1&#x27;</span> test.txt<br>hello world!<br>hello sam!<br>hello jack!<br>Hi sam!<br></code></pre></td></tr></table></figure><p>将jack替换成carl只输出有修改的行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sed -n <span class="hljs-string">&#x27;s/jack/sam/p&#x27;</span> test.txt<br>hello sam!<br></code></pre></td></tr></table></figure><p>将hello替换成Hi，并保存到hi.txt中：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">$ sed -n <span class="hljs-string">&#x27;s/hello/Hi/w hi.txt&#x27;</span> test.txt<br>$ cat hi.txt<br>Hi world!<br>Hi carl!<br>Hi jack!<br></code></pre></td></tr></table></figure><h2 id="sed-d-删除脚本命令"><a href="#sed-d-删除脚本命令" class="headerlink" title="sed d 删除脚本命令"></a>sed d 删除脚本命令</h2><p>命令格式如下：  </p><pre><code class="hljs">[address]d</code></pre><p>如果需要删除文本中的特定行，可以用 d 脚本命令，它会删除指定行中的所有内容。但使用该命令时要特别小心，如果你忘记指定具体行的话，文件中的所有内容都会被删除。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> hi.txt<br>Hi world!<br>Hi carl!<br>Hi jack!<br><span class="hljs-variable">$</span> sed <span class="hljs-literal">-i</span> <span class="hljs-string">&#x27;d&#x27;</span> hi.txt<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> hi.txt<br><span class="hljs-comment">#什么也没输出，文件为空</span><br></code></pre></td></tr></table></figure><h3 id="删除指定行"><a href="#删除指定行" class="headerlink" title="删除指定行"></a>删除指定行</h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">$ sed  <span class="hljs-string">&#x27;1d&#x27;</span> test.txt<br>hello carl!<br>hello jack!<br>Hi carl!<br></code></pre></td></tr></table></figure><h3 id="删除指定区间所有行"><a href="#删除指定区间所有行" class="headerlink" title="删除指定区间所有行"></a>删除指定区间所有行</h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">$ sed  <span class="hljs-string">&#x27;2,3d&#x27;</span> test.txt<br>hello world!<br>Hi carl!<br></code></pre></td></tr></table></figure><h3 id="删除指定行开始的所有行"><a href="#删除指定行开始的所有行" class="headerlink" title="删除指定行开始的所有行"></a>删除指定行开始的所有行</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">$ sed  <span class="hljs-string">&#x27;2,<span class="hljs-subst">$d</span>&#x27;</span> test.txt<br>hello world!<br></code></pre></td></tr></table></figure><h2 id="sed-a-和-i-脚本命令"><a href="#sed-a-和-i-脚本命令" class="headerlink" title="sed a 和 i 脚本命令"></a>sed a 和 i 脚本命令</h2><p>此命令格式如下：</p><pre><code class="hljs">[address]a（或 i）\新文本内容</code></pre><p>a 命令表示在指定行的后面附加一行，i 命令表示在指定行的前面插入一行。</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">$ sed  &#x27;<span class="hljs-number">1</span>a\this <span class="hljs-keyword">is</span> <span class="hljs-keyword">new</span> <span class="hljs-literal">line</span>&#x27; test.txt<br>hello world!<br>this <span class="hljs-keyword">is</span> <span class="hljs-keyword">new</span> <span class="hljs-literal">line</span><br>hello carl!<br>hello jack!<br>Hi carl!<br>$ sed  &#x27;<span class="hljs-number">1</span>i\this <span class="hljs-keyword">is</span> <span class="hljs-keyword">new</span> <span class="hljs-literal">line</span>&#x27; test.txt<br>this <span class="hljs-keyword">is</span> <span class="hljs-keyword">new</span> <span class="hljs-literal">line</span><br>hello world!<br>hello carl!<br>hello jack!<br>Hi carl!<br></code></pre></td></tr></table></figure><h2 id="sed-c-替换脚本命令"><a href="#sed-c-替换脚本命令" class="headerlink" title="sed c 替换脚本命令"></a>sed c 替换脚本命令</h2><p>该命令的基本格式为：<br>    [address]c\用于替换的新文本</p><p>c 命令表示将指定行中的所有内容，替换成该选项后面的字符串。</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">$ sed  <span class="hljs-string">&#x27;3c\123&#x27;</span> test.txt<br>hello world!<br>hello carl!<br><span class="hljs-number">123</span><br>Hi carl!<br></code></pre></td></tr></table></figure><h2 id="sed-q-退出脚本命令"><a href="#sed-q-退出脚本命令" class="headerlink" title="sed q 退出脚本命令"></a>sed q 退出脚本命令</h2><p>q 命令的作用是使 sed 命令在第一次匹配任务结束后，退出 sed 程序，不再进行对后续数据的处理。</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">$ sed <span class="hljs-string">&#x27;2q&#x27;</span> test.txt<br>hello world!<br>hello carl!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python脚本-删除Windows上的换行符</title>
    <link href="/2020/11/13/python%E8%84%9A%E6%9C%AC/Python%E8%84%9A%E6%9C%AC-%E5%88%A0%E9%99%A4Windows%E4%B8%8A%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/"/>
    <url>/2020/11/13/python%E8%84%9A%E6%9C%AC/Python%E8%84%9A%E6%9C%AC-%E5%88%A0%E9%99%A4Windows%E4%B8%8A%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="第一个python脚本"><a href="#第一个python脚本" class="headerlink" title="第一个python脚本"></a>第一个python脚本</h1><p>在工作中，由于是在Linux服务器上开发，编译服务器当然也就是Linux了，但是我的电脑是windows系统，VIM这个编辑器有需要配置很多配置文件才能有强大的功能，所以我放弃了在服务器上使用VIM写代码，选择了在windows使用了VS code进行开发(毕竟我比较懒)。<br>由于操作系统的不同，代码中换行符也是不同的，这就导致有的代码编译不过，报的错误是行尾多了^M这个东西，这第一个脚本就是批量删除文件的^M。</p><h2 id="引入标准库"><a href="#引入标准库" class="headerlink" title="引入标准库"></a>引入标准库</h2><p>对文件进行操作，所以引入os和sys库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br></code></pre></td></tr></table></figure><hr><h2 id="获取目录下所有文件"><a href="#获取目录下所有文件" class="headerlink" title="获取目录下所有文件"></a>获取目录下所有文件</h2><p>因为需要批量处理文件，所以我们首先要保证可以得到目录下所有文件，这使用到了listdir()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;./&quot;</span><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span>  os.listdir(a):<br>    <span class="hljs-built_in">print</span> f<br></code></pre></td></tr></table></figure><p>运行会发现，我们只输出了当前目录的文件名和子目录名，我们来按下面方式优化一下：</p><ul><li>把对目录的操作写成函数。</li><li>使用判断如果是目录就递归调用，这使用到了isdir()函数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_func</span>(<span class="hljs-params">p</span>):</span><br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span>  os.listdir(p):<br>        <span class="hljs-keyword">if</span> os.path.isdir(f):<br>            delete_func(f)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> f<br>a = <span class="hljs-string">&quot;./&quot;</span><br>delete_func(a)<br></code></pre></td></tr></table></figure>运行会发现，确实打印出来了。</li></ul><hr><h2 id="为文件名添加路径"><a href="#为文件名添加路径" class="headerlink" title="为文件名添加路径"></a>为文件名添加路径</h2><p>虽然获取了文件名，但是我们的工作目录还是在给的路径下，子目录里面操作不到，所以需要我们添加路径，这就用到了join()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_func</span>(<span class="hljs-params">p</span>):</span><br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span>  os.listdir(p):<br>        <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(p,f)):<br>            delete_func(os.path.join(p,f))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> os.path.join(p,f)<br>a = <span class="hljs-string">&quot;./&quot;</span><br>delete_func(a)<br></code></pre></td></tr></table></figure><h2 id="清除-M"><a href="#清除-M" class="headerlink" title="清除^M"></a>清除^M</h2><p>得到了文件后我们就可以清除^M了，我们可以通过调用Linux中的sed命令来清除，调用外部命令需要用到system()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_func</span>(<span class="hljs-params">p</span>):</span><br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span>  os.listdir(p):<br>        <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(p,f)):<br>            delete_func(os.path.join(p,f))<br>        <span class="hljs-keyword">else</span>:<br>            cmd = <span class="hljs-string">&quot;sed -i &#x27;s/\r//&#x27; &quot;</span> + os.path.join(p,f)<br>            <span class="hljs-keyword">if</span> os.system(cmd) == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;success delete &quot;</span> + os.path.join(p,f) + <span class="hljs-string">&quot; ^M&quot;</span><br><br>a = <span class="hljs-string">&quot;./&quot;</span><br>delete_func(a)<br></code></pre></td></tr></table></figure><p>关于sed请看<a href="/2020/11/17/Linux%E5%91%BD%E4%BB%A4/Linux%E5%91%BD%E4%BB%A4-sed/">Linux命令-sed</a>，使用system()后不要忘了判断是否执行成功。</p><hr><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="支持单文件清除"><a href="#支持单文件清除" class="headerlink" title="支持单文件清除"></a>支持单文件清除</h3><p>使用isfile()函数对参数进行判断，如果是文件直接清除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_func</span>(<span class="hljs-params">p</span>):</span><br>    <span class="hljs-keyword">if</span> os.path.isdir(p):<br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span>  os.listdir(p):<br>            <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(p,f)):<br>                delete_func(os.path.join(p,f))<br>            <span class="hljs-keyword">else</span>:<br>                cmd = <span class="hljs-string">&quot;sed -i &#x27;s/\r//&#x27; &quot;</span> + os.path.join(p,f)<br>                <span class="hljs-keyword">if</span> os.system(cmd) == <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;success delete &quot;</span> + os.path.join(p,f) + <span class="hljs-string">&quot; ^M&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        cmd = <span class="hljs-string">&quot;sed -i &#x27;s/\r//&#x27; &quot;</span> + p<br>        <span class="hljs-keyword">if</span> os.system(cmd) == <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;success delete &quot;</span> + os.path.join(p) + <span class="hljs-string">&quot; ^M&quot;</span><br><br>a = <span class="hljs-string">&quot;./os.py&quot;</span><br>delete_func(a)<br></code></pre></td></tr></table></figure><h3 id="使用传入的路径"><a href="#使用传入的路径" class="headerlink" title="使用传入的路径"></a>使用传入的路径</h3><p>使用sys.argv[1]来获取传入的路径：</p><ul><li>首先判断参数是否大于两个。</li><li>判断参数是否是文件或者目录中的一个。</li><li>调用函数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_function</span>(<span class="hljs-params">a</span>):</span><br>    <span class="hljs-keyword">if</span> os.path.isdir(a):<br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span>  os.listdir(a):<br>            <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(a,f)):<br>                delete_function(os.path.join(a,f))<br>            <span class="hljs-keyword">else</span>:<br>                cmd = <span class="hljs-string">&quot;sed -i &#x27;s/\r//&#x27; &quot;</span> + os.path.join(a,f)<br>                <span class="hljs-keyword">if</span> os.system(cmd) == <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;success delete &quot;</span> + os.path.join(a,f) + <span class="hljs-string">&quot; ^M&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        cmd = <span class="hljs-string">&quot;sed -i &#x27;s/\r//&#x27; &quot;</span> + a<br>        <span class="hljs-keyword">if</span> os.system(cmd) == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;success delete &quot;</span> + a + <span class="hljs-string">&quot; ^M&quot;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;please input a path&quot;</span><br>    sys.exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (os.path.isfile(sys.argv[<span class="hljs-number">1</span>]) <span class="hljs-keyword">or</span> os.path.isdir(sys.argv[<span class="hljs-number">1</span>])):<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;please input a dir or file&quot;</span><br><span class="hljs-keyword">else</span>:<br>    delete_function(sys.argv[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是脚本的最终版本了，如果你需要同时处理多个不同的目录，就自己动手再优化一下吧。</p><p>(给个提示：遍历argv然后执行函数)</p>]]></content>
    
    
    <categories>
      
      <category>python脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>python脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-标准库sys</title>
    <link href="/2020/11/13/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E6%A0%87%E5%87%86%E5%BA%93sys/"/>
    <url>/2020/11/13/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E6%A0%87%E5%87%86%E5%BA%93sys/</url>
    
    <content type="html"><![CDATA[<h1 id="标准库sys"><a href="#标准库sys" class="headerlink" title="标准库sys"></a>标准库sys</h1><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>os是Python的标准库之一，所以可以直接导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br></code></pre></td></tr></table></figure><hr><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="argv"><a href="#argv" class="headerlink" title="argv"></a>argv</h3><p>获取命令行参数列表，第一个元素是程序本身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sys.argv:<br>    <span class="hljs-built_in">print</span> i,<br>:~$./sys.py <span class="hljs-number">123</span><br><span class="hljs-comment">#输出：./sys.py 123</span><br></code></pre></td></tr></table></figure><h3 id="exit-n"><a href="#exit-n" class="headerlink" title="exit(n)"></a>exit(n)</h3><p>退出python，exit(0)代表正常退出，其他值会引发异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;hello&quot;</span><br>sys.exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;world&quot;</span> <br><span class="hljs-comment">#输出：hello</span><br></code></pre></td></tr></table></figure><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>path是一个目录列表，供Python从中查找模块。在Python启动时，sys.path根据内建规则和PYTHONPATH变量进行初始化。sys.path的第一个元素通常是个空字符串，表示当前目录。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> sys.path<br><span class="hljs-comment"># 我电脑上的路径比较多，就不贴在这里了</span><br></code></pre></td></tr></table></figure><p>sys.path本质上是一个列表，可以进行append、insert、pop、remove等各种列表相关的操作，但通常都进行append操作，添加自己想要的查找路径。</p><h3 id="sys-stdin、sys-stdout、sys-stderr"><a href="#sys-stdin、sys-stdout、sys-stderr" class="headerlink" title="sys.stdin、sys.stdout、sys.stderr"></a>sys.stdin、sys.stdout、sys.stderr</h3><p>这三个就是标准输入，标准输出和错误流，它们返回的都是一个“文件类型”对象，支持read()、write()和flush()等操作，就像用open()方法打开的文件对象那样！<br>常用的操作是重定向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f_handler = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.log&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <br>sys.stdout = f_handler <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>整个自学python告一段落了，学完这些已经可以开始写脚本了，我会将我后续写的脚本下来，见证进步的过程。<br>感谢看官看到这里，虽然，没人会关注到这个文章（哈哈）。</p>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-标准库os</title>
    <link href="/2020/11/13/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E6%A0%87%E5%87%86%E5%BA%93os/"/>
    <url>/2020/11/13/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E6%A0%87%E5%87%86%E5%BA%93os/</url>
    
    <content type="html"><![CDATA[<h1 id="标准库-OS"><a href="#标准库-OS" class="headerlink" title="标准库:OS"></a>标准库:OS</h1><p>os 顾名思义，就是与操作系统相关的标准库。如：文件，目录，执行系统命令。等。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>os是Python的标准库之一，所以可以直接导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br></code></pre></td></tr></table></figure><hr><h2 id="path子模块"><a href="#path子模块" class="headerlink" title="path子模块"></a>path子模块</h2><p>涉及与磁盘文件操作，最常使用的当属 path 模块了，子模块可以导入直接使用，也可以通过os调用使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">form os <span class="hljs-keyword">import</span> path<br>os.path.方法<br></code></pre></td></tr></table></figure><h3 id="exists-path"><a href="#exists-path" class="headerlink" title="exists(path)"></a>exists(path)</h3><p>判断路径是否存在,如果存在返回true，如果不存在返回false。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span> os.path.exists(<span class="hljs-string">&quot;./&quot;</span>)  <span class="hljs-comment"># true</span><br></code></pre></td></tr></table></figure><h3 id="isfile-path"><a href="#isfile-path" class="headerlink" title="isfile(path)"></a>isfile(path)</h3><p>判断是否为文件，如果是文件返回true，如果不是返回false。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.path.isfile(<span class="hljs-string">&quot;./&quot;</span>)  <span class="hljs-comment"># false</span><br></code></pre></td></tr></table></figure><h3 id="isdir-path"><a href="#isdir-path" class="headerlink" title="isdir(path)"></a>isdir(path)</h3><p>判断是否为目录，如果是目录返回true，如果不是返回false。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.path.isdir(<span class="hljs-string">&quot;./&quot;</span>)  <span class="hljs-comment"># true</span><br></code></pre></td></tr></table></figure><h3 id="basename-path"><a href="#basename-path" class="headerlink" title="basename(path)"></a>basename(path)</h3><p>返回不包含路径的文件名(包含扩展名)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.path.basename(<span class="hljs-string">&quot;./123.py&quot;</span>)  <span class="hljs-comment"># 123.py</span><br></code></pre></td></tr></table></figure><h3 id="dirname-path"><a href="#dirname-path" class="headerlink" title="dirname(path)"></a>dirname(path)</h3><p>返回文件所在目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.path.dirname(<span class="hljs-string">&quot;./123.py&quot;</span>) <span class="hljs-comment"># .</span><br></code></pre></td></tr></table></figure><h3 id="split-path"><a href="#split-path" class="headerlink" title="split(path)"></a>split(path)</h3><p>返回由文件目录和文件名(包含扩展名)组成的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.path.split(<span class="hljs-string">&quot;./123.py&quot;</span>) <span class="hljs-comment"># (&#x27;.&#x27;, &#x27;123.py&#x27;)</span><br></code></pre></td></tr></table></figure><h3 id="splitext-path"><a href="#splitext-path" class="headerlink" title="splitext(path)"></a>splitext(path)</h3><p>返回一个由包含路径的文件名和扩展名组成的目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.path.splitext(<span class="hljs-string">&quot;./123.py&quot;</span>) <span class="hljs-comment"># (&#x27;./123&#x27;, &#x27;.py&#x27;)</span><br></code></pre></td></tr></table></figure><h3 id="join-path-paths"><a href="#join-path-paths" class="headerlink" title="join(path, *paths)"></a>join(path, *paths)</h3><p>将目录名和文件名连接起来，相当于split(path)的反向操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = os.path.split(<span class="hljs-string">&quot;./123.py&quot;</span>)<br><span class="hljs-built_in">print</span> os.path.join(*a)  <span class="hljs-comment"># ./123.py</span><br></code></pre></td></tr></table></figure><h3 id="getsize-path"><a href="#getsize-path" class="headerlink" title="getsize(path)"></a>getsize(path)</h3><p>返回文件大小，以字节为单位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.path.getsize(<span class="hljs-string">&quot;./123.py&quot;</span>)   <span class="hljs-comment">#349</span><br></code></pre></td></tr></table></figure><hr><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="listdir-path"><a href="#listdir-path" class="headerlink" title="listdir(path)"></a>listdir(path)</h3><p>返回目录下所有文件和子目录组成的列表，相当于linux命令’ls’,不包括以’.’、’..’开头的特殊目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.listdir(<span class="hljs-string">&quot;./&quot;</span>)<br><span class="hljs-comment"># [&#x27;base.py&#x27;, &#x27;set.py&#x27;, &#x27;statement1.py&#x27;, &#x27;bool.py&#x27;, &#x27;123.py&#x27;, &#x27;md&#x27;, &#x27;dictionary.py&#x27;, &#x27;delete_M.py&#x27;, &#x27;test.txt&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="mkdir-path"><a href="#mkdir-path" class="headerlink" title="mkdir(path)"></a>mkdir(path)</h3><p>创建一个目录,如果创建的目录存在则会报错，如果上级目录不在也会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">os.mkdir(<span class="hljs-string">&quot;1/2&quot;</span>) <span class="hljs-comment">#报错：1/2目录不存在</span><br>os.mkdir(<span class="hljs-string">&quot;md&quot;</span>) <span class="hljs-comment">#报错：目录已经存在</span><br></code></pre></td></tr></table></figure><h3 id="makedirs-path"><a href="#makedirs-path" class="headerlink" title="makedirs(path)"></a>makedirs(path)</h3><p>更高级的创建目录，如果上级目录不存在则会递归创建目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">os.makedirs(<span class="hljs-string">&quot;1/2&quot;</span>)<br>os.makedirs(<span class="hljs-string">&quot;md&quot;</span>) <span class="hljs-comment">#报错：目录已经存在</span><br></code></pre></td></tr></table></figure><h3 id="rmdir-path"><a href="#rmdir-path" class="headerlink" title="rmdir(path)"></a>rmdir(path)</h3><p>删除目录，只能删除已经存在并且为空的目录，否则报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.rmdir(<span class="hljs-string">&quot;1/2&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="removedirs-path"><a href="#removedirs-path" class="headerlink" title="removedirs(path)"></a>removedirs(path)</h3><p>删除目录，只能删除已经存在并且为空的目录，否则报错。更高级的是删除以后会继续向上删除直到遇到不为空的目录为止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">os.makedirs(<span class="hljs-string">&quot;1/2&quot;</span>)<br>os.removedirs(<span class="hljs-string">&quot;1/2&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="remove-path"><a href="#remove-path" class="headerlink" title="remove(path)"></a>remove(path)</h3><p>删除文件，所给参数必须是文件，否则报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.remove(<span class="hljs-string">&quot;test.txt&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="其他os方法"><a href="#其他os方法" class="headerlink" title="其他os方法"></a>其他os方法</h2><h3 id="getenv-key"><a href="#getenv-key" class="headerlink" title="getenv(key)"></a>getenv(key)</h3><p>返回环境变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.getenv(<span class="hljs-string">&quot;PATH&quot;</span>)<br><span class="hljs-comment"># /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/share:/snap/bin</span><br></code></pre></td></tr></table></figure><h3 id="system-command"><a href="#system-command" class="headerlink" title="system(command)"></a>system(command)</h3><p>在当前进程中，启动子进程，执行命令 command（字符串），主进程会阻塞，直到子进程执行完成，返回0代表执行成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> os.system(<span class="hljs-string">&quot;ls&quot;</span>)   <span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-函数</title>
    <link href="/2020/11/13/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E5%87%BD%E6%95%B0/"/>
    <url>/2020/11/13/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>分别用C和Python各写一个add()函数来类比学习<br>C语言：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(a,b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>Python：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a+b<br></code></pre></td></tr></table></figure><p>通过对比可以看到Python函数的一些特点:</p><ul><li>在声明要建立一个函数的时候，一定要使用def.</li><li>函数名不要和内建函数重复。</li><li>参数列表中可以有参数也可以无参数。</li><li>参数列表后一定要跟冒号。</li><li>函数体要缩进四个空格，结束缩进代表函数结束。</li><li>遇到return 直接返回，可以带返回值也可以不带返回值。</li><li>return 可以省略。</li></ul><hr><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>函数调用基本和C相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a+b<br><br><span class="hljs-built_in">sum</span> = add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">sum</span><br></code></pre></td></tr></table></figure><p>使用函数名加参数的方式实现调用，值得注意的是：</p><ol><li>参数个数需要和函数定义的参数个数相同。</li><li>有返回值的函数才可以作为右值。</li><li>元组也可以作为函数参数，但元组中元素个数需和参数个数相同。</li></ol><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>由于我学Python的目的是写Linux脚本，所以自学Python的语法部分到这里就结束了，接下来会学习os库和sys库，之后的语法用到时再做记录和补充。</p>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-文件</title>
    <link href="/2020/11/10/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E6%96%87%E4%BB%B6/"/>
    <url>/2020/11/10/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>)<br>f.write(<span class="hljs-string">&quot;This is a file&quot;</span>)<br>f.close()<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-built_in">print</span> i<br>f.close()<br></code></pre></td></tr></table></figure><p>open()函数需要两个参数，第一个参数时文件名，第二个是打开方式，打开方式有以下类型：   </p><table><thead><tr><th align="center">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">r</td><td align="left">以读方式打开文件，可读取文件信息。</td></tr><tr><td align="center">w</td><td align="left">以写方式打开文件，可向文件写入信息。如文件存在，则清空该文件，再写入新内容</td></tr><tr><td align="center">a</td><td align="left">以追加模式打开文件（即一打开文件，文件指针自动移到文件末尾），如果文件不存在则创建</td></tr><tr><td align="center">r+</td><td align="left">以读写方式打开文件，可读写文件信息。</td></tr><tr><td align="center">w+</td><td align="left">清除文件内容，然后以读写方式打开文件。</td></tr><tr><td align="center">a+</td><td align="left">以读写方式打开文件，指针指向文件末尾。</td></tr><tr><td align="center">b</td><td align="left">以二进制打开文件，只对windows和Dos有效。</td></tr></tbody></table><hr><h2 id="read-、readline-、readlines"><a href="#read-、readline-、readlines" class="headerlink" title="read()、readline()、readlines()"></a>read()、readline()、readlines()</h2><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p>read()函数如果指定了size参数就读取size长度，否则读取全文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = f.read()<br><span class="hljs-built_in">print</span> txt<br>f.close()<br><span class="hljs-comment">#输出：</span><br><span class="hljs-comment">#This is a file</span><br><span class="hljs-comment">#Hello World!</span><br><span class="hljs-comment">#I am Carl</span><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><p>readline()函数的size参数含义和read()一样，此函数是以行为单位，如果不指定长度每次读取一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = f.readline()<br><span class="hljs-built_in">print</span> txt<br><span class="hljs-comment">#This is a file</span><br>txt = f.readline()<br><span class="hljs-built_in">print</span> txt<br><span class="hljs-comment">#Hello World!</span><br>f.close()<br></code></pre></td></tr></table></figure><h3 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h3><p>readlines()返回的是以行为单位的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = f.readlines()<br><span class="hljs-built_in">print</span> txt<br>f.close()<br><span class="hljs-comment">#输出：[&#x27;This is a file\n&#x27;, &#x27;Hello World!\n&#x27;, &#x27;I am Carl\n&#x27;]</span><br></code></pre></td></tr></table></figure><hr><h2 id="seek"><a href="#seek" class="headerlink" title="seek()"></a>seek()</h2><p>seek()函数是用来控制文件指针以字节为单位进行移动的<br>seek()函数有两个参数offset、whence：</p><ul><li>offset：移动的字节数  </li><li>whence：可选参数，默认值是0代表从文件头向后移动，1是从当前位置向后移动，2是相对文件尾移动</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = f.readline()<br><span class="hljs-built_in">print</span> txt<br><span class="hljs-comment">#This is a file</span><br>f.seek(<span class="hljs-number">0</span>)<br>txt = f.readline()<br><span class="hljs-built_in">print</span> txt<br><span class="hljs-comment">#This is a file</span><br><span class="hljs-built_in">print</span> f.tell()<br><span class="hljs-comment">#15</span><br>f.close()<br></code></pre></td></tr></table></figure><p>tell()函数是获取当前指针位置<br>最后操作完文件记得使用close()函数进行关闭</p>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-语句(3)</title>
    <link href="/2020/11/10/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E8%AF%AD%E5%8F%A5-3/"/>
    <url>/2020/11/10/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E8%AF%AD%E5%8F%A5-3/</url>
    
    <content type="html"><![CDATA[<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="简单的for循环"><a href="#简单的for循环" class="headerlink" title="简单的for循环"></a>简单的for循环</h2><p>for循环的语法和if差不多，条件需要冒号，语句块需要四个空格的缩进：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">hello = <span class="hljs-string">&quot;world&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> hello:<br>    <span class="hljs-built_in">print</span> i,   <span class="hljs-comment">#输出：w o r l d</span><br></code></pre></td></tr></table></figure><p>这个for循环是怎么工作的呢？</p><ol><li>hello这个变量引用的是”world”这个str类型的数据</li><li>变量 i 通过hello找到它所引用的对象”world”,因为str类型的数据属于序列类型，能够进行索引，于是就按照索引顺序，从第一字符开始，依次获得该字符的引用。</li><li>当 i=”w”的时候，执行print i，打印出了字母w，结束之后循环第二次，让 i=”e”，然后执行print i,打印出字母e，如此循环下去，一直到最后一个字符被打印出来，循环自动结束。  </li></ol><p>因为可以也通过使用索引（偏移量），得到序列对象的某个元素。所以，还可以通过下面的循环方式实现同样效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">hello = <span class="hljs-string">&quot;world&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">print</span> a[i],   <span class="hljs-comment">#输出：w o r l d</span><br></code></pre></td></tr></table></figure><p>其工作方式是：</p><ol><li>len(a)得到hello引用的字符串的长度，为5</li><li>range(len(hello),就是range(5),也就是[0, 1, 2, 3, 4],对应这”world”每个字母索引，也可以称之为偏移量。这里应用了一个新的函数range()，关于它的用法，继续阅读，就能看到了。</li><li>for i in range(len(hello)),就相当于for i in [0,1,2,3,4],让i依次等于list中的各个值。当i=0时，打印hello[0]，也就是第一个字符。然后顺序循环下去，直到最后一个i=4为止。</li></ol><ul><li>这种语法由于我也第一次接触，所以直接用的 《零基础自学python》的原文</li></ul><hr><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while比较简单就不多说了，可以通过下面的例子来了解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>number = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>)<br><br>guess = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>    num_input = raw_input(<span class="hljs-string">&quot;please input one integer that is in 1 to 100:&quot;</span>)<br>    guess += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> num_input.isdigit():<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Please input interger.&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(num_input) &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(num_input) &gt;= <span class="hljs-number">100</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;The number should be in 1 to 100.&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> number == <span class="hljs-built_in">int</span>(num_input):<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;OK, you are good.It is only %d, then you successed.&quot;</span> % guess<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">elif</span> number &gt; <span class="hljs-built_in">int</span>(num_input):<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;your number is more less.&quot;</span><br>        <span class="hljs-keyword">elif</span> number &lt; <span class="hljs-built_in">int</span>(num_input):<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;your number is bigger.&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;There is something bad, I will not work&quot;</span><br></code></pre></td></tr></table></figure><p>这个例子是直接抄的原文的，通过这个例子应该对while有了大概的了解：</p><ul><li>只要条件成立就一直运行。</li><li>遇到break，就直接跳出循环。</li><li>遇到continue,就从头开始执行。</li></ul><hr><h2 id="内建函数range-start-stop-step"><a href="#内建函数range-start-stop-step" class="headerlink" title="内建函数range(start,stop[, step])"></a>内建函数range(start,stop[, step])</h2><p>一般形式是range(start, stop[, step])  </p><p>关于range()函数有以下主要注意的地方：</p><ol><li>这个函数可以创建一个数字元素组成的列表。</li><li>这个函数最常用于for循环。</li><li>函数的参数必须是整数，默认从0开始。返回值是类似[start, start + step, start + 2*step, …]的列表。</li><li>step默认值是1。如果不写，就是按照此值。</li><li>如果step是正数，返回list的最最后的值不包含stop值，即start+istep这个值小于stop；如果step是负数，start+istep的值大于stop。</li><li>step不能等于零，如果等于零，就报错。</li></ol><p>参数的含义：</p><ul><li>start：开始数值，默认为0,也就是如果不写这项，就是认为start=0</li><li>stop：结束的数值，必须要写的。</li><li>step：变化的步长，默认是1,也就是不写，就是认为步长为1。坚决不能为0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>)  <span class="hljs-comment">#前三个输出一样含义一样</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>)  <span class="hljs-comment">#开始数值从1开始</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>)  <span class="hljs-comment">#步长为2，也就是输出0,2,4,6,8</span><br></code></pre></td></tr></table></figure><p>如果结束值是负值，那么步进也需要是负值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">9</span>,-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>掌握了range()函数以后,我们可以写一个例程：</p><ul><li>求100以内能被3整除的正整数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#以第一个能被3整除的数开始，步进为3就可以很快的得到</span><br><span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>) <br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="能够用来for的对象"><a href="#能够用来for的对象" class="headerlink" title="能够用来for的对象"></a>能够用来for的对象</h2><p>所有的序列类型对象，都能够用for来循环。比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">name_str = <span class="hljs-string">&quot;carl&quot;</span>   <span class="hljs-comment">#str</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name_str:<br>    <span class="hljs-built_in">print</span> i,<br><br>name_list = <span class="hljs-built_in">list</span>(name_str)  <span class="hljs-comment">#list</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name_list:<br>    <span class="hljs-built_in">print</span> i,<br><br>name_set = <span class="hljs-built_in">set</span>(name_str)    <span class="hljs-comment">#set</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name_set:<br>    <span class="hljs-built_in">print</span> i,<br><br>name_tuple = <span class="hljs-built_in">tuple</span>(name_str)    <span class="hljs-comment">#tuple</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name_tuple:<br>    <span class="hljs-built_in">print</span> i,<br><br>name_dic = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;carl&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">22</span>&#125; <span class="hljs-comment">#dict</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name_str:<br>    <span class="hljs-built_in">print</span> i,name_dic[i],<br></code></pre></td></tr></table></figure><ul><li>值得注意的是字典获取的是key的值</li></ul><hr><h2 id="并行迭代"><a href="#并行迭代" class="headerlink" title="并行迭代"></a>并行迭代</h2><p>计算两个列表a = [1,2,3,4,5], b = [9,8,7,6,5]的和，这就是并行迭代  </p><p>我们可以这么做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>b = [<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]<br>c = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    c.append(a[i] + b[i])<br><span class="hljs-built_in">print</span> c<br></code></pre></td></tr></table></figure><p>python有更好的方法实现这一功能，这就是zip()函数</p><hr><h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><p>函数原型是:</p><ul><li>zip(seq1 [, seq2 […]])  </li></ul><p>seq1, seq2分别代表了序列类型的数据,我们可以试一下这个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;carl&quot;</span><br>b = <span class="hljs-string">&quot;name&quot;</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">zip</span>(a,b)<br><span class="hljs-comment">#输出：[(&#x27;c&#x27;, &#x27;n&#x27;), (&#x27;a&#x27;, &#x27;a&#x27;), (&#x27;r&#x27;, &#x27;m&#x27;), (&#x27;l&#x27;, &#x27;e&#x27;)]</span><br></code></pre></td></tr></table></figure><p>如果两个序列长度不同则以最短的为准</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">zip</span>(a,b)<br><span class="hljs-comment">#输出：[(1, 1), (2, 2), (3, 3)]</span><br></code></pre></td></tr></table></figure><p>如果参数只有一个序列是会是以下的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">zip</span>(a)<br><span class="hljs-comment">#输出：[(1,), (2,), (3,), (4,), (5,)]</span><br></code></pre></td></tr></table></figure><p>让我们用zip()来解决最开始的问题</p><ul><li>计算两个列表a = [1,2,3,4,5], b = [9,8,7,6,5]的和<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>b = [<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]<br>c = []<br><span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a,b):<br>    c.append(x+y)<br><span class="hljs-built_in">print</span> c<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="list解析"><a href="#list解析" class="headerlink" title="list解析"></a>list解析</h2><p>先看下面的例子，这个例子是想得到1到9的每个整数的平方，并且将结果放在list中打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    a.append(i*i)<br><span class="hljs-built_in">print</span> a<br></code></pre></td></tr></table></figure><p>python其实还可以这么做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span> a<br></code></pre></td></tr></table></figure><p>在高级一点去除列表中字符串的前后空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mybag = [<span class="hljs-string">&#x27; glass&#x27;</span>,<span class="hljs-string">&#x27; apple&#x27;</span>,<span class="hljs-string">&#x27;green leaf &#x27;</span>]<br>mybag = [i.strip() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mybag]<br><span class="hljs-built_in">print</span> mybag<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-语句(2)</title>
    <link href="/2020/11/10/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E8%AF%AD%E5%8F%A5-2/"/>
    <url>/2020/11/10/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E8%AF%AD%E5%8F%A5-2/</url>
    
    <content type="html"><![CDATA[<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>if 的意思就是如果，这是python中构成条件语句的关键词，用它发起一个条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">9</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;a is more than 9&quot;</span><br></code></pre></td></tr></table></figure><p>在条件语句中，如果条件成立则执行下面的语句。<br>下面一行语句print 要有四个空格的缩进。这是python的特点，称之为语句块。</p><hr><h2 id="if-else-elif"><a href="#if-else-elif" class="headerlink" title="if/else/elif"></a>if/else/elif</h2><p>在程序中只有一个条件往往是不够的，有时我们需要多个条件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">int</span>(raw_input(<span class="hljs-string">&quot;please input a num:&quot;</span>))<br><span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">9</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;a is more than 9&quot;</span><br><span class="hljs-keyword">elif</span> a &lt; <span class="hljs-number">9</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;a is less than 9&quot;</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;a is 9&quot;</span><br></code></pre></td></tr></table></figure><p>elif用于多个条件时使用，可以没有。另外，也可以只有if，而没有else。  </p><hr><h2 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h2><p>三元操作，是条件语句中比较简练的一种赋值方式，它的模样是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">int</span>(raw_input(<span class="hljs-string">&quot;please input a num:&quot;</span>))<br>b = <span class="hljs-string">&quot;carl&quot;</span> <span class="hljs-keyword">if</span> a&gt;<span class="hljs-number">5</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;love&quot;</span><br><span class="hljs-built_in">print</span> b<br></code></pre></td></tr></table></figure><p>总结一下：A = Y if X else Z<br>什么意思，结合前面的例子，可以看出：  </p><ul><li>如果X为真，那么就执行A=Y  </li><li>如果X为假，就执行A=Z</li></ul>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-语句(1)</title>
    <link href="/2020/11/09/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E8%AF%AD%E5%8F%A5-1/"/>
    <url>/2020/11/09/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E8%AF%AD%E5%8F%A5-1/</url>
    
    <content type="html"><![CDATA[<h1 id="语句-1"><a href="#语句-1" class="headerlink" title="语句(1)"></a>语句(1)</h1><p>一般所有高级语言，都包含如下语句，Python也不例外：</p><p>循环语句:容许一些语句反复运行数次。循环可依据一个默认的数目来决定运行这些语句的次数；或反复运行它们，直至某些条件改变。 </p><p>条件语句:容许仅当某些条件成立时才运行某个区块。否则，这个区块中的语句会略去，然后按区块后的语句继续运行。   </p><p>无条件分支语句容许运行顺序转移到程序的其他部分之中。包括跳跃（在很多语言中称为Goto）、副程序和Procedure等。     </p><hr><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>在python2.x中，print是一个语句，但是在python3.x中它是一个函数了  </p><p>print自带换行，print ,不会换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;hello, world&quot;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;hello&quot;</span>,<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;world&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>用import引入模块的方法，是python编程经常用到的。引用方法有如下几种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-built_in">print</span> math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>这是常用的一种方式，而且非常明确，math.pow(3,2)就明确显示了，pow()函数是math模块里的。可以说这是一种可读性非常好的引用方式，并且不同模块的同名函数不会产生冲突。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> <span class="hljs-built_in">pow</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>这种方法就有点偷懒了，不过也不难理解，从字面意思就知道pow()函数来自于math模块。在后续使用的时候，只需要直接使用pow()即可，不需要在前面写上模块名称了。这种引用方法，比较适合于引入模块较少的时候。如果引入模块多了，可读性就下降了，会不知道那个函数来自那个模块。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> <span class="hljs-built_in">pow</span> <span class="hljs-keyword">as</span> pingfang<br><span class="hljs-built_in">print</span> pingfang(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>这是在前面那种方式基础上的发展，将从某个模块引入的函数重命名，比如讲pow充命名为pingfang，然后使用pingfang()就相当于在使用pow()了。   </p><p>当然了可以一次引入多个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> <span class="hljs-built_in">pow</span>, pi<br></code></pre></td></tr></table></figure><p>也可以一次全部引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure><p>这样会使代码的可读性变得更低，仅适用于模块中函数较少，重复调用频繁的情况</p><hr><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>除了 a = 1 这种简单的赋值语句还有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y, z = <span class="hljs-number">1</span>, <span class="hljs-string">&quot;python&quot;</span>, [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>]<br><span class="hljs-built_in">print</span> x<br><span class="hljs-built_in">print</span> y<br><span class="hljs-built_in">print</span> z<br></code></pre></td></tr></table></figure><p>除了这种一一对应赋值，还可以将一些值赋给一个变量，还记得元组么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tu = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">print</span> tu<br></code></pre></td></tr></table></figure><p>python还有更智能的操作，交换两个变量的值，C是这么做的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">int</span> temp;<br><br>temp = a;<br>a = b;<br>b = temp;<br></code></pre></td></tr></table></figure><p>而python只需要：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = <span class="hljs-number">10</span>, <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span> a, b<br>a, b = b, a<br><span class="hljs-built_in">print</span> a, b<br></code></pre></td></tr></table></figure><p>还有一种链式赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = b = <span class="hljs-string">&quot;hello world!&quot;</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">id</span>(a), <span class="hljs-built_in">id</span>(b)<br><span class="hljs-built_in">print</span> a <span class="hljs-keyword">is</span> b    <span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>链式赋值对两个变量同时赋相同的值，但是地址一样，指向的是同一个对象<br>is可以判断两个变量是否指向同一个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;hello world!&quot;</span><br>b = a<br><span class="hljs-built_in">print</span> a <span class="hljs-keyword">is</span> b    <span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>这种写法和上面是等效的但是下面这种就不一样了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;hello world!&quot;</span><br>b = <span class="hljs-string">&quot;hello world!&quot;</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">id</span>(a), <span class="hljs-built_in">id</span>(b)<br><span class="hljs-built_in">print</span> a <span class="hljs-keyword">is</span> b    <span class="hljs-comment">#False</span><br></code></pre></td></tr></table></figure><p>虽然a和b的值还是一样的但是他们指向的对象不同了  </p><p>最后介绍一下增量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">9</span><br>a += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span> a    <span class="hljs-comment">#10</span><br><br>b = <span class="hljs-string">&quot;pyth&quot;</span><br>b += <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-built_in">print</span> b    <span class="hljs-comment">#&quot;python&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-基本数据结构(3)</title>
    <link href="/2020/11/09/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3/"/>
    <url>/2020/11/09/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3/</url>
    
    <content type="html"><![CDATA[<h1 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>在之前学习的数据类型中：    </p><p>能够索引的，如list/str，其中的元素可以重复<br>可变的，如list/dict，即其中的元素/键值对可以原地修改<br>不可变的，如str/int，即不能进行原地修改<br>无索引序列的，如dict，即其中的元素（键值对）没有排列顺序    </p><p>现在要介绍另外一种类型的数据，英文是set，翻译过来叫做“集合”。它的特点是：有的可变，有的不可变；元素无次序，不可重复。   </p><hr><h2 id="创建set"><a href="#创建set" class="headerlink" title="创建set"></a>创建set</h2><p>set是无序的，不可重复，可以原处修改的数据类型</p><h3 id="使用set创建"><a href="#使用set创建" class="headerlink" title="使用set创建"></a>使用set创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;carll&quot;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set1 is &quot;</span> + <span class="hljs-built_in">str</span>(set1)<br></code></pre></td></tr></table></figure><p>通过set创建，’l’只有一个，并且元素顺序被打乱  </p><h3 id="使用frozenset创建"><a href="#使用frozenset创建" class="headerlink" title="使用frozenset创建"></a>使用frozenset创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fset = <span class="hljs-built_in">frozenset</span>(<span class="hljs-string">&quot;carl&quot;</span>)<br><span class="hljs-built_in">print</span> fset<br><span class="hljs-comment">#fset.add(&quot;hello&quot;)  #报错，不可修改所以没有add方法</span><br></code></pre></td></tr></table></figure><p>set 创建的集合是可以原处修改的<br>frozenset 创建的集合是不可以原处修改的  </p><h3 id="使用-“-”-创建"><a href="#使用-“-”-创建" class="headerlink" title="使用 “{}” 创建"></a>使用 “{}” 创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">set2 = &#123;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&quot;!&quot;</span>,<span class="hljs-string">&quot;!&quot;</span>&#125;<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set2 is &quot;</span> + <span class="hljs-built_in">str</span>(set2)<br></code></pre></td></tr></table></figure><p>使用{}创建，不建议使用，python有时会分不清是set还是dict</p><h3 id="集合和列表装换"><a href="#集合和列表装换" class="headerlink" title="集合和列表装换"></a>集合和列表装换</h3><p>list() 和 set() 可以实现两种数据互相转换    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">alis = <span class="hljs-built_in">list</span>(set1)<br>alis.append(<span class="hljs-string">&quot;l&quot;</span>)<br><span class="hljs-built_in">print</span> alis<br>set3 = <span class="hljs-built_in">set</span>(alis)<br><span class="hljs-built_in">print</span> set3<br></code></pre></td></tr></table></figure><p>可以发现，转换成集合以后，就没有重复的元素了</p><hr><h2 id="集合的方法"><a href="#集合的方法" class="headerlink" title="集合的方法"></a>集合的方法</h2><h3 id="增加-add、uodate"><a href="#增加-add、uodate" class="headerlink" title="增加(add、uodate)"></a>增加(add、uodate)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">set3.add(<span class="hljs-string">&quot;hello&quot;</span>)  <span class="hljs-comment">#增加一个元素，原处修改</span><br><span class="hljs-built_in">print</span> set3<br>set3.update(set2)   <span class="hljs-comment">#将set2合并到set3中</span><br><span class="hljs-built_in">print</span> set3<br></code></pre></td></tr></table></figure><p>add添加一个元素<br>update合并一个集合  </p><h3 id="删除-pop、remove、discard"><a href="#删除-pop、remove、discard" class="headerlink" title="删除(pop、remove、discard)"></a>删除(pop、remove、discard)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> set3.pop()<br><span class="hljs-built_in">print</span> set3.remove(<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-built_in">print</span> set3<br><span class="hljs-built_in">print</span> set3.discard(<span class="hljs-string">&quot;world&quot;</span>)<br><span class="hljs-built_in">print</span> set3<br></code></pre></td></tr></table></figure><p>pop,任意删除并返回删除的元素，不能指定元素，set为空将报错   </p><p>remove,返回None证明remove无返回 如果元素不存在则报错  </p><p>discard,返回None证明discard无返回，如果元素存在就删除，如果不在就什么也不做    </p><h3 id="清空-clear"><a href="#清空-clear" class="headerlink" title="清空(clear)"></a>清空(clear)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">set3.clear()<br><span class="hljs-built_in">print</span> set3<br></code></pre></td></tr></table></figure><p>clear,清空集合  </p><hr><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><h3 id="判断元素是否属于集合-in"><a href="#判断元素是否属于集合-in" class="headerlink" title="判断元素是否属于集合(in)"></a>判断元素是否属于集合(in)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;c in fset?\t&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-keyword">in</span> fset)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;d in fset?\t&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;d&quot;</span> <span class="hljs-keyword">in</span> fset)<br></code></pre></td></tr></table></figure><h3 id="判断是否为子集或超集-lt-、issubset-gt-、issuperset"><a href="#判断是否为子集或超集-lt-、issubset-gt-、issuperset" class="headerlink" title="判断是否为子集或超集(&lt;、issubset;&gt;、issuperset)"></a>判断是否为子集或超集(&lt;、issubset;&gt;、issuperset)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set3 是 fset的子集?\t&quot;</span> + <span class="hljs-built_in">str</span>(set3 &lt; fset)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set3 是 fset的子集?\t&quot;</span> + <span class="hljs-built_in">str</span>(set3.issubset(fset))<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set3 是 fset的超集?\t&quot;</span> + <span class="hljs-built_in">str</span>(set3 &gt; fset)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set3 是 fset的超集?\t&quot;</span> + <span class="hljs-built_in">str</span>(set3.issuperset(fset))<br>```     <br><br><span class="hljs-comment">### 判断集合元素是否一样(==、!=)</span><br>```python<br>set3.add(<span class="hljs-string">&quot;a&quot;</span>)<br>set3.add(<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set3 == fset?\t&quot;</span> + <span class="hljs-built_in">str</span>(set3 == fset)<br>set3.add(<span class="hljs-string">&quot;l&quot;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set3 != fset?\t&quot;</span> + <span class="hljs-built_in">str</span>(set3 != fset)<br>```    <br><br><span class="hljs-comment">### 两集合的并集(|、union)</span><br>```python<br>set4 = set3 | set2<br><span class="hljs-built_in">print</span> set4<br>set4.clear()<br>set4 = set3.union(set1)<br><span class="hljs-built_in">print</span> set4<br></code></pre></td></tr></table></figure><h3 id="两集合的交集-amp-、intersection"><a href="#两集合的交集-amp-、intersection" class="headerlink" title="两集合的交集(&amp;、intersection)"></a>两集合的交集(&amp;、intersection)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> set4 &amp; set3<br><span class="hljs-built_in">print</span> set4.intersection(set3)<br></code></pre></td></tr></table></figure><h3 id="差-、difference"><a href="#差-、difference" class="headerlink" title="差(-、difference)"></a>差(-、difference)</h3><p>前集合相对后集合不同的地方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> set2 - set4<br><span class="hljs-built_in">print</span> set2.difference(set4)<br></code></pre></td></tr></table></figure><h3 id="对称差-symmetric-difference"><a href="#对称差-symmetric-difference" class="headerlink" title="对称差(symmetric_difference)"></a>对称差(symmetric_difference)</h3><p>并集之外的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set3 is\t&quot;</span> + <span class="hljs-built_in">str</span>(set3)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;set2 is\t&quot;</span> + <span class="hljs-built_in">str</span>(set2)<br><span class="hljs-built_in">print</span> set3.symmetric_difference(set2)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-基本数据结构(2)</title>
    <link href="/2020/11/09/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2/"/>
    <url>/2020/11/09/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2/</url>
    
    <content type="html"><![CDATA[<h1 id="字典-dirc"><a href="#字典-dirc" class="headerlink" title="字典(dirc)"></a>字典(dirc)</h1><p>提到字典，不由的让我想起《新华字典》，上小学的时候几乎人手一本，当我们查字典的时候，可以按照拼音、偏旁和笔画来找到对应的汉字，python中的字典也是一样的，我们可以通过字典的key值查到字典的value，key和value组合起来就叫键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">mydic = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Carl&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">22</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;Chengdu&quot;</span>&#125;<br><span class="hljs-built_in">print</span> mydic<br></code></pre></td></tr></table></figure><p>上述的”name”就叫做key，”Carl”叫做value，组合起来的”name”:”Carl”就叫键值对  </p><hr><h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>创建一个空的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">mydic = &#123;&#125;<br><span class="hljs-built_in">print</span> mydic<br></code></pre></td></tr></table></figure><p>创建有内容的字典    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">mydic = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Carl&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">22</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;Chengdu&quot;</span>&#125;<br><span class="hljs-built_in">print</span> mydic<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>利用元组构建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name = ([<span class="hljs-string">&quot;first&quot;</span>,<span class="hljs-string">&quot;Google&quot;</span>],[<span class="hljs-string">&quot;second&quot;</span>,<span class="hljs-string">&quot;Yahoo&quot;</span>])<br>website = <span class="hljs-built_in">dict</span>(name)<br><span class="hljs-built_in">print</span> websit<br></code></pre></td></tr></table></figure><p>或者是这样创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">websit = <span class="hljs-built_in">dict</span>(first = <span class="hljs-string">&quot;Google&quot;</span>,second = <span class="hljs-string">&quot;Yahoo&quot;</span>)<br><span class="hljs-built_in">print</span> websit<br></code></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>此方法不同于上面，需要用到fromkeys</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">website = &#123;&#125;.fromkeys((<span class="hljs-string">&quot;third&quot;</span>,<span class="hljs-string">&quot;forth&quot;</span>),<span class="hljs-string">&quot;facebook&quot;</span>)<br><span class="hljs-built_in">print</span> website<br></code></pre></td></tr></table></figure><p>注意：此方法将生成一个新的字典</p><hr><h2 id="简单的添加、删除、判断-、del、in"><a href="#简单的添加、删除、判断-、del、in" class="headerlink" title="简单的添加、删除、判断(=、del、in)"></a>简单的添加、删除、判断(=、del、in)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mydic[<span class="hljs-string">&quot;like&quot;</span>] = <span class="hljs-string">&quot;music&quot;</span> <span class="hljs-comment">#赋值/添加键值对</span><br><span class="hljs-built_in">print</span> mydic<br><span class="hljs-keyword">del</span> mydic[<span class="hljs-string">&quot;like&quot;</span>]   <span class="hljs-comment">#del 删除键值对</span><br><span class="hljs-built_in">print</span> mydic<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\&quot;like\&quot; in mydic:\t&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;like&quot;</span> <span class="hljs-keyword">in</span> mydic)<br></code></pre></td></tr></table></figure><p>注意：mydic[“like”] = “music” 如果key值存在则改变对应的value，如果不存在则添加此键值对到字典中    </p><p>in 判断是否存在键值对，存在返回True，否则返回Flase    </p><hr><h2 id="使用方法添加键值对-update"><a href="#使用方法添加键值对-update" class="headerlink" title="使用方法添加键值对(update)"></a>使用方法添加键值对(update)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">mydic.update([(<span class="hljs-string">&quot;pet&quot;</span>,<span class="hljs-string">&quot;dog&quot;</span>)])<br><span class="hljs-built_in">print</span> mydic<br></code></pre></td></tr></table></figure><p>update的参数可以是列表元组，也可以是一个字典   </p><hr><h2 id="使用方法删除键值对-pop、popitem"><a href="#使用方法删除键值对-pop、popitem" class="headerlink" title="使用方法删除键值对(pop、popitem)"></a>使用方法删除键值对(pop、popitem)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> mydic.pop(<span class="hljs-string">&quot;pet&quot;</span>)<br><span class="hljs-built_in">print</span> mydic<br><span class="hljs-built_in">print</span> mydic.popitem() <br><span class="hljs-built_in">print</span> mydic<br></code></pre></td></tr></table></figure><p>pop(key)删除键值对 如果key不存在则会报错，返回删除的value   </p><p>popitem()不加参数，随机删除一个并将被删除的value返回,如果字典为空则报错   </p><hr><h2 id="使用方法获取key对应的value"><a href="#使用方法获取key对应的value" class="headerlink" title="使用方法获取key对应的value"></a>使用方法获取key对应的value</h2><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> mydic.get(<span class="hljs-string">&quot;like&quot;</span>)<br><span class="hljs-built_in">print</span> mydic.get(<span class="hljs-string">&quot;dislike&quot;</span>,<span class="hljs-string">&quot;English&quot;</span>)<br><span class="hljs-built_in">print</span> mydic[<span class="hljs-string">&quot;like&quot;</span>]<br></code></pre></td></tr></table></figure><p>get只有一个key的参数，如果这个key存在则返回对应的value，如果不存在返回None</p><p>get包含两个参数第一个是key，第二个是value，如果key存在返回对应的value，如果不存在则返回第二个参数</p><p>第三种数组形式的获取，如果不存在则报错  </p><h3 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault"></a>setdefault</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> mydic.setdefault(<span class="hljs-string">&quot;like&quot;</span>)<br><span class="hljs-built_in">print</span> mydic.setdefault(<span class="hljs-string">&quot;pet&quot;</span>)<br><span class="hljs-built_in">print</span> mydic<br><span class="hljs-built_in">print</span> mydic.setdefault(<span class="hljs-string">&quot;joy&quot;</span>,<span class="hljs-string">&quot;switch&quot;</span>)<br><span class="hljs-built_in">print</span> mydic<br></code></pre></td></tr></table></figure><p>setdefault单参数和get一样，key不存在返回None，但是setdefault会将key:None添加到原字典中 </p><p>setdefault两个参数时，如果key不存在则返回对二个参数，同时将这对键值对添加到原字典中  </p><hr><h2 id="使用方法判断key是否存在"><a href="#使用方法判断key是否存在" class="headerlink" title="使用方法判断key是否存在"></a>使用方法判断key是否存在</h2><h3 id="has-key"><a href="#has-key" class="headerlink" title="has_key"></a>has_key</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> mydic.has_key(<span class="hljs-string">&quot;pet&quot;</span>)<br><span class="hljs-built_in">print</span> mydic.has_key(<span class="hljs-string">&quot;dislike&quot;</span>)<br></code></pre></td></tr></table></figure><p>存在返回True，否则返回False     </p><hr><h2 id="字典的复制"><a href="#字典的复制" class="headerlink" title="字典的复制"></a>字典的复制</h2><h3 id="“-”和copy"><a href="#“-”和copy" class="headerlink" title="“=”和copy"></a>“=”和copy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-built_in">id</span>(mydic)                 <br>yourdic = mydic<br><span class="hljs-built_in">print</span> yourdic                 <br><span class="hljs-built_in">print</span> <span class="hljs-built_in">id</span>(yourdic)<br>herdic = mydic.copy()    <br><span class="hljs-built_in">print</span> herdic<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">id</span>(herdic)<br></code></pre></td></tr></table></figure><p>“=”是假复制，地址不变<br>“copy”是真复制，地址改变<br>注：id()是查看变量地址的方法    </p><h3 id="copy和deepcopy"><a href="#copy和deepcopy" class="headerlink" title="copy和deepcopy"></a>copy和deepcopy</h3><p>copy() 是浅复制，只能复制基础数据类型(int,str等),对于复杂的复合类型(list,dict等)只是复制了它们的引用，具体看下面的例子:   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">mydic[<span class="hljs-string">&quot;like&quot;</span>] = [<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;c++&quot;</span>,<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>]    <span class="hljs-comment">#list作为value</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">id</span>(mydic)<br><span class="hljs-built_in">print</span> mydic<br>hisdic = mydic.copy()           <span class="hljs-comment">#copy mydic</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">id</span>(hisdic)<br><span class="hljs-built_in">print</span> hisdic<br>hisdic[<span class="hljs-string">&quot;like&quot;</span>].remove(<span class="hljs-string">&quot;java&quot;</span>)   <span class="hljs-comment">#delete a value of list</span><br><span class="hljs-built_in">print</span> mydic<br><span class="hljs-built_in">print</span> hisdic<br></code></pre></td></tr></table></figure><p>可以看到改变了原字典，copy得到的字典也发生了变化    </p><p>要完全拷贝的话需要用到 deepcopy，这个方法需要额外添加copy库:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>deepcopydic = copy.deepcopy(mydic)<br><span class="hljs-built_in">print</span> deepcopydic<br>mydic[<span class="hljs-string">&quot;like&quot;</span>].insert(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;java&quot;</span>)<br><span class="hljs-built_in">print</span> mydic<br><span class="hljs-built_in">print</span> deepcopydic<br></code></pre></td></tr></table></figure><hr><h2 id="清空字典的三种方式"><a href="#清空字典的三种方式" class="headerlink" title="清空字典的三种方式"></a>清空字典的三种方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">deepcopydic.clear()<br><span class="hljs-built_in">print</span> deepcopydic<br>hisdic = &#123;&#125;<br><span class="hljs-built_in">print</span> hisdic<br><span class="hljs-keyword">del</span> mydic<br><span class="hljs-built_in">print</span> mydic<br></code></pre></td></tr></table></figure><p>clear()将字典清空，内存还在占用内容为空<br>del 将内存释放<br>“= {}” 指向一个新的内容为空的字典的地址，之前的还在成为没人指向的垃圾，python有自动回收垃圾功能不用担心</p>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自学Python-基本数据结构(1)</title>
    <link href="/2020/11/08/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/"/>
    <url>/2020/11/08/%E8%87%AA%E5%AD%A6python/%E8%87%AA%E5%AD%A6Python-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/</url>
    
    <content type="html"><![CDATA[<h1 id="基本数据结构-1"><a href="#基本数据结构-1" class="headerlink" title="基本数据结构(1)"></a>基本数据结构(1)</h1><p>欢迎来到我的blog。<br>由于工作需要和个人爱好，我需要学习一门脚本语言，于是我选择了自学Python，此系列作为我对于《零基础自学python》这个教程的学习记录.   </p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>要问世界上出现的第一句话是什么，那当然是 “Hello world!”了。   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;hello world!&quot;</span><br></code></pre></td></tr></table></figure><p>就像shell脚本一样，python需要在第一行指定解析器：#!/usr/bin/python。<br>#coding:utf-8 则表明了代码的编码方式。<br>print大家肯定就更不陌生了，毕竟C是大学必修课（手动滑稽）。<br>大家也一定发现了，和C的不同之处还有：每个语句的结尾没有分号。   </p><hr><h2 id="整型、浮点型-int、float"><a href="#整型、浮点型-int、float" class="headerlink" title="整型、浮点型(int、float)"></a>整型、浮点型(int、float)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">2</span><br>b = <span class="hljs-number">2.0</span><br><span class="hljs-built_in">print</span> a+b<br></code></pre></td></tr></table></figure><p>这个我感觉没啥好说的，相比C语言，在赋值时不用指定类型了，更加智能了，即使是过长的字符串也能自动识别为long long 类型，值得说的一点是在做运算时只要其中有一个是浮点型，则结果也是浮点型。   </p><hr><h2 id="字符串、列表-string、list"><a href="#字符串、列表-string、list" class="headerlink" title="字符串、列表(string、list)"></a>字符串、列表(string、list)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;www.googel.com&quot;</span><br><span class="hljs-built_in">print</span> a<br>alist = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>]<br><span class="hljs-built_in">print</span> alist<br></code></pre></td></tr></table></figure><p>字符串和C一样都是用引号括起来，不同于C的是你可以选择单引号也可以选择双引号。<br>列表中的元素可以是各种不同的数据类型，并且是有序的可以增删改查的。   </p><h3 id="字符串的一对方法"><a href="#字符串的一对方法" class="headerlink" title="字符串的一对方法"></a>字符串的一对方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">b = <span class="hljs-string">&quot;Www.googel.com&quot;</span><br>c = b.split(<span class="hljs-string">&quot;.&quot;</span>)<br><span class="hljs-built_in">print</span> c<br>d = <span class="hljs-string">&quot;.&quot;</span>.join(c)<br><span class="hljs-built_in">print</span> d<br></code></pre></td></tr></table></figure><p>split：以某个字符将字符串拆分。<br>join：以某个字符将列表连接成字符串。<br>这两个方法大家运行就能看到效果，记住直接调用就好。   </p><h3 id="列表的一些方法"><a href="#列表的一些方法" class="headerlink" title="列表的一些方法"></a>列表的一些方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">alist.extend(<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-comment">#alist.apend(&quot;hello&quot;)</span><br><span class="hljs-built_in">print</span> alist<br><br><span class="hljs-built_in">print</span> alist.count(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span> alist.index(<span class="hljs-number">1</span>)<br>alist.insert(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span> alist<br>alist.reverse()<br><span class="hljs-built_in">print</span> alist<br><br>alist.sort()<br><span class="hljs-built_in">print</span> alist<br></code></pre></td></tr></table></figure><p>extend和apend都是向列表中添加，不同的是extend是按元素添加，apend是整体添加，什么意思呢？大家运行一下就能看出差别。我认为学习尤其是编程语言的学习，只有自己动手敲出来的才会记忆深刻。   </p><p>count和index都是查找列表中的元素，count是按内容查找，index是按索引查找。count是查找列表中有没有这个元素，index则是查找列表中的第n个元素。   </p><p>insert，正如它的名字那样，作用是向列表中的某个位置添加某个元素，所以他需要两个参数，第一个参数指定位置，第二个参数指定要添加的元素。   </p><p>reverse是将列表中的元素反向重新排列，sort则是重新排列列表。   </p><hr><h2 id="元组-tupel"><a href="#元组-tupel" class="headerlink" title="元组(tupel)"></a>元组(tupel)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tu = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">print</span> tu<br></code></pre></td></tr></table></figure><p>这里简单说一下元组和列表的区别：<br>Tuple 比 list 操作速度快。如果您定义了一个值的常量集，并且唯一要用它做的是不断地遍历它，请使用 tuple 代替 list。    </p><p>如果对不需要修改的数据进行 “写保护”，可以使代码更安全。使用 tuple 而不是 list 如同拥有一个隐含的 assert 语句，说明这一数据是常量。如果必须要改变这些值，则需要执行 tuple 到 list 的转换 (需要使用一个特殊的函数)。    </p><p>Tuples 可以在 dictionary（字典，后面要讲述） 中被用做 key，但是 list 不行。Dictionary key 必须是不可变的。Tuple 本身是不可改变的，但是如果您有一个 list 的 tuple，那就认为是可变的了，用做 dictionary key 就是不安全的。只有字符串、整数或其它对 dictionary 安全的tuple 才可以用作 dictionary key。   </p><p>Tuples 可以用在字符串格式化中。   </p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>第一次写blog，也是第一次用Markdown，有很多不足，后续会继续优化和更新文章。  </p><p>只有迈出第一步，才会慢慢进步，共勉。</p>]]></content>
    
    
    <categories>
      
      <category>自学Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自学python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
