<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Carl������վ</title>
  
  <subtitle>ѧϰ��¼</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-21T13:39:58.304Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Carl Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一个轮子MyString</title>
    <link href="http://example.com/2021/07/21/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%BD%AE%E5%AD%90MyString/"/>
    <id>http://example.com/2021/07/21/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%BD%AE%E5%AD%90MyString/</id>
    <published>2021-07-21T13:38:41.000Z</published>
    <updated>2021-07-21T13:39:58.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyString"><a href="#MyString" class="headerlink" title="MyString"></a>MyString</h1><p>本篇将自己重新实现&lt;string.h&gt;中常用的一些函数，虽然strlen()、strcmp()、strcmp()以及不存在的startwith()和endwith()已经在开篇写过了，但还是在此做一个整理</p><h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h2><p>获取字符串的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;<span class="keyword">while</span> (str[i] != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strcmp-和strncmp"><a href="#strcmp-和strncmp" class="headerlink" title="strcmp()和strncmp()"></a>strcmp()和strncmp()</h2><p>字符串匹配函数，如果相同则返回0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">匹配前size个字符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strncmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = my_strlen (str1);</span><br><span class="line">    str2_len = my_strlen (str2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == str1_len &amp;&amp; <span class="number">0</span> == str2_len) || <span class="number">0</span> == str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1_len &lt; size || str2_len &lt; size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str1[i] == str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str1[i] &gt; str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">完全匹配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = my_strlen (str1);</span><br><span class="line">    str2_len = my_strlen (str2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == str1_len &amp;&amp; <span class="number">0</span> == str2_len) || <span class="number">0</span> == str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1_len &lt; str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str2_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str1[i] == str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str1[i] &gt; str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strcat-和strncat"><a href="#strcat-和strncat" class="headerlink" title="strcat()和strncat()"></a>strcat()和strncat()</h2><p>字符串连接函数，将第二个字符串追加到第一个字符串结尾</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将str2完整的追加到str1的末尾</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strcat</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = my_strlen (str1);</span><br><span class="line">    str2_len = my_strlen (str2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str2_len &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == str2_len )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; str2_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str1[str1_len + i] = str2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1[str1_len + i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将str2的前length个字符追加到str1的末尾</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strncat</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">const</span> <span class="keyword">char</span> *str2,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = my_strlen (str1);</span><br><span class="line">    str2_len = my_strlen (str2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str2_len &lt;= <span class="number">0</span> || str2_len &lt; length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str1[str1_len + i] = str2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1[str1_len + i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strcpy-和strncpy"><a href="#strcpy-和strncpy" class="headerlink" title="strcpy()和strncpy()"></a>strcpy()和strncpy()</h2><p>字符串拷贝函数，将第二个字符串拷贝到第一个字符串中，我给字符串末尾加了结束符，防止出现一些异常</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将str2拷贝到str1中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strcpy</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str2_len = my_strlen (str2);</span><br><span class="line">    <span class="keyword">if</span> (str2_len &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == str2_len )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i&lt; str2_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str1[i] = str2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    str1[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将str2的前length个字符拷贝到str1中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strncpy</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">const</span> <span class="keyword">char</span> *str2,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str2_len = my_strlen (str2);</span><br><span class="line">    <span class="keyword">if</span> (str2_len &lt; <span class="number">0</span> || str2_len &lt; length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == str2_len )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i&lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str1[i] = str2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    str1[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strstr-和strnstr"><a href="#strstr-和strnstr" class="headerlink" title="strstr()和strnstr()"></a>strstr()和strnstr()</h2><p>字符串查找函数，查找在第一个字符串中出现第二个字符串的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查找在str1中出现str2的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_strstr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *tmp = (<span class="keyword">char</span>*)str1;</span><br><span class="line">    <span class="keyword">char</span> *s1, *s2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str2)</span><br><span class="line">        <span class="keyword">return</span>((<span class="keyword">char</span> *)str1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        s1 = tmp;</span><br><span class="line">        s2 = (<span class="keyword">char</span> *)str2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (*s1 &amp;&amp; *s2 &amp;&amp; (*s1 == *s2))</span><br><span class="line">        &#123;</span><br><span class="line">            s1++;</span><br><span class="line">            s2++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!*s2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查找在str1中出现str2前length个字符的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_strnstr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str2_len = my_strlen (str2);</span><br><span class="line">    <span class="keyword">char</span> *tmp = (<span class="keyword">char</span>*)str1;</span><br><span class="line">    <span class="keyword">char</span> str2_tmp[length+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">char</span> *s1, *s2;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (str2_len &lt; length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        my_strncpy(str2_tmp, str2, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str2_tmp)</span><br><span class="line">        <span class="keyword">return</span>((<span class="keyword">char</span> *)str1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        s1 = tmp;</span><br><span class="line">        s2 = (<span class="keyword">char</span> *)str2_tmp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (*s1 &amp;&amp; *s2 &amp;&amp; (*s1 == *s2))</span><br><span class="line">        &#123;</span><br><span class="line">            s1++;</span><br><span class="line">            s2++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!*s2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strchr-和strrchr"><a href="#strchr-和strrchr" class="headerlink" title="strchr()和strrchr()"></a>strchr()和strrchr()</h2><p>字符查找函数，分别查找在字符串中第一次出现字符的位置和最后一次出现字符的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查找str1中第一次出现c的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_strchr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *tmp = (<span class="keyword">char</span> *)str1;</span><br><span class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*tmp == c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tmp++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查找str1中最后一次出现c的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_strrchr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *tmp = (<span class="keyword">char</span> *)str1;</span><br><span class="line">    <span class="keyword">char</span> *s1 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*tmp == c)</span><br><span class="line">        &#123;</span><br><span class="line">            s1 = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tmp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strpbrk-和strspn"><a href="#strpbrk-和strspn" class="headerlink" title="strpbrk()和strspn()"></a>strpbrk()和strspn()</h2><p>strpbrk()函数为依次检测第一个字符串中的字符，如果字符在第二个字符串中也存在，返回字符的位置</p><p>strspn()函数为依次检测第一个字符串中的字符，如果字符在第二个字符串中不存在，返回字符所在的下标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">找到str1和str2中都有的第一个字符，返回其在str1中的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_strpbrk</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *tmp = (<span class="keyword">char</span>*)str2;</span><br><span class="line">    <span class="keyword">char</span> *s1, *s2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str2)</span><br><span class="line">        <span class="keyword">return</span>((<span class="keyword">char</span> *)str1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        s1 = (<span class="keyword">char</span> *)str1;</span><br><span class="line">        s2 = tmp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; *s1; s1++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*s1 == *s2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> s1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">找到第一个str1中存在，str2中不存在的字符，返回其在str1中的下标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strspn</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *tmp = (<span class="keyword">char</span>*)str1;</span><br><span class="line">    <span class="keyword">char</span> *s1, *s2;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        s1 = tmp;</span><br><span class="line">        s2 = (<span class="keyword">char</span> *)str2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; *s2; s2++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*s1 == *s2)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp++;</span><br><span class="line">                i++;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="startwith-和endwith"><a href="#startwith-和endwith" class="headerlink" title="startwith()和endwith()"></a>startwith()和endwith()</h2><p>自己实现的检查字符串是以某个子串开头或结尾的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">startwith</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1,<span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = <span class="built_in">strlen</span> (str1);</span><br><span class="line">    str2_len = <span class="built_in">strlen</span> (str2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == str1_len &amp;&amp; <span class="number">0</span> == str2_len) || <span class="number">0</span> == str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1_len &lt; str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strncmp</span>(str1,str2,str2_len))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">endwith</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1,<span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *tmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = <span class="built_in">strlen</span> (str1);</span><br><span class="line">    str2_len = <span class="built_in">strlen</span> (str2);</span><br><span class="line">    tmp = (<span class="keyword">char</span> *)str1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == str1_len &amp;&amp; <span class="number">0</span> == str2_len) || <span class="number">0</span> == str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1_len &lt; str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp += str1_len-str2_len;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(tmp,str2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第一个轮子MyString</summary>
    
    
    
    <category term="造轮子" scheme="http://example.com/category/%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    
    
    <category term="造轮子" scheme="http://example.com/tags/%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>开始造轮子</title>
    <link href="http://example.com/2021/07/21/%E5%BC%80%E5%A7%8B%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    <id>http://example.com/2021/07/21/%E5%BC%80%E5%A7%8B%E9%80%A0%E8%BD%AE%E5%AD%90/</id>
    <published>2021-07-21T13:36:52.000Z</published>
    <updated>2021-07-21T13:41:21.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h1><p>在最近的学习中，感觉C库好像缺少了检查字符串是以某个子串开头或结尾的函数，于是自己手动实现了一个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">startwith</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1,<span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = <span class="built_in">strlen</span> (str1);</span><br><span class="line">    str2_len = <span class="built_in">strlen</span> (str2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == str1_len &amp;&amp; <span class="number">0</span> == str2_len) || <span class="number">0</span> == str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1_len &lt; str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strncmp</span>(str1,str2,str2_len))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">endwith</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1,<span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *tmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = <span class="built_in">strlen</span> (str1);</span><br><span class="line">    str2_len = <span class="built_in">strlen</span> (str2);</span><br><span class="line">    tmp = (<span class="keyword">char</span> *)str1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == str1_len &amp;&amp; <span class="number">0</span> == str2_len) || <span class="number">0</span> == str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1_len &lt; str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp += str1_len-str2_len;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(tmp,str2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着这两个函数我陷入了沉思，既然缺少的我可以自己实现，那么已存在的我按照自己的想法重写，应该会对这些函数有一个更深的理解，于是便有了‘造轮子’这个专题</p><p>今天先将函数中用到的strlen()、strcmp()以及strcmp()进行重写</p><h2 id="my-strlen"><a href="#my-strlen" class="headerlink" title="my_strlen()"></a>my_strlen()</h2><p>strlen()的作用就是算出字符串的长度，很好理解逐，字符检查直到检查到结束即可算出总长度，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;<span class="keyword">while</span> (str[i] != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="my-strcmp-和-my-strncmp"><a href="#my-strcmp-和-my-strncmp" class="headerlink" title="my_strcmp() 和 my_strncmp()"></a>my_strcmp() 和 my_strncmp()</h2><p>strcmp()和strncmp()是进行字符串比较的函数，如果完全相同则返回0，如果出现不同字符，前字符串的字符大就返回1，否则返回-1.如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strncmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = my_strlen (str1);</span><br><span class="line">    str2_len = my_strlen (str2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == str1_len &amp;&amp; <span class="number">0</span> == str2_len) || <span class="number">0</span> == str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1_len &lt; size || str2_len &lt; size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str1[i] == str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str1[i] &gt; str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str1_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> str2_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == str1 || <span class="literal">NULL</span> == str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str1_len = my_strlen (str1);</span><br><span class="line">    str2_len = my_strlen (str2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == str1_len &amp;&amp; <span class="number">0</span> == str2_len) || <span class="number">0</span> == str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1_len &lt; str2_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str2_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str1[i] == str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str1[i] &gt; str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我会抽时间慢慢实现各个字符串操作函数，其次选一些我感兴趣的函数进行实现，希望我能坚持下去</p>]]></content>
    
    
    <summary type="html">开始造轮子</summary>
    
    
    
    <category term="造轮子" scheme="http://example.com/category/%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    
    
    <category term="造轮子" scheme="http://example.com/tags/%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>CGI</title>
    <link href="http://example.com/2021/07/21/cgi/"/>
    <id>http://example.com/2021/07/21/cgi/</id>
    <published>2021-07-21T13:34:10.000Z</published>
    <updated>2021-07-21T13:34:48.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h1><p>一个网关协议，按照CGI协议规定的数据格式，进行数据的处理（接收数据，输出数据)。存在目的是为了使web能够有动态页面的处理能力。是网站上实现动态页面的最简单和常用的方法</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>CGI程序其实就是HTTP请求中的一种请求资源的类型，所以需要简单的了解一下HTTP协议</p><h2 id="客户端（浏览器）与web服务器的交互流程"><a href="#客户端（浏览器）与web服务器的交互流程" class="headerlink" title="客户端（浏览器）与web服务器的交互流程"></a>客户端（浏览器）与web服务器的交互流程</h2><p>WEB服务器是使用TCP/IP协议搭建的一个服务器，获取静态资源的流程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%8E%B7%E5%8F%96.png" alt="静态资源获取"></p><p>下面是大学期间写的一个web服务器的demo：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 初始化监听socket描述符</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_listen_socket</span><span class="params">(<span class="keyword">short</span> port)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listen_fd;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line"></span><br><span class="line">    listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (listen_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to socket : %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">    ret = setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;set sock reuse addr:&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_port = htons(port);</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    ret = bind(listen_fd, (struct sockaddr *) &amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fail to bind&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen(listen_fd, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> listen_fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_filetype</span><span class="params">(<span class="keyword">char</span> *filename, <span class="keyword">char</span> *filetype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(filename, <span class="string">&quot;.html&quot;</span>))</span><br><span class="line">        <span class="built_in">strcpy</span>(filetype, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(filename, <span class="string">&quot;.gif&quot;</span>))</span><br><span class="line">        <span class="built_in">strcpy</span>(filetype, <span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(filename, <span class="string">&quot;.png&quot;</span>))</span><br><span class="line">        <span class="built_in">strcpy</span>(filetype, <span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(filename, <span class="string">&quot;.jpg&quot;</span>))</span><br><span class="line">        <span class="built_in">strcpy</span>(filetype, <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">strcpy</span>(filetype, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listen_fd;</span><br><span class="line">    <span class="keyword">int</span> new_fd;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">char</span> head[<span class="number">1024</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> *<span class="title">file</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> *date = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> filetype[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> port = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">2</span>) &#123;</span><br><span class="line">        port = strtoul(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen_fd = init_listen_socket(port);</span><br><span class="line">    <span class="keyword">if</span> (listen_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;listen %d port...\n&quot;</span>, port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        new_fd = accept(listen_fd, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (new_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;fail to accept&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Have a new connection!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        ret = recv(new_fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;recv&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;recv:%s&quot;</span> ,buf);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>;;i++)</span><br><span class="line">            <span class="keyword">if</span>(buf[i] == <span class="string">&#x27;H&#x27;</span>&amp;&amp; buf[i+<span class="number">1</span>] == <span class="string">&#x27;T&#x27;</span> &amp;&amp; buf[i+<span class="number">2</span>] == <span class="string">&#x27;T&#x27;</span> &amp;&amp; buf[i+<span class="number">3</span>] == <span class="string">&#x27;P&#x27;</span>)&#123;</span><br><span class="line">            buf[i<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> *filename = buf + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(filename)==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">strcpy</span>(filename, <span class="string">&quot;index.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(filename,<span class="string">&quot;health&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            filename=<span class="string">&quot;health.html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fp = fopen(filename ,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == fp)&#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(filename, <span class="string">&quot;404.html&quot;</span>);</span><br><span class="line">            <span class="built_in">sprintf</span>(head, <span class="string">&quot;HTTP/1.0 404 NOT FOUND\r\n&quot;</span>);<span class="comment">//应该为404</span></span><br><span class="line">            fp = fopen(filename ,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="built_in">sprintf</span>(head, <span class="string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>);</span><br><span class="line">        fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">        <span class="keyword">int</span> len = ftell(fp);</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fclose(fp);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">        date =(<span class="keyword">char</span> *)<span class="built_in">malloc</span>( <span class="number">0x01</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        len = fread(date, <span class="number">1</span>, len, fp);</span><br><span class="line"></span><br><span class="line">        get_filetype(filename, filetype);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(head, <span class="string">&quot;%sServer: Tiny Web Server\r\n&quot;</span>, head);</span><br><span class="line">        <span class="built_in">sprintf</span>(head, <span class="string">&quot;%sConnection: close\r\n&quot;</span>, head);</span><br><span class="line">        <span class="built_in">sprintf</span>(head, <span class="string">&quot;%sContent-length: %d\r\n&quot;</span>, head,len);<span class="comment">//file-&gt;st_size</span></span><br><span class="line">        <span class="built_in">sprintf</span>(head, <span class="string">&quot;%sContent-type: %s\r\n\r\n&quot;</span>, head, filetype);</span><br><span class="line">        <span class="comment">//write(new_fd, head , strlen(head));</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Response headers:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, head);</span><br><span class="line"></span><br><span class="line">        ret = send(new_fd, head ,<span class="built_in">strlen</span>(head) , <span class="number">0</span>) ;</span><br><span class="line">        <span class="keyword">if</span>(ret &lt;<span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;send head&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ret = send(new_fd, date ,len , <span class="number">0</span>) ;</span><br><span class="line">        <span class="keyword">if</span>(ret &lt;<span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;send date&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(date);</span><br><span class="line">        close(new_fd);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;close connection!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取动态资源(CGI)如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/%E5%8A%A8%E6%80%81%E8%AF%B7%E6%B1%82.png" alt="静态资源获取"></p><h2 id="CGI程序"><a href="#CGI程序" class="headerlink" title="CGI程序"></a>CGI程序</h2><h3 id="输出头部"><a href="#输出头部" class="headerlink" title="输出头部"></a>输出头部</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-type：text/html\r\n\r\n</span></span><br><span class="line"><span class="attribute">Content-Type</span>: application/json\r\n\r\n</span><br></pre></td></tr></table></figure><p>头部实际不是文本的一部分，是服务器与浏览器之间的信息协议,常见头部为：</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/20210312160819.png" alt="头部"></p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><ol><li>通过环境变量(GET方式)</li><li>stdin(POST方式)</li></ol><p><strong>GET方式</strong>：</p><ol><li>通过环境变量：REQUEST_METHOD来判断是否是GET方式</li><li>从环境变量：QUERY_STRING获取数据</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *pQuery = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *pMethod = <span class="literal">NULL</span>;</span><br><span class="line">pMethod = getenv(<span class="string">&quot;REQUEST_METHOD&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(pMethod, <span class="string">&quot;GET&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    pQuery = getenv(<span class="string">&quot;QUERY_STRING&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>POST方式</strong>：</p><ol><li>通过环境变量：REQUEST_METHOD 来判断是否是POST方式</li><li>从环境变量：CONTENT_LENGTH 获取数据长度n</li><li>从stdin中读取n个字节的数据</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *pQuery = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *pMethod = <span class="literal">NULL</span>;</span><br><span class="line">pMethod = getenv(<span class="string">&quot;REQUEST_METHOD&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(pMethod, <span class="string">&quot;POST&quot;</span>))&#123;</span><br><span class="line">    len = atoi(getenv(<span class="string">&quot;CONTENT_LENGTH&quot;</span>));</span><br><span class="line">    fgets(pQuery，len+<span class="number">1</span>,<span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><table><thead><tr><th>环境变量</th><th>意义</th></tr></thead><tbody><tr><td>SERVER_NAME</td><td>CGI脚本运行时的主机名和IP地址.</td></tr><tr><td>SERVER_SOFTWARE</td><td>你的服务器的类型如： CERN/3.0 或 NCSA/1.3.</td></tr><tr><td>GATEWAY_INTERFACE</td><td>运行的CGI版本. 对于UNIX服务器, 这是CGI/1.1.</td></tr><tr><td>SERVER_PROTOCOL</td><td>服务器运行的HTTP协议. 这里当是HTTP/1.0.</td></tr><tr><td>SERVER_PORT</td><td>服务器运行的TCP口，通常Web服务器是80.</td></tr><tr><td>REQUEST_METHOD</td><td>POST 或 GET, 取决于你的表单是怎样递交的.</td></tr><tr><td>HTTP_ACCEPT</td><td>浏览器能直接接收的Content-types, 可以有HTTP Accept header定义.</td></tr><tr><td>HTTP_USER_AGENT</td><td>递交表单的浏览器的名称、版本 和其他平台性的附加信息。</td></tr><tr><td>HTTP_REFERER</td><td>递交表单的文本的 URL，不是所有的浏览器都发出这个信息，不要依赖它</td></tr><tr><td>PATH_INFO</td><td>附加的路径信息, 由浏览器通过GET方法发出.</td></tr><tr><td>PATH_TRANSLATED</td><td>在PATH_INFO中系统规定的路径信息.</td></tr><tr><td>SCRIPT_NAME</td><td>指向这个CGI脚本的路径, 是在URL中显示的(如, /cgi-bin/thescript).</td></tr><tr><td>QUERY_STRING</td><td>脚本参数或者表单输入项(如果是用GET递交). QUERY_STRING 包含URL中问号后面的参数.</td></tr><tr><td>REMOTE_HOST</td><td>递交脚本的主机名，这个值不能被设置.</td></tr><tr><td>REMOTE_ADDR</td><td>递交脚本的主机IP地址.</td></tr><tr><td>REMOTE_USER</td><td>递交脚本的用户名. 如果服务器的authentication被激活，这个值可以设置。</td></tr><tr><td>REMOTE_IDENT</td><td>如果Web服务器是在ident (一种确认用户连接你的协议)运行, 递交表单的系统也在运行ident, 这个变量就含有ident返回值.</td></tr><tr><td>CONTENT_TYPE</td><td>如果表单是用POST递交, 这个值将是 application/x-www-form-urlencoded. 在上载文件的表单中, content-type 是个 multipart/form-data.</td></tr><tr><td>CONTENT_LENGTH</td><td>对于用POST递交的表单, 标准输入口的字节数.</td></tr></tbody></table><h3 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h3><p>1、输出数据要和输出头部相匹配</p><p>2、通过标准输出stdout进行数据的输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(output_buff, <span class="string">&quot;Content-Type: application/json\r\n\r\n&quot;</span> \</span><br><span class="line">                                 <span class="string">&quot;&#123;&quot;</span> \</span><br><span class="line">                                 <span class="string">&quot;\r\&quot;status\&quot;:0,&quot;</span> \</span><br><span class="line">                                 <span class="string">&quot;\r\&quot;msg\&quot;:username or password incorrect&quot;</span> \</span><br><span class="line">                                 <span class="string">&quot;\r&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">websWrite(<span class="built_in">stdout</span>, T(<span class="string">&quot;%s&quot;</span>), output_buff); </span><br></pre></td></tr></table></figure><h2 id="CGI实现原理"><a href="#CGI实现原理" class="headerlink" title="CGI实现原理"></a>CGI实现原理</h2><p>在lighttpd中是cgi_create_env函数中进行实现，实现步骤如下：</p><ol><li>创建管道</li><li>Fork（）子进程</li><li>在子进程中设置管道一端为标准输入和标准输出</li><li>在子进程中添加环境变量</li><li>启动CGI进程</li><li>父进程负责向管道中写数据</li></ol>]]></content>
    
    
    <summary type="html">CGI简介及其原理</summary>
    
    
    
    <category term="工作总结" scheme="http://example.com/category/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="工作总结" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>ETWS地震海啸预警</title>
    <link href="http://example.com/2021/07/17/ETWS%E5%9C%B0%E9%9C%87%E6%B5%B7%E5%95%B8%E9%A2%84%E8%AD%A6/"/>
    <id>http://example.com/2021/07/17/ETWS%E5%9C%B0%E9%9C%87%E6%B5%B7%E5%95%B8%E9%A2%84%E8%AD%A6/</id>
    <published>2021-07-17T11:58:12.000Z</published>
    <updated>2021-07-17T12:05:49.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Earthquake-and-Tsunami-Warning-System"><a href="#Earthquake-and-Tsunami-Warning-System" class="headerlink" title="Earthquake and Tsunami Warning System"></a>Earthquake and Tsunami Warning System</h1><p>ETWS即地震海啸预警系统，是为了在地震和海啸发生时提醒用户做好防护准备</p><h2 id="ETWS简介"><a href="#ETWS简介" class="headerlink" title="ETWS简介"></a>ETWS简介</h2><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/ETWSeg.png" alt="etws"></p><p>ETWS会向设备发送两种信息：</p><p>1.快速预警信息（Primary Notification）</p><p>ETWS一直在强调唯快不破，在地震、海啸等重大灾难发生后，几秒最慢几分钟  后就会殃及到整个受灾区域。因此，此预警通知应迅速送达受紧急影响地区的用户，使其能够采取任何行动逃离危险，所以此预警信息携带数据较小，主要告诉用户灾害类型</p><p>2.准确的警告通知（Secondary Notification）</p><p>在已经发送了快速预警信息后，需要给用户提供更准确的信息，如逃生路线，安全区域，政府政策，灾害持续时间等。因此，此条信息应准确送达，负载更多信息，并且可以让多种类型的用户理解（如多语言显示）</p><h3 id="ETWS的时效性"><a href="#ETWS的时效性" class="headerlink" title="ETWS的时效性"></a>ETWS的时效性</h3><p>Primary Notification 要求是迅速发送到UE，即使在拥堵的情况下，也要保证在4秒内送达UE</p><p>Secondary Notification 要求一定要送达到UE，即使在拥堵的情况下，也要保证送达UE，Secondary Notification没有要求送达时间，只要求准确性</p><p>备注：</p><ol><li>不在范围内或者关机的设备不需要考虑</li><li>在Primary Notification后面不一定总是有Secondary Notification</li><li>可能没有Primary Notification而只有Secondary Notification，完全依赖ETWS消息提供方策略</li></ol><h2 id="ETWS-数据"><a href="#ETWS-数据" class="headerlink" title="ETWS 数据"></a>ETWS 数据</h2><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/etws_data.png" alt="data"></p><h3 id="Primary-Notification"><a href="#Primary-Notification" class="headerlink" title="Primary Notification"></a>Primary Notification</h3><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/primary_ctws.png" alt="Primary"></p><h3 id="Serial-Number"><a href="#Serial-Number" class="headerlink" title="Serial Number"></a>Serial Number</h3><ul><li>GS:00 (GS 是CBS的发送方填充的，00优先级最高，代表基站发送)</li><li>Emergency Uset Alert: 1 （1：enable   0：disable）</li><li>Popup：1（1：enable   0：disable）</li><li>Upadte Number： 0 （相当于CBS信息版本，每更新一次+1）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/SN.png" alt="sn"></p><h3 id="Message-Identifier"><a href="#Message-Identifier" class="headerlink" title="Message Identifier"></a>Message Identifier</h3><p>顾名思义代表消息id，此id的范围如下</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/etws_mi.png" alt="mi"></p><h3 id="Warning-Type"><a href="#Warning-Type" class="headerlink" title="Warning Type"></a>Warning Type</h3><p>warning type主要存放在这部分的前7个字节</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/warn_typ.png" alt="Warning"></p><p>具体意义如下图</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/warning_typ.png" alt="Warning"></p><h2 id="Secondary-Notification"><a href="#Secondary-Notification" class="headerlink" title="Secondary Notification"></a>Secondary Notification</h2><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/secondary_etws.png" alt="Secondary"></p><h3 id="Message-Type"><a href="#Message-Type" class="headerlink" title="Message Type"></a>Message Type</h3><p>消息类型如下图</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/message_type.png" alt="Message"></p><h3 id="Data-Coding-Scheme"><a href="#Data-Coding-Scheme" class="headerlink" title="Data Coding Scheme"></a>Data Coding Scheme</h3><p>编码方案，此编码和短信一样共有三种，7BIT,8BIT和USC2</p><p>具体参考文档ETSI TS 123 038，文档部分截图如下</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/codingscheme.png" alt="Scheme"></p><h3 id="CB-Data"><a href="#CB-Data" class="headerlink" title="CB Data"></a>CB Data</h3><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/etwa_cb_data.png" alt="Data"></p><p>最后的CB Data部分就按页数分割，以指定的长度解析即可</p>]]></content>
    
    
    <summary type="html">ETWS地震海啸预警系统的介绍与解析</summary>
    
    
    
    <category term="工作总结" scheme="http://example.com/category/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="工作总结" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>CBS小区广播</title>
    <link href="http://example.com/2021/07/17/CBS%E5%B0%8F%E5%8C%BA%E5%B9%BF%E6%92%AD/"/>
    <id>http://example.com/2021/07/17/CBS%E5%B0%8F%E5%8C%BA%E5%B9%BF%E6%92%AD/</id>
    <published>2021-07-17T11:57:57.000Z</published>
    <updated>2021-07-17T12:01:54.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cell-Broadcast-Service"><a href="#Cell-Broadcast-Service" class="headerlink" title="Cell Broadcast Service"></a>Cell Broadcast Service</h1><p>小区广播服务是一种远程服务，它使信息提供者能够向PLMN内的指定区域提交用于广播的短消息。</p><h2 id="CBS简介"><a href="#CBS简介" class="headerlink" title="CBS简介"></a>CBS简介</h2><p>小区广播业务具有以下特点:</p><ul><li>终端不发送确认信息。</li><li>小区广播消息在一个有限的区域内发送，该区域由消息的发起者定义，并与PLMN达成协议。</li><li>每个消息都有一个标识符。终端接收该标识符，用于终端不存储不需要或已经接收到的广播消息的短信功能。</li><li>一般情况下，小区广播报文会连续发送，依次发送，重复发送。周期时间必须足够短，以便在一组单元中移动的游者能够接收到重要的信息。</li><li>小区广播消息仅为MT。这些消息的产生超出了3GPP规范的范围。</li><li>每个小区广播消息的最大长度为93个字符。</li><li>如果终端连接CS域，则不需要接收CBS消息。如果终端连接在PS域中且当前没有传输数据，那么终端应该可以接收消息。</li></ul><p>一条CBS消息最多由15个CBS page构成，每个CBS page至多82个字节，如果采用GSM7位编码的话，82*8/7=93个字符，并且每个CBS page拥有相同的Message ID和SN号</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/cbs_description.png" alt="description"></p><h2 id="CBS-数据"><a href="#CBS-数据" class="headerlink" title="CBS 数据"></a>CBS 数据</h2><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/cbs_data.png" alt="CBS data"></p><p>此数据为十进制，但是我们解析时是按位解析的</p><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><h3 id="CBS"><a href="#CBS" class="headerlink" title="CBS"></a>CBS</h3><p>CBS就是由下图部分组分</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/cbs_decode.png" alt="cbs"></p><h3 id="Serial-Number"><a href="#Serial-Number" class="headerlink" title="Serial Number"></a>Serial Number</h3><ul><li>GS:00 (GS 是CBS的发送方填充的，00优先级最高，代表基站发送)</li><li>Emergency Uset Alert: 1 （1：enable   0：disable）</li><li>Popup：1（1：enable   0：disable）</li><li>Upadte Number： 0 （相当于CBS信息版本，每更新一次+1）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/SN.png" alt="sn"></p><h3 id="Message-Identifier"><a href="#Message-Identifier" class="headerlink" title="Message Identifier"></a>Message Identifier</h3><p>顾名思义代表消息id，此id的范围如下</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/MI.png" alt="mi"></p><h3 id="Data-Coding-Scheme"><a href="#Data-Coding-Scheme" class="headerlink" title="Data Coding Scheme"></a>Data Coding Scheme</h3><p>编码方案，此编码和短信一样共有三种，7BIT,8BIT和USC2</p><p>具体参考文档ETSI TS 123 038，文档部分截图如下</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/codingscheme.png" alt="Scheme"></p><p>最后的CB Data部分就按指定的编码方式解析即可</p>]]></content>
    
    
    <summary type="html">CBS小区广播的介绍与解析</summary>
    
    
    
    <category term="工作总结" scheme="http://example.com/category/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="工作总结" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>sms信息编码</title>
    <link href="http://example.com/2021/07/17/sms%E4%BF%A1%E6%81%AF%E7%BC%96%E7%A0%81/"/>
    <id>http://example.com/2021/07/17/sms%E4%BF%A1%E6%81%AF%E7%BC%96%E7%A0%81/</id>
    <published>2021-07-17T11:57:22.000Z</published>
    <updated>2021-07-17T12:01:16.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息编码"><a href="#信息编码" class="headerlink" title="信息编码"></a>信息编码</h1><p>信息编码共有三种方式，按所携带信息的大小排序可分为：7bit编码、8bit编码、UCS2编码</p><h2 id="7bit编码"><a href="#7bit编码" class="headerlink" title="7bit编码"></a>7bit编码</h2><p>7位编码是种压缩算法，因为，ASCII码（不包括扩展ASCII），其值小于0x80，最高位bit8是0，被忽略了；而7bit编码就利用了这一位来存储数据；其编码时，依次将下一7位编码的后几位逐次移至前面，形成新的8位编码。</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/7bit.png" alt="7bit编码"></p><p>根据上图可得到7bit编码解码算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIGH_8BIT_MASK(N) (0xFF &lt;&lt; (N))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOW_8BIT_MASK(N) (~HIGH_8BIT_MASK(N))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _7bit_to_asscii(<span class="keyword">char</span> *p_dst, <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, <span class="keyword">int</span> src_size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> high_part, low_part;</span><br><span class="line">    left = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">NULL</span> || p_dst == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = (src_size * <span class="number">8</span>) / <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">8</span> == left)</span><br><span class="line">        &#123;</span><br><span class="line">            p_dst[i] = src[pos] &amp; LOW_8BIT_MASK(<span class="number">7</span>);</span><br><span class="line">            left = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">7</span> == left)</span><br><span class="line">        &#123;</span><br><span class="line">            p_dst[i] = (src[pos] &amp; HIGH_8BIT_MASK(<span class="number">8</span> - left)) &gt;&gt; (<span class="number">8</span> - left);</span><br><span class="line">            left = <span class="number">8</span>;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            high_part = low_part = <span class="number">0</span>;</span><br><span class="line">            low_part = (src[pos] &amp; HIGH_8BIT_MASK(<span class="number">8</span> - left)) &gt;&gt; (<span class="number">8</span> - left);</span><br><span class="line">            high_part = (src[pos+<span class="number">1</span>] &amp; LOW_8BIT_MASK(<span class="number">7</span> - left)) &lt;&lt; left;</span><br><span class="line">            p_dst[i] = low_part | high_part;</span><br><span class="line">            left = <span class="number">8</span> - (<span class="number">7</span> - left);</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">asscii_to_7bit</span><span class="params">(<span class="keyword">char</span> *p_dst, <span class="keyword">const</span> <span class="keyword">char</span> *p_src, <span class="keyword">int</span> src_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;   <span class="comment">//当前字节还能放多少个元素</span></span><br><span class="line">    <span class="keyword">int</span> high_part, low_part;</span><br><span class="line">    <span class="keyword">char</span> p_usrc[src_size + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(p_usrc, p_src, src_size);</span><br><span class="line">    left = <span class="number">8</span>;<span class="comment">//初始时候为8位，这是从低位开始算的</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; src_size ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="number">8</span>)&#123;</span><br><span class="line">            p_dst[pos] |= p_usrc[i] &lt;&lt; (<span class="number">8</span> - left);</span><br><span class="line">            left -= <span class="number">7</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left == <span class="number">7</span>)&#123;</span><br><span class="line">            p_dst[pos] |= p_usrc[i] &lt;&lt; (<span class="number">8</span> - left);</span><br><span class="line">            left = <span class="number">8</span>;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  <span class="comment">//需要分割，分为两部分，一部分是 低left位, 另一部分是 高7-left位</span></span><br><span class="line">            high_part = low_part = <span class="number">0</span>;</span><br><span class="line">            low_part = p_usrc[i] &amp; LOW_8BIT_MASK(left);</span><br><span class="line">            high_part = (p_usrc[i] &amp; HIGH_8BIT_MASK(left)) &gt;&gt; left;</span><br><span class="line"></span><br><span class="line">            p_dst[pos] |= low_part &lt;&lt; (<span class="number">8</span> - left);</span><br><span class="line">            pos++;</span><br><span class="line">            p_dst[pos] |= high_part;</span><br><span class="line">            left = <span class="number">8</span> - (<span class="number">7</span> - left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((src_size * <span class="number">7</span> + <span class="number">7</span>) / <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8bit编码"><a href="#8bit编码" class="headerlink" title="8bit编码"></a>8bit编码</h2><p>8bit编码，顾名思义就是一个char型数据代表一个字符，所以他的编解码是一模一样的，甚至都不叫编解码，直接拿来用即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_8bit</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> in_length, <span class="keyword">char</span> *out, <span class="keyword">int</span> *out_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in == <span class="literal">NULL</span> || in_length &lt;= <span class="number">0</span> || out == <span class="literal">NULL</span> || out_length == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; in_length; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        out[length++] = in[index];</span><br><span class="line">    &#125;</span><br><span class="line">    *out_length = length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode_8bit</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> in_length, <span class="keyword">char</span> *out, <span class="keyword">int</span> *out_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in == <span class="literal">NULL</span> || in_length &lt;= <span class="number">0</span> || out == <span class="literal">NULL</span> || out_length == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; in_length; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        out[length++] = in[index];</span><br><span class="line">    &#125;</span><br><span class="line">    *out_length = length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="UCS2编码"><a href="#UCS2编码" class="headerlink" title="UCS2编码"></a>UCS2编码</h2><p>UCS2就是标准的unicode编码， 它是某国际组织设计的一种文字符号编码表，包括了世界上绝大多数文字和符号，包括中文，每个字符使用2字节编码，因此叫ucs2。</p><p>对于这种标准编码有现成的函数iconv()可以使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">iconv_t</span> <span class="title">iconv_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *tocode, <span class="keyword">const</span> <span class="keyword">char</span> *fromcode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">iconv</span><span class="params">(<span class="keyword">iconv_t</span> cd,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">char</span> **inbuf, <span class="keyword">size_t</span> *inbytesleft,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">char</span> **outbuf, <span class="keyword">size_t</span> *outbytesleft)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iconv_close</span><span class="params">(<span class="keyword">iconv_t</span> cd)</span></span>;</span><br></pre></td></tr></table></figure><p>iconv_open：</p><p>tocode:目标编码；fromcode:当前编码；返回值为iconv的句柄</p><p>iconv：</p><p>cd:iconv_open获取的句柄；inbuf，inbytesleft:输入的字符串及其大小；outbuf，outbytesleft:输出的字符串及其大小</p><p>iconv_close：</p><p>cd:iconv_open获取的句柄</p><p>UCS2编码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode_ucs2</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> in_length, <span class="keyword">char</span> *out, <span class="keyword">int</span> *out_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">iconv_t</span> icon_handler = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> out_buffer_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *out_buffer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> temp = <span class="number">0x00</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (in == <span class="literal">NULL</span> || in_length &lt;= <span class="number">0</span> || out == <span class="literal">NULL</span> || out_length == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((icon_handler = iconv_open(<span class="string">&quot;ucs-2&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    out_buffer_length = *out_length;</span><br><span class="line">    out_buffer = out;</span><br><span class="line">    <span class="keyword">if</span> (iconv(icon_handler, &amp;in, (<span class="keyword">size_t</span> *)&amp;in_length, &amp;out_buffer, (<span class="keyword">size_t</span> *)&amp;out_buffer_length) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *out_length = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;encode_ucs2 errno = %d.&quot;</span>, errno);</span><br><span class="line">        iconv_close(icon_handler);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    *out_length -= out_buffer_length;</span><br><span class="line">    iconv_close(icon_handler);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; *out_length ; index += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = out[index];</span><br><span class="line">        out[index] = out[index + <span class="number">1</span>];</span><br><span class="line">        out[index + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_ucs2</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> in_length, <span class="keyword">char</span> *out, <span class="keyword">int</span> *out_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">iconv_t</span> icon_handler = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> out_buffer_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *out_buffer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> temp = <span class="number">0x00</span>;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> (in == <span class="literal">NULL</span> || in_length &lt;= <span class="number">0</span> || in_length % <span class="number">2</span> != <span class="number">0</span> || out == <span class="literal">NULL</span> || out_length == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; in_length; index += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = in[index];</span><br><span class="line">        in[index] = in[index + <span class="number">1</span>];</span><br><span class="line">        in[index + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">if</span> ((icon_handler = iconv_open(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;ucs-2&quot;</span>)) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    out_buffer_length = *out_length;</span><br><span class="line">    out_buffer = out;</span><br><span class="line">    <span class="keyword">if</span> (iconv(icon_handler, &amp;in, (<span class="keyword">size_t</span> *)&amp;in_length, &amp;out_buffer, (<span class="keyword">size_t</span> *)&amp;out_buffer_length) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *out_length = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;decode_ucs2 errno = %d.&quot;</span>, errno);</span><br><span class="line">        iconv_close(icon_handler);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    *out_length -= out_buffer_length;</span><br><span class="line">    iconv_close(icon_handler);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">信息数据域常见的三种编码方式</summary>
    
    
    
    <category term="工作总结" scheme="http://example.com/category/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="工作总结" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>sms信息</title>
    <link href="http://example.com/2021/07/17/sms%E4%BF%A1%E6%81%AF/"/>
    <id>http://example.com/2021/07/17/sms%E4%BF%A1%E6%81%AF/</id>
    <published>2021-07-17T11:57:11.000Z</published>
    <updated>2021-07-17T11:59:27.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="短信"><a href="#短信" class="headerlink" title="短信"></a>短信</h1><h2 id="短信概述"><a href="#短信概述" class="headerlink" title="短信概述"></a>短信概述</h2><h3 id="SMS（Short-Messaging-Service）"><a href="#SMS（Short-Messaging-Service）" class="headerlink" title="SMS（Short Messaging Service）"></a>SMS（Short Messaging Service）</h3><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/sms.jpg" alt="sms"></p><p>SMS协议就是短信协议的一种，目前短信协议有SMS短信、EMS短信和MMS彩信。</p><p>SMS，短信服务是最早的短消息业务，也是现在普及率最高的一种短消息业务，通过它移动电话之间可以互相收发短信，内容以文本、数字或二进制非文本数据为主，目前，这种短消息的长度被限定在140字节之内。SMS以简单方便的使用功能受到广大用户的欢迎，迅速普及，但却始终是属于第一代的无线数据服务。</p><p>SMS 是一种存储和转发服务。也就是说，短消息并不是直接从发送人发送到接收人，而始终通过 SMS 中心进行转发。如果接收人处于未连接状态（可能电话已关闭），则消息将在接收人再次连接时发送。</p><h3 id="PDU编码"><a href="#PDU编码" class="headerlink" title="PDU编码"></a>PDU编码</h3><p>共有三种方式来发送和接收SMS信息：Block Mode, Text Mode和PDU Mode。其中PDU Mode被所有手机支持，可以使用任何字符集，这也是手机默认的编码方式。</p><p>PDU相当于一个数据包、数据单元，它由构成短消息（SMS）的信息组成。</p><p>GSM和CDMA的PDU又有着很大的区别。</p><hr><h2 id="GSM短信编码"><a href="#GSM短信编码" class="headerlink" title="GSM短信编码"></a>GSM短信编码</h2><p>短信包含很多的类型，如短信交付(SMS-DELIVER)、短信提交(SMS -SUBMIT)、短信命令(SMS-DELIVER)等。这里主要讲短信交付。</p><p>SMS-DELIVER (Mobile Terminated):手机接受的短信，由短信中心到终端。SMS-SUBMIT (Mobile Originated):由手机发起的短信，由终端到短信中心。</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/%E7%9F%AD%E4%BF%A1%E4%BA%A4%E4%BB%98%E6%B5%81%E7%A8%8B.png" alt="短信交付流程"></p><h3 id="PDU的组成"><a href="#PDU的组成" class="headerlink" title="PDU的组成"></a>PDU的组成</h3><p>PDU主要由以下部分组成：</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/pdu.png" alt="pdu"></p><p>例如：</p><p>240D91688102200982F601<strong>08</strong>21800381602423<strong>064F60597D0021</strong></p><p>240D91688102200982F601<strong>04</strong>21800381602423<strong>0b68656c6c6f20776f726c64</strong></p><p>240D91688102200982F601<strong>00</strong>21800381602423<strong>0bc8329bfd065ddf72363904</strong></p><p>字段含义如下表</p><table><thead><tr><th>元素</th><th>名称</th><th>长度</th><th>描述</th></tr></thead><tbody><tr><td>SCA</td><td>Service Center Address</td><td>1-12</td><td>短消息服务中心号码</td></tr><tr><td>PDU-Type</td><td>Protocol Data Unit</td><td>1</td><td>协议数据单元类型</td></tr><tr><td>MR</td><td>Message Reference</td><td>1</td><td>所有成功的短信发送参考数目（0..255）</td></tr><tr><td>OA</td><td>Originator Address</td><td>2-12</td><td>发送方地址（手机号码）</td></tr><tr><td>PID</td><td>Protocol Identifer</td><td>1</td><td>参数显示消息中心以何种方式处理消息内容</td></tr><tr><td>DCS</td><td>Data Coding Scheme</td><td>1</td><td>参数显示用户数据编码方案</td></tr><tr><td>SCTS</td><td>Service Center Time Stamp</td><td>7</td><td>消息中心收到消息时的时间戳</td></tr><tr><td>UDL</td><td>User Data Lenghth</td><td>1</td><td>用户数据长度</td></tr><tr><td>UD</td><td>User Data</td><td>1</td><td>用户数据</td></tr></tbody></table><p>短信信息的解码主要关注红色的元素</p><h3 id="GSM短信解析流程"><a href="#GSM短信解析流程" class="headerlink" title="GSM短信解析流程"></a>GSM短信解析流程</h3><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/sms_gsm%E6%B5%81%E7%A8%8B.png" alt="GSM短信解析流程"></p><h3 id="PDU-Type"><a href="#PDU-Type" class="headerlink" title="PDU-Type"></a>PDU-Type</h3><p>PDU-Type包含了MTI具体信息如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/pdu_type.png" alt="PDU-Type"></p><p>其中2bit MTI如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/mti.png" alt="MTI"></p><h3 id="OA"><a href="#OA" class="headerlink" title="OA"></a>OA</h3><p>OA 发送方地址(Originator Address)例如：0D 91 688102200982F6</p><table><thead><tr><th>1 Octet</th><th>0-1 Octet</th><th>0-10 Octet</th></tr></thead><tbody><tr><td>Len</td><td>Type</td><td>Addr</td></tr></tbody></table><ul><li>Len:地址长度。如果Length为0D，后面的字节数是[2+(Length+1)]/2=8，后面8个字节是发送方的地址；</li><li>Type：短消息中心地址的类型，一般为91，代表“+”。</li><li>Addr:地址长度为奇数时，最后一个需要填充”F”</li></ul><h3 id="DCS"><a href="#DCS" class="headerlink" title="DCS"></a>DCS</h3><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/gsm_dcs.png" alt="DCS"></p><p>2-3bit代表用户数据的编码方式，0-1bit代表了短信的储存方式</p><ul><li>Class0：短消息直接显示到用户终端</li><li>Class1：短消息存储在SIM卡上</li><li>Class2：短消息必须存储在SIM卡上，禁止直接传输到中断</li><li>Class3：短消息存贮在用户设备上</li></ul><h3 id="SCTS"><a href="#SCTS" class="headerlink" title="SCTS"></a>SCTS</h3><p>1bit-7bit分别代表年 月 日 时 分 秒 时区</p><p>例如：</p><p>21 80 03 81 60 24 23代表12年8月30号18时6分24秒</p><h3 id="UDL"><a href="#UDL" class="headerlink" title="UDL"></a>UDL</h3><p>UDL用户数据长度，包含用户数据和用户数据头的长度</p><ol><li><p>如果用户用默认7位编码。表示的是编码前的字符串长度，而不是编码后的8位组个数！</p></li><li><p>如果用户用8位编码表示用户数据区的字节数，有数据头信息，包括在内。</p></li><li><p>如果为UCS2编码，则是用户数据区的字节数</p></li></ol><h3 id="UD"><a href="#UD" class="headerlink" title="UD"></a>UD</h3><p>用户数据</p><p>例如：<br>1、04 4F60597D（不包含用户头部信息）</p><p>用户数据长度：4</p><p>用户数据：4F60597D</p><p>2、08 050003000201 C834 （包含用户头部信息)</p><p>用户数据长度：8</p><p>用户数据：C834</p><p>用户头部长度：5</p><p>用户头部信息：0003000201</p><h3 id="UDH"><a href="#UDH" class="headerlink" title="UDH"></a>UDH</h3><p>050003000201</p><ul><li>05表示消息头后续长度</li><li>00表示消息类型为长短信拆分</li><li>03表示剩余短信消息头标识长度</li><li>00表示短信ID，范围0~255</li><li>02表示短信拆分总包数</li><li>01表示当前短信是拆分短信的第几条</li></ul><hr><h2 id="CDMA短信编码"><a href="#CDMA短信编码" class="headerlink" title="CDMA短信编码"></a>CDMA短信编码</h2><h3 id="CDMA-PDU"><a href="#CDMA-PDU" class="headerlink" title="CDMA PDU"></a>CDMA PDU</h3><p>pdu如下：</p><blockquote><p>00 00 02 10 02 02 07 02 c5 4c e2 25 a8 a8 06 01 4c 08 4d 00 03 10 01 f8 01 3e 20 f0 01 90 01 78 01 90 01 62 df ca 70 04 b1 ac b1 ab b4 23 96 14 c6 70 01 62 96 3b 2b 12 b9 82 7a e3 10 c0 01 72 9f 54 4c 0b 10 8b b4 23 91 8a 75 d0 01 63 31 7a 70 02 9f 52 e0 7c f0 f8 03 06 08 12 29 19 26 16</p></blockquote><p>CDMA PDU总体分为两部分：消息类型 + 字段</p><ul><li>0x00：点对点消息</li><li>0x00：字段类型</li><li>0x02：字段长度</li></ul><p>字段类型分为：0x00：Teleservice id；0x02：Originating addr；0x06：Bearer reply opt；0x08：Bearer data</p><h3 id="CDMA短信解析流程"><a href="#CDMA短信解析流程" class="headerlink" title="CDMA短信解析流程"></a>CDMA短信解析流程</h3><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/cdma%E7%9F%AD%E4%BF%A1%E6%B5%81%E7%A8%8B.png" alt="CDMA短信解析流程"></p><h3 id="Originating-addr"><a href="#Originating-addr" class="headerlink" title="Originating addr"></a>Originating addr</h3><blockquote><p>02 07 02 c5 4c e2 25 a8 a8</p></blockquote><ul><li>0x02：addr</li><li>0x07：长度</li><li>0x02，0xc5：0000 0010 1100 0101</li><li>第一个bit表示地址编码方式：</li><li>0 : 4bit压缩;</li><li>1 : 8bit压缩</li><li>第二个bit表示NUMBER_MODE</li><li>0：RIL_CDMA_SMS_NUMBER_MODE_NOT_DATA_NETWORK</li><li>接着8bit表示号码长度</li><li>0000 1011：11位号码</li></ul><h3 id="Bearer-data"><a href="#Bearer-data" class="headerlink" title="Bearer data"></a>Bearer data</h3><blockquote><p>08 4d 00 03 10 01 f8 01 3e 20 f0 01 90 01 78 01 90 01 62 df ca 70 04 b1 ac b1 ab b4 23 96 14 c6 70 01 62 96 3b 2b 12 b9 82 7a e3 10 c0 01 72 9f 54 4c 0b 10 8b b4 23 91 8a 75 d0 01 63 31 7a 70 02 9f 52 e0 7c f0 f8 03 06 08 12 29 19 26 16</p></blockquote><ul><li>0x08：data</li><li>0x4d：长度77</li></ul><p>Data的内容也是由字段组成:</p><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/sms_cdma_data.png" alt="Data"></p><h3 id="IDENTIFER"><a href="#IDENTIFER" class="headerlink" title="IDENTIFER"></a>IDENTIFER</h3><p>00 03 10 01 f8</p><ul><li>0x03：长度</li><li>0xf8：最后一个8bit中的第5个bit代表header_ind</li></ul><h3 id="USR-DATA"><a href="#USR-DATA" class="headerlink" title="USR DATA"></a>USR DATA</h3><blockquote><p>01 3e 20 f0 01 90 01 78 01 90 01 62 df ca 70 04 b1 ac b1 ab b4 23 96 14 c6 70 01 62 96 3b 2b 12 b9 82 7a e3 10 c0 01 72 9f 54 4c 0b 10 8b b4 23 91 8a 75 d0 01 63 31 7a 70 02 9f 52 e0 7c f0</p></blockquote><p>0x3e：长度</p><blockquote><p>20 f0 01: 0010 0000 1111 0000 0000 0001</p></blockquote><ul><li>前5个bit表示编码方式： 7bit（0x02） 、8bit （其他）、UCS2（0x04）</li><li>接着8个bit表示字符长度,剩余部分为数据</li></ul><h3 id="TIME-STAMP"><a href="#TIME-STAMP" class="headerlink" title="TIME_STAMP"></a>TIME_STAMP</h3><blockquote><p>03 06 08 12 29 19 26 16</p></blockquote><ul><li>0x06：长度</li><li>08 12 29 19 26 16：08年12月29号19时26分16秒</li></ul><h2 id="短信解码示例"><a href="#短信解码示例" class="headerlink" title="短信解码示例"></a>短信解码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIGH_8BIT_MASK(N) (0xFF &lt;&lt; (N))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOW_8BIT_MASK(N) (~HIGH_8BIT_MASK(N))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gsmpdu_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pdu)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ascii_to_hex</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *ascii, <span class="keyword">int</span> ascii_length, <span class="keyword">char</span> *hex, <span class="keyword">int</span> *hex_length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hex_to_ascii</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *hex, <span class="keyword">int</span> hex_length, <span class="keyword">char</span> *ascii, <span class="keyword">int</span> *ascii_length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dencode_ucs2</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> in_length, <span class="keyword">char</span> *out, <span class="keyword">int</span> *out_length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_time</span><span class="params">(<span class="keyword">char</span> *pdu, <span class="keyword">int</span> length, <span class="keyword">char</span> *timer)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_number</span><span class="params">(<span class="keyword">char</span> *pdu_hex, <span class="keyword">int</span> number_length, <span class="keyword">char</span> *number)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_8bit</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> in_length, <span class="keyword">char</span> *out, <span class="keyword">int</span> *out_length)</span></span>;</span><br><span class="line"><span class="keyword">int</span> _7bit_to_ascii(<span class="keyword">char</span> *p_dst, <span class="keyword">unsigned</span> <span class="keyword">char</span> *p_src, <span class="keyword">int</span> src_size);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gsmpdu_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pdu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pdu_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> number_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pdu_hex_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pdu_type = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> code_mode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pdu_udl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pdu_udhl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> number[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> timer[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> usrdata[<span class="number">640</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> datalength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    pdu_length = <span class="built_in">strlen</span>(pdu);</span><br><span class="line">    <span class="keyword">char</span> m_pdu[pdu_length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strncpy</span>(m_pdu, pdu, pdu_length);</span><br><span class="line"></span><br><span class="line">    pdu_hex_length = pdu_length / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> pdu_hex[pdu_hex_length];</span><br><span class="line">    ascii_to_hex(pdu, pdu_length, pdu_hex, &amp;pdu_hex_length);</span><br><span class="line"></span><br><span class="line">    pdu_type = pdu_hex[offset++];</span><br><span class="line">    <span class="keyword">if</span> (pdu_type &amp; <span class="number">0x02</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;status!\n no this faction!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;message!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    number_length = pdu_hex[offset++] &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">if</span> (number_length &amp; <span class="number">0x01</span>)</span><br><span class="line">        number_length++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number_length!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    number_length = number_length / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> num = get_number(pdu_hex + offset, number_length, number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Call Number : %s\tNumber Length :%d\n&quot;</span>, number, num);</span><br><span class="line">    offset += number_length;</span><br><span class="line">    offset++; <span class="comment">/*PID*/</span></span><br><span class="line"></span><br><span class="line">    code_mode = pdu_hex[offset++] &amp; <span class="number">0xff</span>; <span class="comment">/*dcs*/</span></span><br><span class="line"></span><br><span class="line">    get_time(pdu_hex + offset, <span class="number">7</span>, timer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Send Time : %s\n&quot;</span>, timer);</span><br><span class="line">    offset += <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    pdu_udl = pdu_hex[offset++] &amp; <span class="number">0xff</span>; <span class="comment">/*udl*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pdu_udl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pdu_type &amp; <span class="number">0x40</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pdu_udhl = pdu_hex[offset] &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;do not decode UDH&quot;</span>);</span><br><span class="line">        offset += pdu_udhl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code_mode &amp; <span class="number">0x08</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dencode_ucs2(pdu_hex + offset, pdu_udl, usrdata, &amp;datalength);</span><br><span class="line">        <span class="comment">//ucs-2</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, usrdata);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (code_mode &amp; <span class="number">0x04</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        decode_8bit(pdu_hex + offset + pdu_udhl, pdu_udl - pdu_udhl, usrdata, &amp;datalength);</span><br><span class="line">        <span class="comment">//8-bit</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, usrdata);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _7bit_to_ascii(usrdata, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(pdu_hex + offset), pdu_udl);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, usrdata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ascii_to_hex</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *ascii, <span class="keyword">int</span> ascii_length, <span class="keyword">char</span> *hex, <span class="keyword">int</span> *hex_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ascii == <span class="literal">NULL</span> || hex == <span class="literal">NULL</span> || hex_length == <span class="literal">NULL</span> || ascii_length &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; index &lt; ascii_length; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            hex[index / <span class="number">2</span>] = <span class="number">0x00</span>;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            hex[index / <span class="number">2</span>] = hex[index / <span class="number">2</span>] &lt;&lt; <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ascii[index] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ascii[index] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            hex[index / <span class="number">2</span>] |= ascii[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ascii[index] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ascii[index] &lt;= <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            hex[index / <span class="number">2</span>] |= ascii[index] - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ascii[index] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ascii[index] &lt;= <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            hex[index / <span class="number">2</span>] |= ascii[index] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *hex_length = length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hex_to_ascii</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *hex, <span class="keyword">int</span> hex_length, <span class="keyword">char</span> *ascii, <span class="keyword">int</span> *ascii_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> temp = <span class="number">0x00</span>;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hex == <span class="literal">NULL</span> || hex_length &lt;= <span class="number">0</span> || ascii == <span class="literal">NULL</span> || ascii_length == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; index &lt; hex_length; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = (hex[index] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (temp &gt;= <span class="number">0x00</span> &amp;&amp; temp &lt;= <span class="number">0x09</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ascii[length] = temp + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt;= <span class="number">0x0A</span> &amp;&amp; temp &lt;= <span class="number">0x0F</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ascii[length] = temp - <span class="number">0x0A</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line"></span><br><span class="line">        temp = hex[index] &amp; <span class="number">0x0F</span>;</span><br><span class="line">        <span class="keyword">if</span> (temp &gt;= <span class="number">0x00</span> &amp;&amp; temp &lt;= <span class="number">0x09</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ascii[length] = temp + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt;= <span class="number">0x0A</span> &amp;&amp; temp &lt;= <span class="number">0x0F</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ascii[length] = temp - <span class="number">0x0A</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *ascii_length = length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_8bit</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> in_length, <span class="keyword">char</span> *out, <span class="keyword">int</span> *out_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in == <span class="literal">NULL</span> || in_length &lt;= <span class="number">0</span> || out == <span class="literal">NULL</span> || out_length == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; in_length; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        out[length++] = in[index];</span><br><span class="line">    &#125;</span><br><span class="line">    *out_length = length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dencode_ucs2</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> in_length1, <span class="keyword">char</span> *out, <span class="keyword">int</span> *out_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">iconv_t</span> icon_handler = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> in_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *inbuff;</span><br><span class="line">    <span class="keyword">int</span> out_buffer_length;</span><br><span class="line">    <span class="keyword">char</span> *out_buffer;</span><br><span class="line">    <span class="keyword">char</span> temp = <span class="number">0x00</span>;</span><br><span class="line">    in_length = in_length1;</span><br><span class="line">    out_buffer_length = *out_length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in == <span class="literal">NULL</span> || in_length &lt;= <span class="number">0</span> || in_length % <span class="number">2</span> != <span class="number">0</span> || out == <span class="literal">NULL</span> || out_length == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; in_length; index += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = in[index];</span><br><span class="line">        in[index] = in[index + <span class="number">1</span>];</span><br><span class="line">        in[index + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((icon_handler = iconv_open(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;ucs-2&quot;</span>)) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out_buffer = out;</span><br><span class="line">    inbuff = in;</span><br><span class="line">    <span class="keyword">if</span> (iconv(icon_handler, &amp;inbuff, (<span class="keyword">size_t</span> *)&amp;in_length, &amp;out_buffer, (<span class="keyword">size_t</span> *)&amp;out_buffer_length) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;decode_ucs2 errno = %d.\n&quot;</span>, errno);</span><br><span class="line">        iconv_close(icon_handler);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    iconv_close(icon_handler);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _7bit_to_ascii(<span class="keyword">char</span> *p_dst, <span class="keyword">unsigned</span> <span class="keyword">char</span> *p_src, <span class="keyword">int</span> src_size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> high_part, low_part;</span><br><span class="line">    left = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    n = (src_size * <span class="number">8</span>) / <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            p_dst[i] = p_src[pos] &amp; LOW_8BIT_MASK(<span class="number">7</span>);</span><br><span class="line">            left -= <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p_dst[i] = (p_src[pos] &amp; HIGH_8BIT_MASK(<span class="number">8</span> - left)) &gt;&gt; (<span class="number">8</span> - left);</span><br><span class="line">            left = <span class="number">8</span>;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            low_part = high_part = <span class="number">0</span>;</span><br><span class="line">            low_part = (p_src[pos] &amp; HIGH_8BIT_MASK(<span class="number">8</span> - left)) &gt;&gt; (<span class="number">8</span> - left);</span><br><span class="line">            high_part = (p_src[pos + <span class="number">1</span>] &amp; LOW_8BIT_MASK(<span class="number">7</span> - left)) &lt;&lt; left;</span><br><span class="line">            p_dst[i] = high_part | low_part;</span><br><span class="line">            left = <span class="number">8</span> - (<span class="number">7</span> - left);</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_number</span><span class="params">(<span class="keyword">char</span> *pdu_hex, <span class="keyword">int</span> number_length, <span class="keyword">char</span> *number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> type = pdu_hex[offset++] &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">145</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        number[index++] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; number_length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pdu_hex[offset + i] = ((pdu_hex[offset + i] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>) | ((pdu_hex[offset + i] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0xf0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hex_to_ascii(pdu_hex + offset, number_length - <span class="number">1</span>, number + index, &amp;num_length);</span><br><span class="line">    <span class="keyword">if</span> (number[num_length + index - <span class="number">1</span>] == <span class="string">&#x27;f&#x27;</span> || number[num_length + index - <span class="number">1</span>] == <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        number[num_length + index - <span class="number">1</span>] = <span class="number">0x00</span>;</span><br><span class="line">        num_length--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num_length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_time</span><span class="params">(<span class="keyword">char</span> *pdu, <span class="keyword">int</span> length, <span class="keyword">char</span> *timer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*int offset = 0;</span></span><br><span class="line"><span class="comment">    int timer_length = 0;</span></span><br><span class="line"><span class="comment">    int i = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    for(;i&lt;length;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        pdu_hex[offset+i] = ((pdu_hex[offset+i]&gt;&gt;4)&amp;0x0f)|((pdu_hex[offset+i]&lt;&lt;4)&amp;0xf0);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return hex_to_ascii(pdu_hex+offset, length-1, timer, &amp;timer_length);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> year = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">int</span> mouth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hour = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minute = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> zone = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    year += ((pdu[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) + (pdu[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) * <span class="number">10</span>;</span><br><span class="line">    mouth += ((pdu[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) + (pdu[<span class="number">1</span>] &amp; <span class="number">0x0F</span>) * <span class="number">10</span>;</span><br><span class="line">    day += ((pdu[<span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) + (pdu[<span class="number">2</span>] &amp; <span class="number">0x0F</span>) * <span class="number">10</span>;</span><br><span class="line">    hour += ((pdu[<span class="number">3</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) + (pdu[<span class="number">3</span>] &amp; <span class="number">0x0F</span>) * <span class="number">10</span>;</span><br><span class="line">    minute += ((pdu[<span class="number">4</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) + (pdu[<span class="number">4</span>] &amp; <span class="number">0x0F</span>) * <span class="number">10</span>;</span><br><span class="line">    second += ((pdu[<span class="number">5</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) + (pdu[<span class="number">5</span>] &amp; <span class="number">0x0F</span>) * <span class="number">10</span>;</span><br><span class="line">    zone += ((pdu[<span class="number">6</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) + (pdu[<span class="number">6</span>] &amp; <span class="number">0x0F</span>) * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(timer, <span class="string">&quot;%04d-%02d-%02d %02d:%02d:%02d&quot;</span>, year, mouth, day, hour, minute, second);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*DCS:08*/</span></span><br><span class="line">    <span class="keyword">char</span> *p = <span class="string">&quot;240D91687113988853F90000126080916090230F31D98C56B3FD403FD00FF403&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *q = <span class="string">&quot;240D91688102200982F60104218003816024230b68656c6c6f20776f726c64&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *b = <span class="string">&quot;240D91688102200982F60100218003816024230bc8329bfd065ddf72363904&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *test = <span class="string">&quot;240D91688102200982F601002180038160242304D4F29C0E&quot;</span>;</span><br><span class="line">    gsmpdu_decode(p);</span><br><span class="line">    gsmpdu_decode(q);</span><br><span class="line">    gsmpdu_decode(b);</span><br><span class="line">    gsmpdu_decode(test);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">sms信息编码协议介绍</summary>
    
    
    
    <category term="工作总结" scheme="http://example.com/category/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="工作总结" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>sqlite3</title>
    <link href="http://example.com/2021/06/30/sqlite3/"/>
    <id>http://example.com/2021/06/30/sqlite3/</id>
    <published>2021-06-30T13:12:51.000Z</published>
    <updated>2021-06-30T13:13:52.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqlite3"><a href="#sqlite3" class="headerlink" title="sqlite3"></a>sqlite3</h1><p>最近工作中用到了数据库，具体使用是，打开数据库-&gt;进行数据库操作-&gt;关闭数据库</p><h2 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h2><p>sqlite3有三个打开数据库的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sqlite3_open</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filename,   <span class="comment">/* Database filename (UTF-8) */</span></span><br><span class="line">    sqlite3 **ppDb          <span class="comment">/* OUT: SQLite db handle */</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sqlite3_open16</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span> *filename,   <span class="comment">/* Database filename (UTF-16) */</span></span><br><span class="line">    sqlite3 **ppDb          <span class="comment">/* OUT: SQLite db handle */</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sqlite3_open_v2</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filename,   <span class="comment">/* Database filename (UTF-8) */</span></span><br><span class="line">    sqlite3 **ppDb,         <span class="comment">/* OUT: SQLite db handle */</span></span><br><span class="line">    <span class="keyword">int</span> flags,              <span class="comment">/* Flags */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *zVfs        <span class="comment">/* Name of VFS module to use */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中sqlite3_open()和sqlite3_open16()都是可读可写打开数据库，如果数据库不存在，则创建数据库；它们的区别在于数据库名称的编码，前者是UTF-8，后者是UTF-16</p><p>sqlite3_open_v2()则是sqlite3_open()的升级，它可以通过flags参数，指定打开数据库的模式</p><h2 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h2><p>关闭数据库比较简单直接使用sqlite3_close(sqlite3 *db)就可以了，关于sqlite3_close_v2()我没有深入了解</p><p>关于打开和关闭数据库，我在在项目中是这样使用的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">sqlite3 *db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (access(FILE, F_OK) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    result = sqlite3_open_v2(FILE, &amp;db, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    result = sqlite3_open_v2(FILE, &amp;db, SQLITE_OPEN_READWRITE, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != SQLITE_OK)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error:%s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">    sqlite3_close(db);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断数据库是否存在，如果不存在则创建，并以可读可写模式打开；如果存在则直接以可读可写模式打开(注：由于我有一个全局变量保存SQLite db handle所以没有直接关闭数据库)</p><h2 id="执行SQLite语句"><a href="#执行SQLite语句" class="headerlink" title="执行SQLite语句"></a>执行SQLite语句</h2><p>执行SQL语句需要用到sqlite3_exec()函数，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sqlite3_exec</span><br><span class="line">(</span><br><span class="line">    sqlite3* pDB,        <span class="comment">/* sqlite3句柄 */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* sql,    <span class="comment">/* 被执行的 SQL 语句 */</span></span><br><span class="line">    <span class="keyword">int</span> (*callback)(<span class="keyword">void</span>*,<span class="keyword">int</span>,<span class="keyword">char</span>**,<span class="keyword">char</span>**),  <span class="comment">/* 执行/查询回调函数 */</span></span><br><span class="line">    <span class="keyword">void</span>* pvoid,    <span class="comment">/* 传递给回调函数的第一个参数 */</span></span><br><span class="line">    <span class="keyword">char</span>**errmsg    <span class="comment">/* 错误输出信息 */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>sqlite3_exec()接口执行多条以”; “分隔的SQL语句。如果回调函数不为 NULL, 则它对每一个行查询结果都会调用该回调函数. 如果没有回调函数被指定, sqlite3_exec() 只是简单地忽略查询结果</p><p>当在执行该SQL语句发生错误时, 执行将发生中断, 并且后面的语句也全部被忽略</p><p>如果 errmsg 参数不为空任何错误信息将会被写进由 sqlite3_malloc() 得到的的内存空间中, 即 errmsg 指向的内存。为了避免内存泄漏, 应用程序应该在不需要该错误信息后立即调用 sqlite3_free() 释放该内存空间。如果 errmsg 参数不为 NULL, 并且没有错误发生, errmsg 被设置为 NULL</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    result = sqlite3_exec(db, db_cmd_buf, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (result == SQLITE_BUSY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result == SQLITE_OK)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error:%s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>db_cmd_buf里放的就是我们需要执行的SQL语句</p><h2 id="SQLite语句"><a href="#SQLite语句" class="headerlink" title="SQLite语句"></a>SQLite语句</h2><p>SQLite 是不区分大小写的，但也有一些命令是大小写敏感的，比如 GLOB 和 glob 在 SQLite 的语句中有不同的含义</p><p>下面是在C/C++ 中传递给sqlite3_exec()函数的几类SQLite语句：</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>创建表的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name</span><br><span class="line">(</span><br><span class="line">   column1 datatype  PRIMARY KEY(one or more columns),</span><br><span class="line">   column2 datatype,</span><br><span class="line">   column3 datatype,</span><br><span class="line">   .....</span><br><span class="line">   columnN datatype,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>CREATE TABLE 是告诉数据库系统创建一个新表的关键字。CREATE TABLE 语句后跟着表的唯一的名称或标识</p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>删除表的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>添加数据语句有两种基本语法，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)] VALUES (value1, value2, value3,...valueN);</span><br><span class="line"></span><br><span class="line">INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);</span><br></pre></td></tr></table></figure><p>在这里，column1, column2,…columnN 是要插入数据的表中的列的名称。如果要为表中的所有列添加值，您也可以不需要在 SQLite 查询中指定列名称。但要确保值的顺序与列在表中的顺序一致</p><h3 id="WHERE-AND-OR"><a href="#WHERE-AND-OR" class="headerlink" title="WHERE AND OR"></a>WHERE AND OR</h3><p>SQLite的 WHERE 子句用于指定从一个表或多个表中获取数据的条件。</p><p>如果满足给定的条件，即为真（true）时，则从表中返回特定的值。您可以使用 WHERE 子句来过滤记录，只获取需要的记录。</p><p>WHERE 子句不仅可用在 SELECT 语句中，它也可用在 UPDATE、DELETE 语句中，等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQLite 语句 WHERE [condition1] AND [condition2]...AND [conditionN];</span><br><span class="line">SQLite 语句 WHERE [condition1] OR [condition2]...OR [conditionN];</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>SQLite 的 DELETE 查询用于删除表中已有的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line"></span><br><span class="line">DELETE FROM table_name WHERE [condition];</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>SQLite 的 UPDATE 查询用于修改表中已有的记录。可以使用带有 WHERE 子句的 UPDATE 查询来更新选定行，否则所有的行都会被更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET column1 &#x3D; value1, column2 &#x3D; value2...., columnN &#x3D; valueN WHERE [condition];</span><br></pre></td></tr></table></figure><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><p>SQLite 的 SELECT 语句用于从 SQLite 数据库表中获取数据，以结果表的形式返回数据。这些结果表也被称为结果集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, columnN FROM table_name;</span><br><span class="line"></span><br><span class="line">SELECT * FROM table_name;</span><br><span class="line"></span><br><span class="line">SELECT * FROM table_name WHERE [condition];</span><br></pre></td></tr></table></figure><ul><li>column1, column2…是表的字段，他们的值即是要获取的</li><li>*代表所有字段</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此次完成的工作是完成Traffic service：从modem获取lte流量，创建定时器计算每天每月每年的数据，并保存到数据库中</p><p>数据库部分，主要完成一个traffic_db_new_command_buffer()函数来根据不同的需求返回不同的语句，然后调用sqlite3_exec()函数执行，最后在回调函数中查询结果</p><p>贴出traffic_db_new_command_buffer()函数部分代码仅供参考：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">traffic_db_new_command_buffer</span><span class="params">(COMMAND_TYPE traffic_cmd_type, TABLE_TYPE table, ITEM_INFO *traffic_info, <span class="keyword">char</span> *select_tag, <span class="keyword">char</span> *where_tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *db_cmd_buff;</span><br><span class="line">    <span class="keyword">size_t</span> cmd_buff_sizes = <span class="number">512</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    TABLE_INFO *ptaffic_table_info;</span><br><span class="line">    db_cmd_buff = <span class="built_in">malloc</span>(cmd_buff_sizes + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (db_cmd_buff != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (traffic_cmd_type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> SELECT_COUNT_FROM:</span><br><span class="line">            <span class="built_in">sprintf</span>(db_cmd_buff, <span class="string">&quot;SELECT count(*) FROM %s&quot;</span>, ptaffic_table_info-&gt;table_name);</span><br><span class="line">            <span class="keyword">return</span> db_cmd_buff;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> ELECT_COUNT_FROM_WHERE:</span><br><span class="line">            <span class="built_in">sprintf</span>(db_cmd_buff, <span class="string">&quot;SELECT count(*) FROM %s WHERE %s;&quot;</span>, ptaffic_table_info-&gt;table_name, where_tag);</span><br><span class="line">            <span class="keyword">return</span> db_cmd_buff;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SELECT_FROM_WHERE:</span><br><span class="line">            <span class="built_in">sprintf</span>(db_cmd_buff, <span class="string">&quot;SELECT * FROM %s WHERE %s;&quot;</span>, ptaffic_table_info-&gt;table_name, where_tag);</span><br><span class="line">            <span class="keyword">return</span> db_cmd_buff;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SELECT_FROM:</span><br><span class="line">            <span class="built_in">sprintf</span>(db_cmd_buff, <span class="string">&quot;SELECT * FROM %s ;&quot;</span>, ptaffic_table_info-&gt;table_name);</span><br><span class="line">            <span class="keyword">return</span> db_cmd_buff;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DELETE_FROM:</span><br><span class="line">            <span class="built_in">sprintf</span>(db_cmd_buff, <span class="string">&quot;DELETE from %s;&quot;</span>, ptaffic_table_info-&gt;table_name);</span><br><span class="line">            <span class="keyword">return</span> db_cmd_buff;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DELETE_FROM_WHERE:</span><br><span class="line">            <span class="built_in">sprintf</span>(db_cmd_buff, <span class="string">&quot;DELETE from %s WHERE %s;&quot;</span>, ptaffic_table_info-&gt;table_name, where_tag);</span><br><span class="line">            <span class="keyword">return</span> db_cmd_buff;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(db_cmd_buff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">sqlite3的使用</summary>
    
    
    
    <category term="工作总结" scheme="http://example.com/category/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="工作总结" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>套接字2</title>
    <link href="http://example.com/2021/06/30/%E5%A5%97%E6%8E%A5%E5%AD%972/"/>
    <id>http://example.com/2021/06/30/%E5%A5%97%E6%8E%A5%E5%AD%972/</id>
    <published>2021-06-30T13:09:57.000Z</published>
    <updated>2021-06-30T13:10:22.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket套接字（2）"><a href="#socket套接字（2）" class="headerlink" title="socket套接字（2）"></a>socket套接字（2）</h1><h2 id="socket编程基本函数"><a href="#socket编程基本函数" class="headerlink" title="socket编程基本函数"></a>socket编程基本函数</h2><p>socket编程的基本函数有socket()、bind()、listen()、accept()、send()、sendto()、recv()以及recvfrom()等，函数说明如下：</p><ul><li>socket() ：该函数用于建立一个socket连接，可指定socket类型等信息。在建立了socket连接后，可对sockaddr或sockaddr_in结构体进行初始化，以保存所建立的socket地址信息</li><li>bind()：该函数是用于将本地IP地址绑定到端口号，若绑定其他IP地址则不成成功，主要用于TCP的连接</li><li>listen()：在服务端程序建立套接字和地址绑定之后，还需要准备在该套接字上接收新的连接请求。此时调用listen()函数来创建一个等待队列，在其中存放未处理的客户端连接请求</li><li>accept()：服务端程序调用listen()函数创建等待队列之后，调用accept()函数等待并接收客户端的连接请求。它通常在bind()所创建的等待队列中取出第一个未处理的连接请求</li><li>send()和recv()：分别用于发送和接收数据</li><li>sendto()和recvfrom()：和send()和recv()类似，UDP时可以用在没有使用connect()的情况</li></ul><h2 id="socket编程流程"><a href="#socket编程流程" class="headerlink" title="socket编程流程"></a>socket编程流程</h2><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/sockettcp.png" alt="tcp"></p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p><img src="https://cdn.jsdelivr.net/gh/Carl-5535/images@master/blog/socketudp.png" alt="udp"></p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span> <span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span> <span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *my_addr, <span class="keyword">int</span> addrlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span> <span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span> <span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span> <span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *serv_addr, <span class="keyword">int</span> addrlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span> <span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *msg, <span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span> <span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buff, <span class="keyword">int</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT            4321</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE       1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_QUE_CONN_NM 5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_sockaddr</span>, <span class="title">client_sockaddr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> sin_size, recvbytes;</span><br><span class="line">    <span class="keyword">int</span> sockfd, client_fd;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*建立socket连接*/</span></span><br><span class="line">    <span class="keyword">if</span> ((sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;socket fd = %d\n&quot;</span>, sockfd);</span><br><span class="line"></span><br><span class="line">    server_sockaddr.sin_family = AF_INET;</span><br><span class="line">    server_sockaddr.sin_port = htons(PORT);</span><br><span class="line">    server_sockaddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;(server_sockaddr.sin_zero), <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;i, <span class="keyword">sizeof</span> (i));</span><br><span class="line">    <span class="keyword">if</span> (bind(sockfd, (struct sockaddr *)&amp;server_sockaddr, <span class="keyword">sizeof</span> (struct sockaddr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Bind success!\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (listen (sockfd, MAX_QUE_CONN_NM) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Listening.....\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((client_fd = accept (sockfd, (struct sockaddr *)&amp;client_sockaddr, &amp;sin_size)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span> (buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">if</span> ((recvbytes = recv (client_fd, buf, BUFF_SIZE, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;recv&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Recv : %s\n&quot;</span>, buf);</span><br><span class="line">    close (sockfd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT            4321</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE       1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd, sendbytes;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFF_SIZE];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">host</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;USAGE: ./client Hostname(or ip address) Text\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((host = gethostbyname(argv[<span class="number">1</span>])) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;gethostbyname&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span> (buf, <span class="number">0</span>, <span class="keyword">sizeof</span> (buf));</span><br><span class="line">    <span class="built_in">sprintf</span> (buf, <span class="string">&quot;%s&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;socket fd = %d\n&quot;</span>, sockfd);</span><br><span class="line"></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(PORT);</span><br><span class="line">    serv_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;(serv_addr.sin_zero), <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (connect(sockfd, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span> (struct sockaddr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;connect success!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((sendbytes = send (sockfd, buf, BUFF_SIZE, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror (<span class="string">&quot;send&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf (&quot;Send : %s\n&quot;, buf);</span></span><br><span class="line">    close (sockfd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">socket套接字</summary>
    
    
    
    <category term="linux系统编程" scheme="http://example.com/category/linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="linux系统编程" scheme="http://example.com/tags/linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>套接字1</title>
    <link href="http://example.com/2021/06/30/%E5%A5%97%E6%8E%A5%E5%AD%971/"/>
    <id>http://example.com/2021/06/30/%E5%A5%97%E6%8E%A5%E5%AD%971/</id>
    <published>2021-06-30T13:08:54.000Z</published>
    <updated>2021-06-30T13:09:43.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket套接字（1）"><a href="#socket套接字（1）" class="headerlink" title="socket套接字（1）"></a>socket套接字（1）</h1><p>在Linux中的网络编程是通过socket接口来进行的，它也是一种文件描述符。socket是一种常用的进程之间通信机制，通过它不仅能实现本地机器上的进程之间的通信，而且通过网络能够在不同机器上的进程之间进行通信。</p><p>每一个Socket 都用一个半相关描述：</p><p>{协议，本地地址，本地端口}</p><p>一个完整的Socket 则用一个相关描述：</p><p>{协议，本地地址，本地端口，远程地址，远程端口}</p><h2 id="socket类型"><a href="#socket类型" class="headerlink" title="socket类型"></a>socket类型</h2><p>常见的socket有3种类型：</p><ol><li><p>流式socket(SOCK_STREAM) : 流式套接字提供可靠的、面向连接的通信流；它使用TCP协议，从而保证了数据传输的正确性和顺序性</p></li><li><p>数据报socket(SOCK_DGRAM) : 数据报套接字定义了一种无连接的服务，数据通过相互独立的报文进行传输，是无需并且不保证可靠、无差错的。它使用数据报协议UDP</p></li><li><p>原始socket(SOCK_RAW) : 原始套接字允许对底层协议进行直接访问，它功能强大，但使用较为复杂，主要用于协议的开发</p></li></ol><h2 id="地址结构相关处理"><a href="#地址结构相关处理" class="headerlink" title="地址结构相关处理"></a>地址结构相关处理</h2><p>地址相关的数据类型有以下两个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">struck sockaddr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*地址族*/</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> sa_family;</span><br><span class="line">    <span class="comment">/*14字节的协议地址，包含该socket的IP地址和端口号*/</span></span><br><span class="line">    <span class="keyword">char</span> sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struck sockaddr_in</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*地址族*/</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> sa_family;</span><br><span class="line">    <span class="comment">/*端口号*/</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port;</span><br><span class="line">    <span class="comment">/*IP地址*/</span></span><br><span class="line">    struck in_addr sin_addr;</span><br><span class="line">    <span class="comment">/*填充0，以保持与struck sockaddr同样大小*/</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个数据类型是等效的，可以互相妆化，通常sockaddr_in使用更加方便</p><p>sa_family可选值有：</p><ul><li>AF_INET : IPv4协议</li><li>AF_INET6 : IPv6协议</li><li>AF_LOCAL : UNIX域协议</li><li>AF_LINK : 链路地址协议</li><li>AF_KEY : 密钥套接字</li></ul><h2 id="数据存储有点顺序"><a href="#数据存储有点顺序" class="headerlink" title="数据存储有点顺序"></a>数据存储有点顺序</h2><p>计算机数据存储有两种字节优先顺序：高位字节优先（大端模式）和低位字节优先（小端模式）,Internet上数据以高字节优先顺序在网络上传输，因此在有些情况下需要对这两个字节存储优先顺序进行相互转化。这里用到了4个函数：htons()、ntohs()、htonl()、ntohl()。这四个函数分别实现网络字节序和主机字节序的转化。h代表host，n代表network，s代表short，l代表long。通常16位的IP端口号用s代表，而IP地址用l代表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">htons</span> <span class="params">(<span class="keyword">unit16_t</span> host16bit)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">ntohs</span> <span class="params">(<span class="keyword">unit16_t</span> net16bit)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">htonl</span> <span class="params">(<span class="keyword">unit32_t</span> host32bit)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">ntohl</span> <span class="params">(<span class="keyword">unit32_t</span> net32bit)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="地址格式转化"><a href="#地址格式转化" class="headerlink" title="地址格式转化"></a>地址格式转化</h2><p>通常用户在表达地址时采用的是点分十进制表示的数值，而在socket编程中使用的是二进制值，这就需要将这两个值进行转换。IPv4中用到的函数有inet_aton()、inet_addr()和inet_ntoa()，IPv4和IPv6兼容的有inet_pton()和inet_ntop()。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串转in_addr的函数：</span></span><br><span class="line"><span class="function"><span class="keyword">int_addr_t</span> <span class="title">inet_addr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *strptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_aton</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* strptr,struct in_addr *addrptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_pton</span><span class="params">(<span class="keyword">int</span> family,<span class="keyword">const</span> <span class="keyword">char</span>* strptr,<span class="keyword">void</span> *addrptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in_addr转字符串的函数：</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">inet_ntoa</span><span class="params">(struct in_addr inaddr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">inet_ntop</span><span class="params">(<span class="keyword">int</span> famliy,<span class="keyword">const</span> <span class="keyword">void</span>*addrptr,<span class="keyword">char</span> *strptr,<span class="keyword">size_t</span> len)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="名字地址转换"><a href="#名字地址转换" class="headerlink" title="名字地址转换"></a>名字地址转换</h2><p>在Linux中实现主机名和地址的转换函数有：gethostbyname()、gethostbyaddr()和getaddrinfo()等。其中gethostbyname()是将主机名转化为IP地址，gethostbyaddr()则是逆操作</p><p>gethostbyname()、gethostbyaddr()都涉及一个hostent的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *h_name; <span class="comment">/*正式主机名*/</span></span><br><span class="line">    <span class="keyword">char</span> **h_aliases; <span class="comment">/*主机别名*/</span></span><br><span class="line">    <span class="keyword">int</span> h_addrtype; <span class="comment">/*地址类型*/</span></span><br><span class="line">    <span class="keyword">int</span> h_length; <span class="comment">/*地址长度*/</span></span><br><span class="line">    <span class="keyword">char</span> **h_addr_list; <span class="comment">/*指向地址的指针数组*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getaddrinfo()涉及一个addrinfo的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ai_flags; <span class="comment">/*AI_PASSIVE, AI_CANONNAME*/</span></span><br><span class="line">    <span class="keyword">int</span> ai_famuly; <span class="comment">/*地址族*/</span></span><br><span class="line">    <span class="keyword">int</span> ai_socketype; <span class="comment">/*socket类型*/</span></span><br><span class="line">    <span class="keyword">int</span> ai_protocol; <span class="comment">/*协议类型*/</span></span><br><span class="line">    <span class="keyword">size_t</span> ai_addrlen; <span class="comment">/*地址字节长度*/</span></span><br><span class="line">    <span class="keyword">char</span> *ai_canonname; <span class="comment">/*主机名*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> *<span class="title">ai_addr</span>;</span> <span class="comment">/*socket结构体*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">ai_next</span>;</span> <span class="comment">/*下一个指针链表*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gethostbyname"><a href="#gethostbyname" class="headerlink" title="gethostbyname()"></a>gethostbyname()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="function">struct hostent *<span class="title">gethostbyname</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *hostname)</span></span>;</span><br></pre></td></tr></table></figure><p>hostname : 主机名</p><p>成功返回hostent结构体指针，出错返回-1</p><h3 id="getaddrinfo"><a href="#getaddrinfo" class="headerlink" title="getaddrinfo()"></a>getaddrinfo()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getaddrinfo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *node, <span class="keyword">const</span> <span class="keyword">char</span> *service, <span class="keyword">const</span> struct addrinfo *hints, struct addrinfo **result)</span></span>;</span><br></pre></td></tr></table></figure><p>node : 网络地址或网络主机名</p><p>service : 服务名或十进制的端口号字串</p><p>hints : 服务线索</p><p>result : 返回结果</p><p>成功返回0，出错返回-1</p><p>在调用之前，首先要对hints服务器线索进行设置，下面给出addrinfo常见的选项值</p><p>ai_flags:</p><ul><li>AI_PASSIVE 该套接口是用作被动打开</li><li>AI_CANONNAME 通知getaddrinfo函数返回主机的名字</li></ul><p>ai_family:</p><ul><li>AF_INET IPv4协议</li><li>AF_INET6 IPv6协议</li><li>AF_UNSPEC IPv4或IPv6协议</li></ul><p>ai_socktype :</p><ul><li>SOCK_STREAM 字节流套接字socket（TCP）</li><li>SOCK_DGRAM 数据报套接字spcket（UDP）</li></ul><p>ai_protocol:</p><ul><li>IPPROTO_IP IP协议</li><li>IPPROTO_IPV4 IPv4协议</li><li>IPPROTO_IPV6 IPv6协议</li><li>IPPROTO_UDP UDP</li><li>IPPROTO_TCP TCP</li></ul><blockquote><ul><li>通常服务端在调用getaddrinfo()之前，ai_flag设置AI_PASSIVE，用于bind()函数，主机名会设置为NULL</li><li>客户端调用getaddrinfo()时，ai_flags一般不设置AI_PASSIVE，但是主机名和服务名不应该为空</li></ul></blockquote><h3 id="getaddrinfo-用法"><a href="#getaddrinfo-用法" class="headerlink" title="getaddrinfo()用法"></a>getaddrinfo()用法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hints</span>, *<span class="title">res</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span> (&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> (hints));</span><br><span class="line">    hints.ai_flags = AI_CANONNAME;</span><br><span class="line">    hints.ai_family = AF_UNSPEC;</span><br><span class="line">    hints.ai_socktype = SOCK_DGRAM;</span><br><span class="line">    hints.ai_protocol = IPPROTO_UDP;</span><br><span class="line"></span><br><span class="line">    rc = getaddrinfo(<span class="string">&quot;localhost&quot;</span>, <span class="literal">NULL</span>, &amp;hints, &amp;res);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;getaddrinfo&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Host name is %s\n&quot;</span>, res-&gt;ai_canonname);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">socket套接字</summary>
    
    
    
    <category term="linux系统编程" scheme="http://example.com/category/linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="linux系统编程" scheme="http://example.com/tags/linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
